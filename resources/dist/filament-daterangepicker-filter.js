(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __exportStar = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
  };

  // resources/js/jquery.min.js
  var require_jquery_min = __commonJS((exports, module) => {
    /*! jQuery v3.6.0 | (c) OpenJS Foundation and other contributors | jquery.org/license */
    !function(e, t) {
      "use strict";
      typeof module == "object" && typeof module.exports == "object" ? module.exports = e.document ? t(e, true) : function(e2) {
        if (!e2.document)
          throw new Error("jQuery requires a window with a document");
        return t(e2);
      } : t(e);
    }(typeof window != "undefined" ? window : exports, function(C, e) {
      "use strict";
      var t = [], r = Object.getPrototypeOf, s = t.slice, g = t.flat ? function(e2) {
        return t.flat.call(e2);
      } : function(e2) {
        return t.concat.apply([], e2);
      }, u = t.push, i = t.indexOf, n = {}, o = n.toString, v = n.hasOwnProperty, a = v.toString, l = a.call(Object), y = {}, m = function(e2) {
        return typeof e2 == "function" && typeof e2.nodeType != "number" && typeof e2.item != "function";
      }, x = function(e2) {
        return e2 != null && e2 === e2.window;
      }, E = C.document, c = {type: true, src: true, nonce: true, noModule: true};
      function b(e2, t2, n2) {
        var r2, i2, o2 = (n2 = n2 || E).createElement("script");
        if (o2.text = e2, t2)
          for (r2 in c)
            (i2 = t2[r2] || t2.getAttribute && t2.getAttribute(r2)) && o2.setAttribute(r2, i2);
        n2.head.appendChild(o2).parentNode.removeChild(o2);
      }
      function w(e2) {
        return e2 == null ? e2 + "" : typeof e2 == "object" || typeof e2 == "function" ? n[o.call(e2)] || "object" : typeof e2;
      }
      var f = "3.6.0", S = function(e2, t2) {
        return new S.fn.init(e2, t2);
      };
      function p(e2) {
        var t2 = !!e2 && "length" in e2 && e2.length, n2 = w(e2);
        return !m(e2) && !x(e2) && (n2 === "array" || t2 === 0 || typeof t2 == "number" && 0 < t2 && t2 - 1 in e2);
      }
      S.fn = S.prototype = {jquery: f, constructor: S, length: 0, toArray: function() {
        return s.call(this);
      }, get: function(e2) {
        return e2 == null ? s.call(this) : e2 < 0 ? this[e2 + this.length] : this[e2];
      }, pushStack: function(e2) {
        var t2 = S.merge(this.constructor(), e2);
        return t2.prevObject = this, t2;
      }, each: function(e2) {
        return S.each(this, e2);
      }, map: function(n2) {
        return this.pushStack(S.map(this, function(e2, t2) {
          return n2.call(e2, t2, e2);
        }));
      }, slice: function() {
        return this.pushStack(s.apply(this, arguments));
      }, first: function() {
        return this.eq(0);
      }, last: function() {
        return this.eq(-1);
      }, even: function() {
        return this.pushStack(S.grep(this, function(e2, t2) {
          return (t2 + 1) % 2;
        }));
      }, odd: function() {
        return this.pushStack(S.grep(this, function(e2, t2) {
          return t2 % 2;
        }));
      }, eq: function(e2) {
        var t2 = this.length, n2 = +e2 + (e2 < 0 ? t2 : 0);
        return this.pushStack(0 <= n2 && n2 < t2 ? [this[n2]] : []);
      }, end: function() {
        return this.prevObject || this.constructor();
      }, push: u, sort: t.sort, splice: t.splice}, S.extend = S.fn.extend = function() {
        var e2, t2, n2, r2, i2, o2, a2 = arguments[0] || {}, s2 = 1, u2 = arguments.length, l2 = false;
        for (typeof a2 == "boolean" && (l2 = a2, a2 = arguments[s2] || {}, s2++), typeof a2 == "object" || m(a2) || (a2 = {}), s2 === u2 && (a2 = this, s2--); s2 < u2; s2++)
          if ((e2 = arguments[s2]) != null)
            for (t2 in e2)
              r2 = e2[t2], t2 !== "__proto__" && a2 !== r2 && (l2 && r2 && (S.isPlainObject(r2) || (i2 = Array.isArray(r2))) ? (n2 = a2[t2], o2 = i2 && !Array.isArray(n2) ? [] : i2 || S.isPlainObject(n2) ? n2 : {}, i2 = false, a2[t2] = S.extend(l2, o2, r2)) : r2 !== void 0 && (a2[t2] = r2));
        return a2;
      }, S.extend({expando: "jQuery" + (f + Math.random()).replace(/\D/g, ""), isReady: true, error: function(e2) {
        throw new Error(e2);
      }, noop: function() {
      }, isPlainObject: function(e2) {
        var t2, n2;
        return !(!e2 || o.call(e2) !== "[object Object]") && (!(t2 = r(e2)) || typeof (n2 = v.call(t2, "constructor") && t2.constructor) == "function" && a.call(n2) === l);
      }, isEmptyObject: function(e2) {
        var t2;
        for (t2 in e2)
          return false;
        return true;
      }, globalEval: function(e2, t2, n2) {
        b(e2, {nonce: t2 && t2.nonce}, n2);
      }, each: function(e2, t2) {
        var n2, r2 = 0;
        if (p(e2)) {
          for (n2 = e2.length; r2 < n2; r2++)
            if (t2.call(e2[r2], r2, e2[r2]) === false)
              break;
        } else
          for (r2 in e2)
            if (t2.call(e2[r2], r2, e2[r2]) === false)
              break;
        return e2;
      }, makeArray: function(e2, t2) {
        var n2 = t2 || [];
        return e2 != null && (p(Object(e2)) ? S.merge(n2, typeof e2 == "string" ? [e2] : e2) : u.call(n2, e2)), n2;
      }, inArray: function(e2, t2, n2) {
        return t2 == null ? -1 : i.call(t2, e2, n2);
      }, merge: function(e2, t2) {
        for (var n2 = +t2.length, r2 = 0, i2 = e2.length; r2 < n2; r2++)
          e2[i2++] = t2[r2];
        return e2.length = i2, e2;
      }, grep: function(e2, t2, n2) {
        for (var r2 = [], i2 = 0, o2 = e2.length, a2 = !n2; i2 < o2; i2++)
          !t2(e2[i2], i2) !== a2 && r2.push(e2[i2]);
        return r2;
      }, map: function(e2, t2, n2) {
        var r2, i2, o2 = 0, a2 = [];
        if (p(e2))
          for (r2 = e2.length; o2 < r2; o2++)
            (i2 = t2(e2[o2], o2, n2)) != null && a2.push(i2);
        else
          for (o2 in e2)
            (i2 = t2(e2[o2], o2, n2)) != null && a2.push(i2);
        return g(a2);
      }, guid: 1, support: y}), typeof Symbol == "function" && (S.fn[Symbol.iterator] = t[Symbol.iterator]), S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e2, t2) {
        n["[object " + t2 + "]"] = t2.toLowerCase();
      });
      var d = function(n2) {
        var e2, d2, b2, o2, i2, h2, f2, g2, w2, u2, l2, T2, C2, a2, E2, v2, s2, c2, y2, S2 = "sizzle" + 1 * new Date(), p2 = n2.document, k2 = 0, r2 = 0, m2 = ue2(), x2 = ue2(), A2 = ue2(), N2 = ue2(), j2 = function(e3, t3) {
          return e3 === t3 && (l2 = true), 0;
        }, D2 = {}.hasOwnProperty, t2 = [], q2 = t2.pop, L2 = t2.push, H2 = t2.push, O2 = t2.slice, P2 = function(e3, t3) {
          for (var n3 = 0, r3 = e3.length; n3 < r3; n3++)
            if (e3[n3] === t3)
              return n3;
          return -1;
        }, R2 = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", M2 = "[\\x20\\t\\r\\n\\f]", I2 = "(?:\\\\[\\da-fA-F]{1,6}" + M2 + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", W2 = "\\[" + M2 + "*(" + I2 + ")(?:" + M2 + "*([*^$|!~]?=)" + M2 + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + I2 + "))|)" + M2 + "*\\]", F2 = ":(" + I2 + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + W2 + ")*)|.*)\\)|)", B2 = new RegExp(M2 + "+", "g"), $3 = new RegExp("^" + M2 + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M2 + "+$", "g"), _2 = new RegExp("^" + M2 + "*," + M2 + "*"), z2 = new RegExp("^" + M2 + "*([>+~]|" + M2 + ")" + M2 + "*"), U2 = new RegExp(M2 + "|>"), X2 = new RegExp(F2), V2 = new RegExp("^" + I2 + "$"), G2 = {ID: new RegExp("^#(" + I2 + ")"), CLASS: new RegExp("^\\.(" + I2 + ")"), TAG: new RegExp("^(" + I2 + "|[*])"), ATTR: new RegExp("^" + W2), PSEUDO: new RegExp("^" + F2), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M2 + "*(even|odd|(([+-]|)(\\d*)n|)" + M2 + "*(?:([+-]|)" + M2 + "*(\\d+)|))" + M2 + "*\\)|)", "i"), bool: new RegExp("^(?:" + R2 + ")$", "i"), needsContext: new RegExp("^" + M2 + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M2 + "*((?:-\\d)?\\d*)" + M2 + "*\\)|)(?=[^-]|$)", "i")}, Y2 = /HTML$/i, Q2 = /^(?:input|select|textarea|button)$/i, J2 = /^h\d$/i, K2 = /^[^{]+\{\s*\[native \w/, Z2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ee2 = /[+~]/, te2 = new RegExp("\\\\[\\da-fA-F]{1,6}" + M2 + "?|\\\\([^\\r\\n\\f])", "g"), ne2 = function(e3, t3) {
          var n3 = "0x" + e3.slice(1) - 65536;
          return t3 || (n3 < 0 ? String.fromCharCode(n3 + 65536) : String.fromCharCode(n3 >> 10 | 55296, 1023 & n3 | 56320));
        }, re2 = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, ie2 = function(e3, t3) {
          return t3 ? e3 === "\0" ? "\uFFFD" : e3.slice(0, -1) + "\\" + e3.charCodeAt(e3.length - 1).toString(16) + " " : "\\" + e3;
        }, oe2 = function() {
          T2();
        }, ae2 = be2(function(e3) {
          return e3.disabled === true && e3.nodeName.toLowerCase() === "fieldset";
        }, {dir: "parentNode", next: "legend"});
        try {
          H2.apply(t2 = O2.call(p2.childNodes), p2.childNodes), t2[p2.childNodes.length].nodeType;
        } catch (e3) {
          H2 = {apply: t2.length ? function(e4, t3) {
            L2.apply(e4, O2.call(t3));
          } : function(e4, t3) {
            var n3 = e4.length, r3 = 0;
            while (e4[n3++] = t3[r3++])
              ;
            e4.length = n3 - 1;
          }};
        }
        function se2(t3, e3, n3, r3) {
          var i3, o3, a3, s3, u3, l3, c3, f3 = e3 && e3.ownerDocument, p3 = e3 ? e3.nodeType : 9;
          if (n3 = n3 || [], typeof t3 != "string" || !t3 || p3 !== 1 && p3 !== 9 && p3 !== 11)
            return n3;
          if (!r3 && (T2(e3), e3 = e3 || C2, E2)) {
            if (p3 !== 11 && (u3 = Z2.exec(t3)))
              if (i3 = u3[1]) {
                if (p3 === 9) {
                  if (!(a3 = e3.getElementById(i3)))
                    return n3;
                  if (a3.id === i3)
                    return n3.push(a3), n3;
                } else if (f3 && (a3 = f3.getElementById(i3)) && y2(e3, a3) && a3.id === i3)
                  return n3.push(a3), n3;
              } else {
                if (u3[2])
                  return H2.apply(n3, e3.getElementsByTagName(t3)), n3;
                if ((i3 = u3[3]) && d2.getElementsByClassName && e3.getElementsByClassName)
                  return H2.apply(n3, e3.getElementsByClassName(i3)), n3;
              }
            if (d2.qsa && !N2[t3 + " "] && (!v2 || !v2.test(t3)) && (p3 !== 1 || e3.nodeName.toLowerCase() !== "object")) {
              if (c3 = t3, f3 = e3, p3 === 1 && (U2.test(t3) || z2.test(t3))) {
                (f3 = ee2.test(t3) && ye2(e3.parentNode) || e3) === e3 && d2.scope || ((s3 = e3.getAttribute("id")) ? s3 = s3.replace(re2, ie2) : e3.setAttribute("id", s3 = S2)), o3 = (l3 = h2(t3)).length;
                while (o3--)
                  l3[o3] = (s3 ? "#" + s3 : ":scope") + " " + xe2(l3[o3]);
                c3 = l3.join(",");
              }
              try {
                return H2.apply(n3, f3.querySelectorAll(c3)), n3;
              } catch (e4) {
                N2(t3, true);
              } finally {
                s3 === S2 && e3.removeAttribute("id");
              }
            }
          }
          return g2(t3.replace($3, "$1"), e3, n3, r3);
        }
        function ue2() {
          var r3 = [];
          return function e3(t3, n3) {
            return r3.push(t3 + " ") > b2.cacheLength && delete e3[r3.shift()], e3[t3 + " "] = n3;
          };
        }
        function le2(e3) {
          return e3[S2] = true, e3;
        }
        function ce2(e3) {
          var t3 = C2.createElement("fieldset");
          try {
            return !!e3(t3);
          } catch (e4) {
            return false;
          } finally {
            t3.parentNode && t3.parentNode.removeChild(t3), t3 = null;
          }
        }
        function fe2(e3, t3) {
          var n3 = e3.split("|"), r3 = n3.length;
          while (r3--)
            b2.attrHandle[n3[r3]] = t3;
        }
        function pe2(e3, t3) {
          var n3 = t3 && e3, r3 = n3 && e3.nodeType === 1 && t3.nodeType === 1 && e3.sourceIndex - t3.sourceIndex;
          if (r3)
            return r3;
          if (n3) {
            while (n3 = n3.nextSibling)
              if (n3 === t3)
                return -1;
          }
          return e3 ? 1 : -1;
        }
        function de2(t3) {
          return function(e3) {
            return e3.nodeName.toLowerCase() === "input" && e3.type === t3;
          };
        }
        function he2(n3) {
          return function(e3) {
            var t3 = e3.nodeName.toLowerCase();
            return (t3 === "input" || t3 === "button") && e3.type === n3;
          };
        }
        function ge2(t3) {
          return function(e3) {
            return "form" in e3 ? e3.parentNode && e3.disabled === false ? "label" in e3 ? "label" in e3.parentNode ? e3.parentNode.disabled === t3 : e3.disabled === t3 : e3.isDisabled === t3 || e3.isDisabled !== !t3 && ae2(e3) === t3 : e3.disabled === t3 : "label" in e3 && e3.disabled === t3;
          };
        }
        function ve2(a3) {
          return le2(function(o3) {
            return o3 = +o3, le2(function(e3, t3) {
              var n3, r3 = a3([], e3.length, o3), i3 = r3.length;
              while (i3--)
                e3[n3 = r3[i3]] && (e3[n3] = !(t3[n3] = e3[n3]));
            });
          });
        }
        function ye2(e3) {
          return e3 && typeof e3.getElementsByTagName != "undefined" && e3;
        }
        for (e2 in d2 = se2.support = {}, i2 = se2.isXML = function(e3) {
          var t3 = e3 && e3.namespaceURI, n3 = e3 && (e3.ownerDocument || e3).documentElement;
          return !Y2.test(t3 || n3 && n3.nodeName || "HTML");
        }, T2 = se2.setDocument = function(e3) {
          var t3, n3, r3 = e3 ? e3.ownerDocument || e3 : p2;
          return r3 != C2 && r3.nodeType === 9 && r3.documentElement && (a2 = (C2 = r3).documentElement, E2 = !i2(C2), p2 != C2 && (n3 = C2.defaultView) && n3.top !== n3 && (n3.addEventListener ? n3.addEventListener("unload", oe2, false) : n3.attachEvent && n3.attachEvent("onunload", oe2)), d2.scope = ce2(function(e4) {
            return a2.appendChild(e4).appendChild(C2.createElement("div")), typeof e4.querySelectorAll != "undefined" && !e4.querySelectorAll(":scope fieldset div").length;
          }), d2.attributes = ce2(function(e4) {
            return e4.className = "i", !e4.getAttribute("className");
          }), d2.getElementsByTagName = ce2(function(e4) {
            return e4.appendChild(C2.createComment("")), !e4.getElementsByTagName("*").length;
          }), d2.getElementsByClassName = K2.test(C2.getElementsByClassName), d2.getById = ce2(function(e4) {
            return a2.appendChild(e4).id = S2, !C2.getElementsByName || !C2.getElementsByName(S2).length;
          }), d2.getById ? (b2.filter.ID = function(e4) {
            var t4 = e4.replace(te2, ne2);
            return function(e5) {
              return e5.getAttribute("id") === t4;
            };
          }, b2.find.ID = function(e4, t4) {
            if (typeof t4.getElementById != "undefined" && E2) {
              var n4 = t4.getElementById(e4);
              return n4 ? [n4] : [];
            }
          }) : (b2.filter.ID = function(e4) {
            var n4 = e4.replace(te2, ne2);
            return function(e5) {
              var t4 = typeof e5.getAttributeNode != "undefined" && e5.getAttributeNode("id");
              return t4 && t4.value === n4;
            };
          }, b2.find.ID = function(e4, t4) {
            if (typeof t4.getElementById != "undefined" && E2) {
              var n4, r4, i3, o3 = t4.getElementById(e4);
              if (o3) {
                if ((n4 = o3.getAttributeNode("id")) && n4.value === e4)
                  return [o3];
                i3 = t4.getElementsByName(e4), r4 = 0;
                while (o3 = i3[r4++])
                  if ((n4 = o3.getAttributeNode("id")) && n4.value === e4)
                    return [o3];
              }
              return [];
            }
          }), b2.find.TAG = d2.getElementsByTagName ? function(e4, t4) {
            return typeof t4.getElementsByTagName != "undefined" ? t4.getElementsByTagName(e4) : d2.qsa ? t4.querySelectorAll(e4) : void 0;
          } : function(e4, t4) {
            var n4, r4 = [], i3 = 0, o3 = t4.getElementsByTagName(e4);
            if (e4 === "*") {
              while (n4 = o3[i3++])
                n4.nodeType === 1 && r4.push(n4);
              return r4;
            }
            return o3;
          }, b2.find.CLASS = d2.getElementsByClassName && function(e4, t4) {
            if (typeof t4.getElementsByClassName != "undefined" && E2)
              return t4.getElementsByClassName(e4);
          }, s2 = [], v2 = [], (d2.qsa = K2.test(C2.querySelectorAll)) && (ce2(function(e4) {
            var t4;
            a2.appendChild(e4).innerHTML = "<a id='" + S2 + "'></a><select id='" + S2 + "-\r\\' msallowcapture=''><option selected=''></option></select>", e4.querySelectorAll("[msallowcapture^='']").length && v2.push("[*^$]=" + M2 + `*(?:''|"")`), e4.querySelectorAll("[selected]").length || v2.push("\\[" + M2 + "*(?:value|" + R2 + ")"), e4.querySelectorAll("[id~=" + S2 + "-]").length || v2.push("~="), (t4 = C2.createElement("input")).setAttribute("name", ""), e4.appendChild(t4), e4.querySelectorAll("[name='']").length || v2.push("\\[" + M2 + "*name" + M2 + "*=" + M2 + `*(?:''|"")`), e4.querySelectorAll(":checked").length || v2.push(":checked"), e4.querySelectorAll("a#" + S2 + "+*").length || v2.push(".#.+[+~]"), e4.querySelectorAll("\\\f"), v2.push("[\\r\\n\\f]");
          }), ce2(function(e4) {
            e4.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
            var t4 = C2.createElement("input");
            t4.setAttribute("type", "hidden"), e4.appendChild(t4).setAttribute("name", "D"), e4.querySelectorAll("[name=d]").length && v2.push("name" + M2 + "*[*^$|!~]?="), e4.querySelectorAll(":enabled").length !== 2 && v2.push(":enabled", ":disabled"), a2.appendChild(e4).disabled = true, e4.querySelectorAll(":disabled").length !== 2 && v2.push(":enabled", ":disabled"), e4.querySelectorAll("*,:x"), v2.push(",.*:");
          })), (d2.matchesSelector = K2.test(c2 = a2.matches || a2.webkitMatchesSelector || a2.mozMatchesSelector || a2.oMatchesSelector || a2.msMatchesSelector)) && ce2(function(e4) {
            d2.disconnectedMatch = c2.call(e4, "*"), c2.call(e4, "[s!='']:x"), s2.push("!=", F2);
          }), v2 = v2.length && new RegExp(v2.join("|")), s2 = s2.length && new RegExp(s2.join("|")), t3 = K2.test(a2.compareDocumentPosition), y2 = t3 || K2.test(a2.contains) ? function(e4, t4) {
            var n4 = e4.nodeType === 9 ? e4.documentElement : e4, r4 = t4 && t4.parentNode;
            return e4 === r4 || !(!r4 || r4.nodeType !== 1 || !(n4.contains ? n4.contains(r4) : e4.compareDocumentPosition && 16 & e4.compareDocumentPosition(r4)));
          } : function(e4, t4) {
            if (t4) {
              while (t4 = t4.parentNode)
                if (t4 === e4)
                  return true;
            }
            return false;
          }, j2 = t3 ? function(e4, t4) {
            if (e4 === t4)
              return l2 = true, 0;
            var n4 = !e4.compareDocumentPosition - !t4.compareDocumentPosition;
            return n4 || (1 & (n4 = (e4.ownerDocument || e4) == (t4.ownerDocument || t4) ? e4.compareDocumentPosition(t4) : 1) || !d2.sortDetached && t4.compareDocumentPosition(e4) === n4 ? e4 == C2 || e4.ownerDocument == p2 && y2(p2, e4) ? -1 : t4 == C2 || t4.ownerDocument == p2 && y2(p2, t4) ? 1 : u2 ? P2(u2, e4) - P2(u2, t4) : 0 : 4 & n4 ? -1 : 1);
          } : function(e4, t4) {
            if (e4 === t4)
              return l2 = true, 0;
            var n4, r4 = 0, i3 = e4.parentNode, o3 = t4.parentNode, a3 = [e4], s3 = [t4];
            if (!i3 || !o3)
              return e4 == C2 ? -1 : t4 == C2 ? 1 : i3 ? -1 : o3 ? 1 : u2 ? P2(u2, e4) - P2(u2, t4) : 0;
            if (i3 === o3)
              return pe2(e4, t4);
            n4 = e4;
            while (n4 = n4.parentNode)
              a3.unshift(n4);
            n4 = t4;
            while (n4 = n4.parentNode)
              s3.unshift(n4);
            while (a3[r4] === s3[r4])
              r4++;
            return r4 ? pe2(a3[r4], s3[r4]) : a3[r4] == p2 ? -1 : s3[r4] == p2 ? 1 : 0;
          }), C2;
        }, se2.matches = function(e3, t3) {
          return se2(e3, null, null, t3);
        }, se2.matchesSelector = function(e3, t3) {
          if (T2(e3), d2.matchesSelector && E2 && !N2[t3 + " "] && (!s2 || !s2.test(t3)) && (!v2 || !v2.test(t3)))
            try {
              var n3 = c2.call(e3, t3);
              if (n3 || d2.disconnectedMatch || e3.document && e3.document.nodeType !== 11)
                return n3;
            } catch (e4) {
              N2(t3, true);
            }
          return 0 < se2(t3, C2, null, [e3]).length;
        }, se2.contains = function(e3, t3) {
          return (e3.ownerDocument || e3) != C2 && T2(e3), y2(e3, t3);
        }, se2.attr = function(e3, t3) {
          (e3.ownerDocument || e3) != C2 && T2(e3);
          var n3 = b2.attrHandle[t3.toLowerCase()], r3 = n3 && D2.call(b2.attrHandle, t3.toLowerCase()) ? n3(e3, t3, !E2) : void 0;
          return r3 !== void 0 ? r3 : d2.attributes || !E2 ? e3.getAttribute(t3) : (r3 = e3.getAttributeNode(t3)) && r3.specified ? r3.value : null;
        }, se2.escape = function(e3) {
          return (e3 + "").replace(re2, ie2);
        }, se2.error = function(e3) {
          throw new Error("Syntax error, unrecognized expression: " + e3);
        }, se2.uniqueSort = function(e3) {
          var t3, n3 = [], r3 = 0, i3 = 0;
          if (l2 = !d2.detectDuplicates, u2 = !d2.sortStable && e3.slice(0), e3.sort(j2), l2) {
            while (t3 = e3[i3++])
              t3 === e3[i3] && (r3 = n3.push(i3));
            while (r3--)
              e3.splice(n3[r3], 1);
          }
          return u2 = null, e3;
        }, o2 = se2.getText = function(e3) {
          var t3, n3 = "", r3 = 0, i3 = e3.nodeType;
          if (i3) {
            if (i3 === 1 || i3 === 9 || i3 === 11) {
              if (typeof e3.textContent == "string")
                return e3.textContent;
              for (e3 = e3.firstChild; e3; e3 = e3.nextSibling)
                n3 += o2(e3);
            } else if (i3 === 3 || i3 === 4)
              return e3.nodeValue;
          } else
            while (t3 = e3[r3++])
              n3 += o2(t3);
          return n3;
        }, (b2 = se2.selectors = {cacheLength: 50, createPseudo: le2, match: G2, attrHandle: {}, find: {}, relative: {">": {dir: "parentNode", first: true}, " ": {dir: "parentNode"}, "+": {dir: "previousSibling", first: true}, "~": {dir: "previousSibling"}}, preFilter: {ATTR: function(e3) {
          return e3[1] = e3[1].replace(te2, ne2), e3[3] = (e3[3] || e3[4] || e3[5] || "").replace(te2, ne2), e3[2] === "~=" && (e3[3] = " " + e3[3] + " "), e3.slice(0, 4);
        }, CHILD: function(e3) {
          return e3[1] = e3[1].toLowerCase(), e3[1].slice(0, 3) === "nth" ? (e3[3] || se2.error(e3[0]), e3[4] = +(e3[4] ? e3[5] + (e3[6] || 1) : 2 * (e3[3] === "even" || e3[3] === "odd")), e3[5] = +(e3[7] + e3[8] || e3[3] === "odd")) : e3[3] && se2.error(e3[0]), e3;
        }, PSEUDO: function(e3) {
          var t3, n3 = !e3[6] && e3[2];
          return G2.CHILD.test(e3[0]) ? null : (e3[3] ? e3[2] = e3[4] || e3[5] || "" : n3 && X2.test(n3) && (t3 = h2(n3, true)) && (t3 = n3.indexOf(")", n3.length - t3) - n3.length) && (e3[0] = e3[0].slice(0, t3), e3[2] = n3.slice(0, t3)), e3.slice(0, 3));
        }}, filter: {TAG: function(e3) {
          var t3 = e3.replace(te2, ne2).toLowerCase();
          return e3 === "*" ? function() {
            return true;
          } : function(e4) {
            return e4.nodeName && e4.nodeName.toLowerCase() === t3;
          };
        }, CLASS: function(e3) {
          var t3 = m2[e3 + " "];
          return t3 || (t3 = new RegExp("(^|" + M2 + ")" + e3 + "(" + M2 + "|$)")) && m2(e3, function(e4) {
            return t3.test(typeof e4.className == "string" && e4.className || typeof e4.getAttribute != "undefined" && e4.getAttribute("class") || "");
          });
        }, ATTR: function(n3, r3, i3) {
          return function(e3) {
            var t3 = se2.attr(e3, n3);
            return t3 == null ? r3 === "!=" : !r3 || (t3 += "", r3 === "=" ? t3 === i3 : r3 === "!=" ? t3 !== i3 : r3 === "^=" ? i3 && t3.indexOf(i3) === 0 : r3 === "*=" ? i3 && -1 < t3.indexOf(i3) : r3 === "$=" ? i3 && t3.slice(-i3.length) === i3 : r3 === "~=" ? -1 < (" " + t3.replace(B2, " ") + " ").indexOf(i3) : r3 === "|=" && (t3 === i3 || t3.slice(0, i3.length + 1) === i3 + "-"));
          };
        }, CHILD: function(h3, e3, t3, g3, v3) {
          var y3 = h3.slice(0, 3) !== "nth", m3 = h3.slice(-4) !== "last", x3 = e3 === "of-type";
          return g3 === 1 && v3 === 0 ? function(e4) {
            return !!e4.parentNode;
          } : function(e4, t4, n3) {
            var r3, i3, o3, a3, s3, u3, l3 = y3 !== m3 ? "nextSibling" : "previousSibling", c3 = e4.parentNode, f3 = x3 && e4.nodeName.toLowerCase(), p3 = !n3 && !x3, d3 = false;
            if (c3) {
              if (y3) {
                while (l3) {
                  a3 = e4;
                  while (a3 = a3[l3])
                    if (x3 ? a3.nodeName.toLowerCase() === f3 : a3.nodeType === 1)
                      return false;
                  u3 = l3 = h3 === "only" && !u3 && "nextSibling";
                }
                return true;
              }
              if (u3 = [m3 ? c3.firstChild : c3.lastChild], m3 && p3) {
                d3 = (s3 = (r3 = (i3 = (o3 = (a3 = c3)[S2] || (a3[S2] = {}))[a3.uniqueID] || (o3[a3.uniqueID] = {}))[h3] || [])[0] === k2 && r3[1]) && r3[2], a3 = s3 && c3.childNodes[s3];
                while (a3 = ++s3 && a3 && a3[l3] || (d3 = s3 = 0) || u3.pop())
                  if (a3.nodeType === 1 && ++d3 && a3 === e4) {
                    i3[h3] = [k2, s3, d3];
                    break;
                  }
              } else if (p3 && (d3 = s3 = (r3 = (i3 = (o3 = (a3 = e4)[S2] || (a3[S2] = {}))[a3.uniqueID] || (o3[a3.uniqueID] = {}))[h3] || [])[0] === k2 && r3[1]), d3 === false) {
                while (a3 = ++s3 && a3 && a3[l3] || (d3 = s3 = 0) || u3.pop())
                  if ((x3 ? a3.nodeName.toLowerCase() === f3 : a3.nodeType === 1) && ++d3 && (p3 && ((i3 = (o3 = a3[S2] || (a3[S2] = {}))[a3.uniqueID] || (o3[a3.uniqueID] = {}))[h3] = [k2, d3]), a3 === e4))
                    break;
              }
              return (d3 -= v3) === g3 || d3 % g3 == 0 && 0 <= d3 / g3;
            }
          };
        }, PSEUDO: function(e3, o3) {
          var t3, a3 = b2.pseudos[e3] || b2.setFilters[e3.toLowerCase()] || se2.error("unsupported pseudo: " + e3);
          return a3[S2] ? a3(o3) : 1 < a3.length ? (t3 = [e3, e3, "", o3], b2.setFilters.hasOwnProperty(e3.toLowerCase()) ? le2(function(e4, t4) {
            var n3, r3 = a3(e4, o3), i3 = r3.length;
            while (i3--)
              e4[n3 = P2(e4, r3[i3])] = !(t4[n3] = r3[i3]);
          }) : function(e4) {
            return a3(e4, 0, t3);
          }) : a3;
        }}, pseudos: {not: le2(function(e3) {
          var r3 = [], i3 = [], s3 = f2(e3.replace($3, "$1"));
          return s3[S2] ? le2(function(e4, t3, n3, r4) {
            var i4, o3 = s3(e4, null, r4, []), a3 = e4.length;
            while (a3--)
              (i4 = o3[a3]) && (e4[a3] = !(t3[a3] = i4));
          }) : function(e4, t3, n3) {
            return r3[0] = e4, s3(r3, null, n3, i3), r3[0] = null, !i3.pop();
          };
        }), has: le2(function(t3) {
          return function(e3) {
            return 0 < se2(t3, e3).length;
          };
        }), contains: le2(function(t3) {
          return t3 = t3.replace(te2, ne2), function(e3) {
            return -1 < (e3.textContent || o2(e3)).indexOf(t3);
          };
        }), lang: le2(function(n3) {
          return V2.test(n3 || "") || se2.error("unsupported lang: " + n3), n3 = n3.replace(te2, ne2).toLowerCase(), function(e3) {
            var t3;
            do {
              if (t3 = E2 ? e3.lang : e3.getAttribute("xml:lang") || e3.getAttribute("lang"))
                return (t3 = t3.toLowerCase()) === n3 || t3.indexOf(n3 + "-") === 0;
            } while ((e3 = e3.parentNode) && e3.nodeType === 1);
            return false;
          };
        }), target: function(e3) {
          var t3 = n2.location && n2.location.hash;
          return t3 && t3.slice(1) === e3.id;
        }, root: function(e3) {
          return e3 === a2;
        }, focus: function(e3) {
          return e3 === C2.activeElement && (!C2.hasFocus || C2.hasFocus()) && !!(e3.type || e3.href || ~e3.tabIndex);
        }, enabled: ge2(false), disabled: ge2(true), checked: function(e3) {
          var t3 = e3.nodeName.toLowerCase();
          return t3 === "input" && !!e3.checked || t3 === "option" && !!e3.selected;
        }, selected: function(e3) {
          return e3.parentNode && e3.parentNode.selectedIndex, e3.selected === true;
        }, empty: function(e3) {
          for (e3 = e3.firstChild; e3; e3 = e3.nextSibling)
            if (e3.nodeType < 6)
              return false;
          return true;
        }, parent: function(e3) {
          return !b2.pseudos.empty(e3);
        }, header: function(e3) {
          return J2.test(e3.nodeName);
        }, input: function(e3) {
          return Q2.test(e3.nodeName);
        }, button: function(e3) {
          var t3 = e3.nodeName.toLowerCase();
          return t3 === "input" && e3.type === "button" || t3 === "button";
        }, text: function(e3) {
          var t3;
          return e3.nodeName.toLowerCase() === "input" && e3.type === "text" && ((t3 = e3.getAttribute("type")) == null || t3.toLowerCase() === "text");
        }, first: ve2(function() {
          return [0];
        }), last: ve2(function(e3, t3) {
          return [t3 - 1];
        }), eq: ve2(function(e3, t3, n3) {
          return [n3 < 0 ? n3 + t3 : n3];
        }), even: ve2(function(e3, t3) {
          for (var n3 = 0; n3 < t3; n3 += 2)
            e3.push(n3);
          return e3;
        }), odd: ve2(function(e3, t3) {
          for (var n3 = 1; n3 < t3; n3 += 2)
            e3.push(n3);
          return e3;
        }), lt: ve2(function(e3, t3, n3) {
          for (var r3 = n3 < 0 ? n3 + t3 : t3 < n3 ? t3 : n3; 0 <= --r3; )
            e3.push(r3);
          return e3;
        }), gt: ve2(function(e3, t3, n3) {
          for (var r3 = n3 < 0 ? n3 + t3 : n3; ++r3 < t3; )
            e3.push(r3);
          return e3;
        })}}).pseudos.nth = b2.pseudos.eq, {radio: true, checkbox: true, file: true, password: true, image: true})
          b2.pseudos[e2] = de2(e2);
        for (e2 in {submit: true, reset: true})
          b2.pseudos[e2] = he2(e2);
        function me2() {
        }
        function xe2(e3) {
          for (var t3 = 0, n3 = e3.length, r3 = ""; t3 < n3; t3++)
            r3 += e3[t3].value;
          return r3;
        }
        function be2(s3, e3, t3) {
          var u3 = e3.dir, l3 = e3.next, c3 = l3 || u3, f3 = t3 && c3 === "parentNode", p3 = r2++;
          return e3.first ? function(e4, t4, n3) {
            while (e4 = e4[u3])
              if (e4.nodeType === 1 || f3)
                return s3(e4, t4, n3);
            return false;
          } : function(e4, t4, n3) {
            var r3, i3, o3, a3 = [k2, p3];
            if (n3) {
              while (e4 = e4[u3])
                if ((e4.nodeType === 1 || f3) && s3(e4, t4, n3))
                  return true;
            } else
              while (e4 = e4[u3])
                if (e4.nodeType === 1 || f3)
                  if (i3 = (o3 = e4[S2] || (e4[S2] = {}))[e4.uniqueID] || (o3[e4.uniqueID] = {}), l3 && l3 === e4.nodeName.toLowerCase())
                    e4 = e4[u3] || e4;
                  else {
                    if ((r3 = i3[c3]) && r3[0] === k2 && r3[1] === p3)
                      return a3[2] = r3[2];
                    if ((i3[c3] = a3)[2] = s3(e4, t4, n3))
                      return true;
                  }
            return false;
          };
        }
        function we2(i3) {
          return 1 < i3.length ? function(e3, t3, n3) {
            var r3 = i3.length;
            while (r3--)
              if (!i3[r3](e3, t3, n3))
                return false;
            return true;
          } : i3[0];
        }
        function Te2(e3, t3, n3, r3, i3) {
          for (var o3, a3 = [], s3 = 0, u3 = e3.length, l3 = t3 != null; s3 < u3; s3++)
            (o3 = e3[s3]) && (n3 && !n3(o3, r3, i3) || (a3.push(o3), l3 && t3.push(s3)));
          return a3;
        }
        function Ce2(d3, h3, g3, v3, y3, e3) {
          return v3 && !v3[S2] && (v3 = Ce2(v3)), y3 && !y3[S2] && (y3 = Ce2(y3, e3)), le2(function(e4, t3, n3, r3) {
            var i3, o3, a3, s3 = [], u3 = [], l3 = t3.length, c3 = e4 || function(e5, t4, n4) {
              for (var r4 = 0, i4 = t4.length; r4 < i4; r4++)
                se2(e5, t4[r4], n4);
              return n4;
            }(h3 || "*", n3.nodeType ? [n3] : n3, []), f3 = !d3 || !e4 && h3 ? c3 : Te2(c3, s3, d3, n3, r3), p3 = g3 ? y3 || (e4 ? d3 : l3 || v3) ? [] : t3 : f3;
            if (g3 && g3(f3, p3, n3, r3), v3) {
              i3 = Te2(p3, u3), v3(i3, [], n3, r3), o3 = i3.length;
              while (o3--)
                (a3 = i3[o3]) && (p3[u3[o3]] = !(f3[u3[o3]] = a3));
            }
            if (e4) {
              if (y3 || d3) {
                if (y3) {
                  i3 = [], o3 = p3.length;
                  while (o3--)
                    (a3 = p3[o3]) && i3.push(f3[o3] = a3);
                  y3(null, p3 = [], i3, r3);
                }
                o3 = p3.length;
                while (o3--)
                  (a3 = p3[o3]) && -1 < (i3 = y3 ? P2(e4, a3) : s3[o3]) && (e4[i3] = !(t3[i3] = a3));
              }
            } else
              p3 = Te2(p3 === t3 ? p3.splice(l3, p3.length) : p3), y3 ? y3(null, t3, p3, r3) : H2.apply(t3, p3);
          });
        }
        function Ee2(e3) {
          for (var i3, t3, n3, r3 = e3.length, o3 = b2.relative[e3[0].type], a3 = o3 || b2.relative[" "], s3 = o3 ? 1 : 0, u3 = be2(function(e4) {
            return e4 === i3;
          }, a3, true), l3 = be2(function(e4) {
            return -1 < P2(i3, e4);
          }, a3, true), c3 = [function(e4, t4, n4) {
            var r4 = !o3 && (n4 || t4 !== w2) || ((i3 = t4).nodeType ? u3(e4, t4, n4) : l3(e4, t4, n4));
            return i3 = null, r4;
          }]; s3 < r3; s3++)
            if (t3 = b2.relative[e3[s3].type])
              c3 = [be2(we2(c3), t3)];
            else {
              if ((t3 = b2.filter[e3[s3].type].apply(null, e3[s3].matches))[S2]) {
                for (n3 = ++s3; n3 < r3; n3++)
                  if (b2.relative[e3[n3].type])
                    break;
                return Ce2(1 < s3 && we2(c3), 1 < s3 && xe2(e3.slice(0, s3 - 1).concat({value: e3[s3 - 2].type === " " ? "*" : ""})).replace($3, "$1"), t3, s3 < n3 && Ee2(e3.slice(s3, n3)), n3 < r3 && Ee2(e3 = e3.slice(n3)), n3 < r3 && xe2(e3));
              }
              c3.push(t3);
            }
          return we2(c3);
        }
        return me2.prototype = b2.filters = b2.pseudos, b2.setFilters = new me2(), h2 = se2.tokenize = function(e3, t3) {
          var n3, r3, i3, o3, a3, s3, u3, l3 = x2[e3 + " "];
          if (l3)
            return t3 ? 0 : l3.slice(0);
          a3 = e3, s3 = [], u3 = b2.preFilter;
          while (a3) {
            for (o3 in n3 && !(r3 = _2.exec(a3)) || (r3 && (a3 = a3.slice(r3[0].length) || a3), s3.push(i3 = [])), n3 = false, (r3 = z2.exec(a3)) && (n3 = r3.shift(), i3.push({value: n3, type: r3[0].replace($3, " ")}), a3 = a3.slice(n3.length)), b2.filter)
              !(r3 = G2[o3].exec(a3)) || u3[o3] && !(r3 = u3[o3](r3)) || (n3 = r3.shift(), i3.push({value: n3, type: o3, matches: r3}), a3 = a3.slice(n3.length));
            if (!n3)
              break;
          }
          return t3 ? a3.length : a3 ? se2.error(e3) : x2(e3, s3).slice(0);
        }, f2 = se2.compile = function(e3, t3) {
          var n3, v3, y3, m3, x3, r3, i3 = [], o3 = [], a3 = A2[e3 + " "];
          if (!a3) {
            t3 || (t3 = h2(e3)), n3 = t3.length;
            while (n3--)
              (a3 = Ee2(t3[n3]))[S2] ? i3.push(a3) : o3.push(a3);
            (a3 = A2(e3, (v3 = o3, m3 = 0 < (y3 = i3).length, x3 = 0 < v3.length, r3 = function(e4, t4, n4, r4, i4) {
              var o4, a4, s3, u3 = 0, l3 = "0", c3 = e4 && [], f3 = [], p3 = w2, d3 = e4 || x3 && b2.find.TAG("*", i4), h3 = k2 += p3 == null ? 1 : Math.random() || 0.1, g3 = d3.length;
              for (i4 && (w2 = t4 == C2 || t4 || i4); l3 !== g3 && (o4 = d3[l3]) != null; l3++) {
                if (x3 && o4) {
                  a4 = 0, t4 || o4.ownerDocument == C2 || (T2(o4), n4 = !E2);
                  while (s3 = v3[a4++])
                    if (s3(o4, t4 || C2, n4)) {
                      r4.push(o4);
                      break;
                    }
                  i4 && (k2 = h3);
                }
                m3 && ((o4 = !s3 && o4) && u3--, e4 && c3.push(o4));
              }
              if (u3 += l3, m3 && l3 !== u3) {
                a4 = 0;
                while (s3 = y3[a4++])
                  s3(c3, f3, t4, n4);
                if (e4) {
                  if (0 < u3)
                    while (l3--)
                      c3[l3] || f3[l3] || (f3[l3] = q2.call(r4));
                  f3 = Te2(f3);
                }
                H2.apply(r4, f3), i4 && !e4 && 0 < f3.length && 1 < u3 + y3.length && se2.uniqueSort(r4);
              }
              return i4 && (k2 = h3, w2 = p3), c3;
            }, m3 ? le2(r3) : r3))).selector = e3;
          }
          return a3;
        }, g2 = se2.select = function(e3, t3, n3, r3) {
          var i3, o3, a3, s3, u3, l3 = typeof e3 == "function" && e3, c3 = !r3 && h2(e3 = l3.selector || e3);
          if (n3 = n3 || [], c3.length === 1) {
            if (2 < (o3 = c3[0] = c3[0].slice(0)).length && (a3 = o3[0]).type === "ID" && t3.nodeType === 9 && E2 && b2.relative[o3[1].type]) {
              if (!(t3 = (b2.find.ID(a3.matches[0].replace(te2, ne2), t3) || [])[0]))
                return n3;
              l3 && (t3 = t3.parentNode), e3 = e3.slice(o3.shift().value.length);
            }
            i3 = G2.needsContext.test(e3) ? 0 : o3.length;
            while (i3--) {
              if (a3 = o3[i3], b2.relative[s3 = a3.type])
                break;
              if ((u3 = b2.find[s3]) && (r3 = u3(a3.matches[0].replace(te2, ne2), ee2.test(o3[0].type) && ye2(t3.parentNode) || t3))) {
                if (o3.splice(i3, 1), !(e3 = r3.length && xe2(o3)))
                  return H2.apply(n3, r3), n3;
                break;
              }
            }
          }
          return (l3 || f2(e3, c3))(r3, t3, !E2, n3, !t3 || ee2.test(e3) && ye2(t3.parentNode) || t3), n3;
        }, d2.sortStable = S2.split("").sort(j2).join("") === S2, d2.detectDuplicates = !!l2, T2(), d2.sortDetached = ce2(function(e3) {
          return 1 & e3.compareDocumentPosition(C2.createElement("fieldset"));
        }), ce2(function(e3) {
          return e3.innerHTML = "<a href='#'></a>", e3.firstChild.getAttribute("href") === "#";
        }) || fe2("type|href|height|width", function(e3, t3, n3) {
          if (!n3)
            return e3.getAttribute(t3, t3.toLowerCase() === "type" ? 1 : 2);
        }), d2.attributes && ce2(function(e3) {
          return e3.innerHTML = "<input/>", e3.firstChild.setAttribute("value", ""), e3.firstChild.getAttribute("value") === "";
        }) || fe2("value", function(e3, t3, n3) {
          if (!n3 && e3.nodeName.toLowerCase() === "input")
            return e3.defaultValue;
        }), ce2(function(e3) {
          return e3.getAttribute("disabled") == null;
        }) || fe2(R2, function(e3, t3, n3) {
          var r3;
          if (!n3)
            return e3[t3] === true ? t3.toLowerCase() : (r3 = e3.getAttributeNode(t3)) && r3.specified ? r3.value : null;
        }), se2;
      }(C);
      S.find = d, S.expr = d.selectors, S.expr[":"] = S.expr.pseudos, S.uniqueSort = S.unique = d.uniqueSort, S.text = d.getText, S.isXMLDoc = d.isXML, S.contains = d.contains, S.escapeSelector = d.escape;
      var h = function(e2, t2, n2) {
        var r2 = [], i2 = n2 !== void 0;
        while ((e2 = e2[t2]) && e2.nodeType !== 9)
          if (e2.nodeType === 1) {
            if (i2 && S(e2).is(n2))
              break;
            r2.push(e2);
          }
        return r2;
      }, T = function(e2, t2) {
        for (var n2 = []; e2; e2 = e2.nextSibling)
          e2.nodeType === 1 && e2 !== t2 && n2.push(e2);
        return n2;
      }, k = S.expr.match.needsContext;
      function A(e2, t2) {
        return e2.nodeName && e2.nodeName.toLowerCase() === t2.toLowerCase();
      }
      var N = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      function j(e2, n2, r2) {
        return m(n2) ? S.grep(e2, function(e3, t2) {
          return !!n2.call(e3, t2, e3) !== r2;
        }) : n2.nodeType ? S.grep(e2, function(e3) {
          return e3 === n2 !== r2;
        }) : typeof n2 != "string" ? S.grep(e2, function(e3) {
          return -1 < i.call(n2, e3) !== r2;
        }) : S.filter(n2, e2, r2);
      }
      S.filter = function(e2, t2, n2) {
        var r2 = t2[0];
        return n2 && (e2 = ":not(" + e2 + ")"), t2.length === 1 && r2.nodeType === 1 ? S.find.matchesSelector(r2, e2) ? [r2] : [] : S.find.matches(e2, S.grep(t2, function(e3) {
          return e3.nodeType === 1;
        }));
      }, S.fn.extend({find: function(e2) {
        var t2, n2, r2 = this.length, i2 = this;
        if (typeof e2 != "string")
          return this.pushStack(S(e2).filter(function() {
            for (t2 = 0; t2 < r2; t2++)
              if (S.contains(i2[t2], this))
                return true;
          }));
        for (n2 = this.pushStack([]), t2 = 0; t2 < r2; t2++)
          S.find(e2, i2[t2], n2);
        return 1 < r2 ? S.uniqueSort(n2) : n2;
      }, filter: function(e2) {
        return this.pushStack(j(this, e2 || [], false));
      }, not: function(e2) {
        return this.pushStack(j(this, e2 || [], true));
      }, is: function(e2) {
        return !!j(this, typeof e2 == "string" && k.test(e2) ? S(e2) : e2 || [], false).length;
      }});
      var D, q = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
      (S.fn.init = function(e2, t2, n2) {
        var r2, i2;
        if (!e2)
          return this;
        if (n2 = n2 || D, typeof e2 == "string") {
          if (!(r2 = e2[0] === "<" && e2[e2.length - 1] === ">" && 3 <= e2.length ? [null, e2, null] : q.exec(e2)) || !r2[1] && t2)
            return !t2 || t2.jquery ? (t2 || n2).find(e2) : this.constructor(t2).find(e2);
          if (r2[1]) {
            if (t2 = t2 instanceof S ? t2[0] : t2, S.merge(this, S.parseHTML(r2[1], t2 && t2.nodeType ? t2.ownerDocument || t2 : E, true)), N.test(r2[1]) && S.isPlainObject(t2))
              for (r2 in t2)
                m(this[r2]) ? this[r2](t2[r2]) : this.attr(r2, t2[r2]);
            return this;
          }
          return (i2 = E.getElementById(r2[2])) && (this[0] = i2, this.length = 1), this;
        }
        return e2.nodeType ? (this[0] = e2, this.length = 1, this) : m(e2) ? n2.ready !== void 0 ? n2.ready(e2) : e2(S) : S.makeArray(e2, this);
      }).prototype = S.fn, D = S(E);
      var L = /^(?:parents|prev(?:Until|All))/, H = {children: true, contents: true, next: true, prev: true};
      function O(e2, t2) {
        while ((e2 = e2[t2]) && e2.nodeType !== 1)
          ;
        return e2;
      }
      S.fn.extend({has: function(e2) {
        var t2 = S(e2, this), n2 = t2.length;
        return this.filter(function() {
          for (var e3 = 0; e3 < n2; e3++)
            if (S.contains(this, t2[e3]))
              return true;
        });
      }, closest: function(e2, t2) {
        var n2, r2 = 0, i2 = this.length, o2 = [], a2 = typeof e2 != "string" && S(e2);
        if (!k.test(e2)) {
          for (; r2 < i2; r2++)
            for (n2 = this[r2]; n2 && n2 !== t2; n2 = n2.parentNode)
              if (n2.nodeType < 11 && (a2 ? -1 < a2.index(n2) : n2.nodeType === 1 && S.find.matchesSelector(n2, e2))) {
                o2.push(n2);
                break;
              }
        }
        return this.pushStack(1 < o2.length ? S.uniqueSort(o2) : o2);
      }, index: function(e2) {
        return e2 ? typeof e2 == "string" ? i.call(S(e2), this[0]) : i.call(this, e2.jquery ? e2[0] : e2) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }, add: function(e2, t2) {
        return this.pushStack(S.uniqueSort(S.merge(this.get(), S(e2, t2))));
      }, addBack: function(e2) {
        return this.add(e2 == null ? this.prevObject : this.prevObject.filter(e2));
      }}), S.each({parent: function(e2) {
        var t2 = e2.parentNode;
        return t2 && t2.nodeType !== 11 ? t2 : null;
      }, parents: function(e2) {
        return h(e2, "parentNode");
      }, parentsUntil: function(e2, t2, n2) {
        return h(e2, "parentNode", n2);
      }, next: function(e2) {
        return O(e2, "nextSibling");
      }, prev: function(e2) {
        return O(e2, "previousSibling");
      }, nextAll: function(e2) {
        return h(e2, "nextSibling");
      }, prevAll: function(e2) {
        return h(e2, "previousSibling");
      }, nextUntil: function(e2, t2, n2) {
        return h(e2, "nextSibling", n2);
      }, prevUntil: function(e2, t2, n2) {
        return h(e2, "previousSibling", n2);
      }, siblings: function(e2) {
        return T((e2.parentNode || {}).firstChild, e2);
      }, children: function(e2) {
        return T(e2.firstChild);
      }, contents: function(e2) {
        return e2.contentDocument != null && r(e2.contentDocument) ? e2.contentDocument : (A(e2, "template") && (e2 = e2.content || e2), S.merge([], e2.childNodes));
      }}, function(r2, i2) {
        S.fn[r2] = function(e2, t2) {
          var n2 = S.map(this, i2, e2);
          return r2.slice(-5) !== "Until" && (t2 = e2), t2 && typeof t2 == "string" && (n2 = S.filter(t2, n2)), 1 < this.length && (H[r2] || S.uniqueSort(n2), L.test(r2) && n2.reverse()), this.pushStack(n2);
        };
      });
      var P = /[^\x20\t\r\n\f]+/g;
      function R(e2) {
        return e2;
      }
      function M(e2) {
        throw e2;
      }
      function I(e2, t2, n2, r2) {
        var i2;
        try {
          e2 && m(i2 = e2.promise) ? i2.call(e2).done(t2).fail(n2) : e2 && m(i2 = e2.then) ? i2.call(e2, t2, n2) : t2.apply(void 0, [e2].slice(r2));
        } catch (e3) {
          n2.apply(void 0, [e3]);
        }
      }
      S.Callbacks = function(r2) {
        var e2, n2;
        r2 = typeof r2 == "string" ? (e2 = r2, n2 = {}, S.each(e2.match(P) || [], function(e3, t3) {
          n2[t3] = true;
        }), n2) : S.extend({}, r2);
        var i2, t2, o2, a2, s2 = [], u2 = [], l2 = -1, c2 = function() {
          for (a2 = a2 || r2.once, o2 = i2 = true; u2.length; l2 = -1) {
            t2 = u2.shift();
            while (++l2 < s2.length)
              s2[l2].apply(t2[0], t2[1]) === false && r2.stopOnFalse && (l2 = s2.length, t2 = false);
          }
          r2.memory || (t2 = false), i2 = false, a2 && (s2 = t2 ? [] : "");
        }, f2 = {add: function() {
          return s2 && (t2 && !i2 && (l2 = s2.length - 1, u2.push(t2)), function n3(e3) {
            S.each(e3, function(e4, t3) {
              m(t3) ? r2.unique && f2.has(t3) || s2.push(t3) : t3 && t3.length && w(t3) !== "string" && n3(t3);
            });
          }(arguments), t2 && !i2 && c2()), this;
        }, remove: function() {
          return S.each(arguments, function(e3, t3) {
            var n3;
            while (-1 < (n3 = S.inArray(t3, s2, n3)))
              s2.splice(n3, 1), n3 <= l2 && l2--;
          }), this;
        }, has: function(e3) {
          return e3 ? -1 < S.inArray(e3, s2) : 0 < s2.length;
        }, empty: function() {
          return s2 && (s2 = []), this;
        }, disable: function() {
          return a2 = u2 = [], s2 = t2 = "", this;
        }, disabled: function() {
          return !s2;
        }, lock: function() {
          return a2 = u2 = [], t2 || i2 || (s2 = t2 = ""), this;
        }, locked: function() {
          return !!a2;
        }, fireWith: function(e3, t3) {
          return a2 || (t3 = [e3, (t3 = t3 || []).slice ? t3.slice() : t3], u2.push(t3), i2 || c2()), this;
        }, fire: function() {
          return f2.fireWith(this, arguments), this;
        }, fired: function() {
          return !!o2;
        }};
        return f2;
      }, S.extend({Deferred: function(e2) {
        var o2 = [["notify", "progress", S.Callbacks("memory"), S.Callbacks("memory"), 2], ["resolve", "done", S.Callbacks("once memory"), S.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", S.Callbacks("once memory"), S.Callbacks("once memory"), 1, "rejected"]], i2 = "pending", a2 = {state: function() {
          return i2;
        }, always: function() {
          return s2.done(arguments).fail(arguments), this;
        }, catch: function(e3) {
          return a2.then(null, e3);
        }, pipe: function() {
          var i3 = arguments;
          return S.Deferred(function(r2) {
            S.each(o2, function(e3, t2) {
              var n2 = m(i3[t2[4]]) && i3[t2[4]];
              s2[t2[1]](function() {
                var e4 = n2 && n2.apply(this, arguments);
                e4 && m(e4.promise) ? e4.promise().progress(r2.notify).done(r2.resolve).fail(r2.reject) : r2[t2[0] + "With"](this, n2 ? [e4] : arguments);
              });
            }), i3 = null;
          }).promise();
        }, then: function(t2, n2, r2) {
          var u2 = 0;
          function l2(i3, o3, a3, s3) {
            return function() {
              var n3 = this, r3 = arguments, e3 = function() {
                var e4, t4;
                if (!(i3 < u2)) {
                  if ((e4 = a3.apply(n3, r3)) === o3.promise())
                    throw new TypeError("Thenable self-resolution");
                  t4 = e4 && (typeof e4 == "object" || typeof e4 == "function") && e4.then, m(t4) ? s3 ? t4.call(e4, l2(u2, o3, R, s3), l2(u2, o3, M, s3)) : (u2++, t4.call(e4, l2(u2, o3, R, s3), l2(u2, o3, M, s3), l2(u2, o3, R, o3.notifyWith))) : (a3 !== R && (n3 = void 0, r3 = [e4]), (s3 || o3.resolveWith)(n3, r3));
                }
              }, t3 = s3 ? e3 : function() {
                try {
                  e3();
                } catch (e4) {
                  S.Deferred.exceptionHook && S.Deferred.exceptionHook(e4, t3.stackTrace), u2 <= i3 + 1 && (a3 !== M && (n3 = void 0, r3 = [e4]), o3.rejectWith(n3, r3));
                }
              };
              i3 ? t3() : (S.Deferred.getStackHook && (t3.stackTrace = S.Deferred.getStackHook()), C.setTimeout(t3));
            };
          }
          return S.Deferred(function(e3) {
            o2[0][3].add(l2(0, e3, m(r2) ? r2 : R, e3.notifyWith)), o2[1][3].add(l2(0, e3, m(t2) ? t2 : R)), o2[2][3].add(l2(0, e3, m(n2) ? n2 : M));
          }).promise();
        }, promise: function(e3) {
          return e3 != null ? S.extend(e3, a2) : a2;
        }}, s2 = {};
        return S.each(o2, function(e3, t2) {
          var n2 = t2[2], r2 = t2[5];
          a2[t2[1]] = n2.add, r2 && n2.add(function() {
            i2 = r2;
          }, o2[3 - e3][2].disable, o2[3 - e3][3].disable, o2[0][2].lock, o2[0][3].lock), n2.add(t2[3].fire), s2[t2[0]] = function() {
            return s2[t2[0] + "With"](this === s2 ? void 0 : this, arguments), this;
          }, s2[t2[0] + "With"] = n2.fireWith;
        }), a2.promise(s2), e2 && e2.call(s2, s2), s2;
      }, when: function(e2) {
        var n2 = arguments.length, t2 = n2, r2 = Array(t2), i2 = s.call(arguments), o2 = S.Deferred(), a2 = function(t3) {
          return function(e3) {
            r2[t3] = this, i2[t3] = 1 < arguments.length ? s.call(arguments) : e3, --n2 || o2.resolveWith(r2, i2);
          };
        };
        if (n2 <= 1 && (I(e2, o2.done(a2(t2)).resolve, o2.reject, !n2), o2.state() === "pending" || m(i2[t2] && i2[t2].then)))
          return o2.then();
        while (t2--)
          I(i2[t2], a2(t2), o2.reject);
        return o2.promise();
      }});
      var W = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      S.Deferred.exceptionHook = function(e2, t2) {
        C.console && C.console.warn && e2 && W.test(e2.name) && C.console.warn("jQuery.Deferred exception: " + e2.message, e2.stack, t2);
      }, S.readyException = function(e2) {
        C.setTimeout(function() {
          throw e2;
        });
      };
      var F = S.Deferred();
      function B() {
        E.removeEventListener("DOMContentLoaded", B), C.removeEventListener("load", B), S.ready();
      }
      S.fn.ready = function(e2) {
        return F.then(e2)["catch"](function(e3) {
          S.readyException(e3);
        }), this;
      }, S.extend({isReady: false, readyWait: 1, ready: function(e2) {
        (e2 === true ? --S.readyWait : S.isReady) || (S.isReady = true) !== e2 && 0 < --S.readyWait || F.resolveWith(E, [S]);
      }}), S.ready.then = F.then, E.readyState === "complete" || E.readyState !== "loading" && !E.documentElement.doScroll ? C.setTimeout(S.ready) : (E.addEventListener("DOMContentLoaded", B), C.addEventListener("load", B));
      var $2 = function(e2, t2, n2, r2, i2, o2, a2) {
        var s2 = 0, u2 = e2.length, l2 = n2 == null;
        if (w(n2) === "object")
          for (s2 in i2 = true, n2)
            $2(e2, t2, s2, n2[s2], true, o2, a2);
        else if (r2 !== void 0 && (i2 = true, m(r2) || (a2 = true), l2 && (a2 ? (t2.call(e2, r2), t2 = null) : (l2 = t2, t2 = function(e3, t3, n3) {
          return l2.call(S(e3), n3);
        })), t2))
          for (; s2 < u2; s2++)
            t2(e2[s2], n2, a2 ? r2 : r2.call(e2[s2], s2, t2(e2[s2], n2)));
        return i2 ? e2 : l2 ? t2.call(e2) : u2 ? t2(e2[0], n2) : o2;
      }, _ = /^-ms-/, z = /-([a-z])/g;
      function U(e2, t2) {
        return t2.toUpperCase();
      }
      function X(e2) {
        return e2.replace(_, "ms-").replace(z, U);
      }
      var V = function(e2) {
        return e2.nodeType === 1 || e2.nodeType === 9 || !+e2.nodeType;
      };
      function G() {
        this.expando = S.expando + G.uid++;
      }
      G.uid = 1, G.prototype = {cache: function(e2) {
        var t2 = e2[this.expando];
        return t2 || (t2 = {}, V(e2) && (e2.nodeType ? e2[this.expando] = t2 : Object.defineProperty(e2, this.expando, {value: t2, configurable: true}))), t2;
      }, set: function(e2, t2, n2) {
        var r2, i2 = this.cache(e2);
        if (typeof t2 == "string")
          i2[X(t2)] = n2;
        else
          for (r2 in t2)
            i2[X(r2)] = t2[r2];
        return i2;
      }, get: function(e2, t2) {
        return t2 === void 0 ? this.cache(e2) : e2[this.expando] && e2[this.expando][X(t2)];
      }, access: function(e2, t2, n2) {
        return t2 === void 0 || t2 && typeof t2 == "string" && n2 === void 0 ? this.get(e2, t2) : (this.set(e2, t2, n2), n2 !== void 0 ? n2 : t2);
      }, remove: function(e2, t2) {
        var n2, r2 = e2[this.expando];
        if (r2 !== void 0) {
          if (t2 !== void 0) {
            n2 = (t2 = Array.isArray(t2) ? t2.map(X) : (t2 = X(t2)) in r2 ? [t2] : t2.match(P) || []).length;
            while (n2--)
              delete r2[t2[n2]];
          }
          (t2 === void 0 || S.isEmptyObject(r2)) && (e2.nodeType ? e2[this.expando] = void 0 : delete e2[this.expando]);
        }
      }, hasData: function(e2) {
        var t2 = e2[this.expando];
        return t2 !== void 0 && !S.isEmptyObject(t2);
      }};
      var Y = new G(), Q = new G(), J = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, K = /[A-Z]/g;
      function Z(e2, t2, n2) {
        var r2, i2;
        if (n2 === void 0 && e2.nodeType === 1)
          if (r2 = "data-" + t2.replace(K, "-$&").toLowerCase(), typeof (n2 = e2.getAttribute(r2)) == "string") {
            try {
              n2 = (i2 = n2) === "true" || i2 !== "false" && (i2 === "null" ? null : i2 === +i2 + "" ? +i2 : J.test(i2) ? JSON.parse(i2) : i2);
            } catch (e3) {
            }
            Q.set(e2, t2, n2);
          } else
            n2 = void 0;
        return n2;
      }
      S.extend({hasData: function(e2) {
        return Q.hasData(e2) || Y.hasData(e2);
      }, data: function(e2, t2, n2) {
        return Q.access(e2, t2, n2);
      }, removeData: function(e2, t2) {
        Q.remove(e2, t2);
      }, _data: function(e2, t2, n2) {
        return Y.access(e2, t2, n2);
      }, _removeData: function(e2, t2) {
        Y.remove(e2, t2);
      }}), S.fn.extend({data: function(n2, e2) {
        var t2, r2, i2, o2 = this[0], a2 = o2 && o2.attributes;
        if (n2 === void 0) {
          if (this.length && (i2 = Q.get(o2), o2.nodeType === 1 && !Y.get(o2, "hasDataAttrs"))) {
            t2 = a2.length;
            while (t2--)
              a2[t2] && (r2 = a2[t2].name).indexOf("data-") === 0 && (r2 = X(r2.slice(5)), Z(o2, r2, i2[r2]));
            Y.set(o2, "hasDataAttrs", true);
          }
          return i2;
        }
        return typeof n2 == "object" ? this.each(function() {
          Q.set(this, n2);
        }) : $2(this, function(e3) {
          var t3;
          if (o2 && e3 === void 0)
            return (t3 = Q.get(o2, n2)) !== void 0 ? t3 : (t3 = Z(o2, n2)) !== void 0 ? t3 : void 0;
          this.each(function() {
            Q.set(this, n2, e3);
          });
        }, null, e2, 1 < arguments.length, null, true);
      }, removeData: function(e2) {
        return this.each(function() {
          Q.remove(this, e2);
        });
      }}), S.extend({queue: function(e2, t2, n2) {
        var r2;
        if (e2)
          return t2 = (t2 || "fx") + "queue", r2 = Y.get(e2, t2), n2 && (!r2 || Array.isArray(n2) ? r2 = Y.access(e2, t2, S.makeArray(n2)) : r2.push(n2)), r2 || [];
      }, dequeue: function(e2, t2) {
        t2 = t2 || "fx";
        var n2 = S.queue(e2, t2), r2 = n2.length, i2 = n2.shift(), o2 = S._queueHooks(e2, t2);
        i2 === "inprogress" && (i2 = n2.shift(), r2--), i2 && (t2 === "fx" && n2.unshift("inprogress"), delete o2.stop, i2.call(e2, function() {
          S.dequeue(e2, t2);
        }, o2)), !r2 && o2 && o2.empty.fire();
      }, _queueHooks: function(e2, t2) {
        var n2 = t2 + "queueHooks";
        return Y.get(e2, n2) || Y.access(e2, n2, {empty: S.Callbacks("once memory").add(function() {
          Y.remove(e2, [t2 + "queue", n2]);
        })});
      }}), S.fn.extend({queue: function(t2, n2) {
        var e2 = 2;
        return typeof t2 != "string" && (n2 = t2, t2 = "fx", e2--), arguments.length < e2 ? S.queue(this[0], t2) : n2 === void 0 ? this : this.each(function() {
          var e3 = S.queue(this, t2, n2);
          S._queueHooks(this, t2), t2 === "fx" && e3[0] !== "inprogress" && S.dequeue(this, t2);
        });
      }, dequeue: function(e2) {
        return this.each(function() {
          S.dequeue(this, e2);
        });
      }, clearQueue: function(e2) {
        return this.queue(e2 || "fx", []);
      }, promise: function(e2, t2) {
        var n2, r2 = 1, i2 = S.Deferred(), o2 = this, a2 = this.length, s2 = function() {
          --r2 || i2.resolveWith(o2, [o2]);
        };
        typeof e2 != "string" && (t2 = e2, e2 = void 0), e2 = e2 || "fx";
        while (a2--)
          (n2 = Y.get(o2[a2], e2 + "queueHooks")) && n2.empty && (r2++, n2.empty.add(s2));
        return s2(), i2.promise(t2);
      }});
      var ee = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, te = new RegExp("^(?:([+-])=|)(" + ee + ")([a-z%]*)$", "i"), ne = ["Top", "Right", "Bottom", "Left"], re = E.documentElement, ie = function(e2) {
        return S.contains(e2.ownerDocument, e2);
      }, oe = {composed: true};
      re.getRootNode && (ie = function(e2) {
        return S.contains(e2.ownerDocument, e2) || e2.getRootNode(oe) === e2.ownerDocument;
      });
      var ae = function(e2, t2) {
        return (e2 = t2 || e2).style.display === "none" || e2.style.display === "" && ie(e2) && S.css(e2, "display") === "none";
      };
      function se(e2, t2, n2, r2) {
        var i2, o2, a2 = 20, s2 = r2 ? function() {
          return r2.cur();
        } : function() {
          return S.css(e2, t2, "");
        }, u2 = s2(), l2 = n2 && n2[3] || (S.cssNumber[t2] ? "" : "px"), c2 = e2.nodeType && (S.cssNumber[t2] || l2 !== "px" && +u2) && te.exec(S.css(e2, t2));
        if (c2 && c2[3] !== l2) {
          u2 /= 2, l2 = l2 || c2[3], c2 = +u2 || 1;
          while (a2--)
            S.style(e2, t2, c2 + l2), (1 - o2) * (1 - (o2 = s2() / u2 || 0.5)) <= 0 && (a2 = 0), c2 /= o2;
          c2 *= 2, S.style(e2, t2, c2 + l2), n2 = n2 || [];
        }
        return n2 && (c2 = +c2 || +u2 || 0, i2 = n2[1] ? c2 + (n2[1] + 1) * n2[2] : +n2[2], r2 && (r2.unit = l2, r2.start = c2, r2.end = i2)), i2;
      }
      var ue = {};
      function le(e2, t2) {
        for (var n2, r2, i2, o2, a2, s2, u2, l2 = [], c2 = 0, f2 = e2.length; c2 < f2; c2++)
          (r2 = e2[c2]).style && (n2 = r2.style.display, t2 ? (n2 === "none" && (l2[c2] = Y.get(r2, "display") || null, l2[c2] || (r2.style.display = "")), r2.style.display === "" && ae(r2) && (l2[c2] = (u2 = a2 = o2 = void 0, a2 = (i2 = r2).ownerDocument, s2 = i2.nodeName, (u2 = ue[s2]) || (o2 = a2.body.appendChild(a2.createElement(s2)), u2 = S.css(o2, "display"), o2.parentNode.removeChild(o2), u2 === "none" && (u2 = "block"), ue[s2] = u2)))) : n2 !== "none" && (l2[c2] = "none", Y.set(r2, "display", n2)));
        for (c2 = 0; c2 < f2; c2++)
          l2[c2] != null && (e2[c2].style.display = l2[c2]);
        return e2;
      }
      S.fn.extend({show: function() {
        return le(this, true);
      }, hide: function() {
        return le(this);
      }, toggle: function(e2) {
        return typeof e2 == "boolean" ? e2 ? this.show() : this.hide() : this.each(function() {
          ae(this) ? S(this).show() : S(this).hide();
        });
      }});
      var ce, fe, pe = /^(?:checkbox|radio)$/i, de = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i, he = /^$|^module$|\/(?:java|ecma)script/i;
      ce = E.createDocumentFragment().appendChild(E.createElement("div")), (fe = E.createElement("input")).setAttribute("type", "radio"), fe.setAttribute("checked", "checked"), fe.setAttribute("name", "t"), ce.appendChild(fe), y.checkClone = ce.cloneNode(true).cloneNode(true).lastChild.checked, ce.innerHTML = "<textarea>x</textarea>", y.noCloneChecked = !!ce.cloneNode(true).lastChild.defaultValue, ce.innerHTML = "<option></option>", y.option = !!ce.lastChild;
      var ge = {thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""]};
      function ve(e2, t2) {
        var n2;
        return n2 = typeof e2.getElementsByTagName != "undefined" ? e2.getElementsByTagName(t2 || "*") : typeof e2.querySelectorAll != "undefined" ? e2.querySelectorAll(t2 || "*") : [], t2 === void 0 || t2 && A(e2, t2) ? S.merge([e2], n2) : n2;
      }
      function ye(e2, t2) {
        for (var n2 = 0, r2 = e2.length; n2 < r2; n2++)
          Y.set(e2[n2], "globalEval", !t2 || Y.get(t2[n2], "globalEval"));
      }
      ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td, y.option || (ge.optgroup = ge.option = [1, "<select multiple='multiple'>", "</select>"]);
      var me = /<|&#?\w+;/;
      function xe(e2, t2, n2, r2, i2) {
        for (var o2, a2, s2, u2, l2, c2, f2 = t2.createDocumentFragment(), p2 = [], d2 = 0, h2 = e2.length; d2 < h2; d2++)
          if ((o2 = e2[d2]) || o2 === 0)
            if (w(o2) === "object")
              S.merge(p2, o2.nodeType ? [o2] : o2);
            else if (me.test(o2)) {
              a2 = a2 || f2.appendChild(t2.createElement("div")), s2 = (de.exec(o2) || ["", ""])[1].toLowerCase(), u2 = ge[s2] || ge._default, a2.innerHTML = u2[1] + S.htmlPrefilter(o2) + u2[2], c2 = u2[0];
              while (c2--)
                a2 = a2.lastChild;
              S.merge(p2, a2.childNodes), (a2 = f2.firstChild).textContent = "";
            } else
              p2.push(t2.createTextNode(o2));
        f2.textContent = "", d2 = 0;
        while (o2 = p2[d2++])
          if (r2 && -1 < S.inArray(o2, r2))
            i2 && i2.push(o2);
          else if (l2 = ie(o2), a2 = ve(f2.appendChild(o2), "script"), l2 && ye(a2), n2) {
            c2 = 0;
            while (o2 = a2[c2++])
              he.test(o2.type || "") && n2.push(o2);
          }
        return f2;
      }
      var be = /^([^.]*)(?:\.(.+)|)/;
      function we() {
        return true;
      }
      function Te() {
        return false;
      }
      function Ce(e2, t2) {
        return e2 === function() {
          try {
            return E.activeElement;
          } catch (e3) {
          }
        }() == (t2 === "focus");
      }
      function Ee(e2, t2, n2, r2, i2, o2) {
        var a2, s2;
        if (typeof t2 == "object") {
          for (s2 in typeof n2 != "string" && (r2 = r2 || n2, n2 = void 0), t2)
            Ee(e2, s2, n2, r2, t2[s2], o2);
          return e2;
        }
        if (r2 == null && i2 == null ? (i2 = n2, r2 = n2 = void 0) : i2 == null && (typeof n2 == "string" ? (i2 = r2, r2 = void 0) : (i2 = r2, r2 = n2, n2 = void 0)), i2 === false)
          i2 = Te;
        else if (!i2)
          return e2;
        return o2 === 1 && (a2 = i2, (i2 = function(e3) {
          return S().off(e3), a2.apply(this, arguments);
        }).guid = a2.guid || (a2.guid = S.guid++)), e2.each(function() {
          S.event.add(this, t2, i2, r2, n2);
        });
      }
      function Se(e2, i2, o2) {
        o2 ? (Y.set(e2, i2, false), S.event.add(e2, i2, {namespace: false, handler: function(e3) {
          var t2, n2, r2 = Y.get(this, i2);
          if (1 & e3.isTrigger && this[i2]) {
            if (r2.length)
              (S.event.special[i2] || {}).delegateType && e3.stopPropagation();
            else if (r2 = s.call(arguments), Y.set(this, i2, r2), t2 = o2(this, i2), this[i2](), r2 !== (n2 = Y.get(this, i2)) || t2 ? Y.set(this, i2, false) : n2 = {}, r2 !== n2)
              return e3.stopImmediatePropagation(), e3.preventDefault(), n2 && n2.value;
          } else
            r2.length && (Y.set(this, i2, {value: S.event.trigger(S.extend(r2[0], S.Event.prototype), r2.slice(1), this)}), e3.stopImmediatePropagation());
        }})) : Y.get(e2, i2) === void 0 && S.event.add(e2, i2, we);
      }
      S.event = {global: {}, add: function(t2, e2, n2, r2, i2) {
        var o2, a2, s2, u2, l2, c2, f2, p2, d2, h2, g2, v2 = Y.get(t2);
        if (V(t2)) {
          n2.handler && (n2 = (o2 = n2).handler, i2 = o2.selector), i2 && S.find.matchesSelector(re, i2), n2.guid || (n2.guid = S.guid++), (u2 = v2.events) || (u2 = v2.events = Object.create(null)), (a2 = v2.handle) || (a2 = v2.handle = function(e3) {
            return typeof S != "undefined" && S.event.triggered !== e3.type ? S.event.dispatch.apply(t2, arguments) : void 0;
          }), l2 = (e2 = (e2 || "").match(P) || [""]).length;
          while (l2--)
            d2 = g2 = (s2 = be.exec(e2[l2]) || [])[1], h2 = (s2[2] || "").split(".").sort(), d2 && (f2 = S.event.special[d2] || {}, d2 = (i2 ? f2.delegateType : f2.bindType) || d2, f2 = S.event.special[d2] || {}, c2 = S.extend({type: d2, origType: g2, data: r2, handler: n2, guid: n2.guid, selector: i2, needsContext: i2 && S.expr.match.needsContext.test(i2), namespace: h2.join(".")}, o2), (p2 = u2[d2]) || ((p2 = u2[d2] = []).delegateCount = 0, f2.setup && f2.setup.call(t2, r2, h2, a2) !== false || t2.addEventListener && t2.addEventListener(d2, a2)), f2.add && (f2.add.call(t2, c2), c2.handler.guid || (c2.handler.guid = n2.guid)), i2 ? p2.splice(p2.delegateCount++, 0, c2) : p2.push(c2), S.event.global[d2] = true);
        }
      }, remove: function(e2, t2, n2, r2, i2) {
        var o2, a2, s2, u2, l2, c2, f2, p2, d2, h2, g2, v2 = Y.hasData(e2) && Y.get(e2);
        if (v2 && (u2 = v2.events)) {
          l2 = (t2 = (t2 || "").match(P) || [""]).length;
          while (l2--)
            if (d2 = g2 = (s2 = be.exec(t2[l2]) || [])[1], h2 = (s2[2] || "").split(".").sort(), d2) {
              f2 = S.event.special[d2] || {}, p2 = u2[d2 = (r2 ? f2.delegateType : f2.bindType) || d2] || [], s2 = s2[2] && new RegExp("(^|\\.)" + h2.join("\\.(?:.*\\.|)") + "(\\.|$)"), a2 = o2 = p2.length;
              while (o2--)
                c2 = p2[o2], !i2 && g2 !== c2.origType || n2 && n2.guid !== c2.guid || s2 && !s2.test(c2.namespace) || r2 && r2 !== c2.selector && (r2 !== "**" || !c2.selector) || (p2.splice(o2, 1), c2.selector && p2.delegateCount--, f2.remove && f2.remove.call(e2, c2));
              a2 && !p2.length && (f2.teardown && f2.teardown.call(e2, h2, v2.handle) !== false || S.removeEvent(e2, d2, v2.handle), delete u2[d2]);
            } else
              for (d2 in u2)
                S.event.remove(e2, d2 + t2[l2], n2, r2, true);
          S.isEmptyObject(u2) && Y.remove(e2, "handle events");
        }
      }, dispatch: function(e2) {
        var t2, n2, r2, i2, o2, a2, s2 = new Array(arguments.length), u2 = S.event.fix(e2), l2 = (Y.get(this, "events") || Object.create(null))[u2.type] || [], c2 = S.event.special[u2.type] || {};
        for (s2[0] = u2, t2 = 1; t2 < arguments.length; t2++)
          s2[t2] = arguments[t2];
        if (u2.delegateTarget = this, !c2.preDispatch || c2.preDispatch.call(this, u2) !== false) {
          a2 = S.event.handlers.call(this, u2, l2), t2 = 0;
          while ((i2 = a2[t2++]) && !u2.isPropagationStopped()) {
            u2.currentTarget = i2.elem, n2 = 0;
            while ((o2 = i2.handlers[n2++]) && !u2.isImmediatePropagationStopped())
              u2.rnamespace && o2.namespace !== false && !u2.rnamespace.test(o2.namespace) || (u2.handleObj = o2, u2.data = o2.data, (r2 = ((S.event.special[o2.origType] || {}).handle || o2.handler).apply(i2.elem, s2)) !== void 0 && (u2.result = r2) === false && (u2.preventDefault(), u2.stopPropagation()));
          }
          return c2.postDispatch && c2.postDispatch.call(this, u2), u2.result;
        }
      }, handlers: function(e2, t2) {
        var n2, r2, i2, o2, a2, s2 = [], u2 = t2.delegateCount, l2 = e2.target;
        if (u2 && l2.nodeType && !(e2.type === "click" && 1 <= e2.button)) {
          for (; l2 !== this; l2 = l2.parentNode || this)
            if (l2.nodeType === 1 && (e2.type !== "click" || l2.disabled !== true)) {
              for (o2 = [], a2 = {}, n2 = 0; n2 < u2; n2++)
                a2[i2 = (r2 = t2[n2]).selector + " "] === void 0 && (a2[i2] = r2.needsContext ? -1 < S(i2, this).index(l2) : S.find(i2, this, null, [l2]).length), a2[i2] && o2.push(r2);
              o2.length && s2.push({elem: l2, handlers: o2});
            }
        }
        return l2 = this, u2 < t2.length && s2.push({elem: l2, handlers: t2.slice(u2)}), s2;
      }, addProp: function(t2, e2) {
        Object.defineProperty(S.Event.prototype, t2, {enumerable: true, configurable: true, get: m(e2) ? function() {
          if (this.originalEvent)
            return e2(this.originalEvent);
        } : function() {
          if (this.originalEvent)
            return this.originalEvent[t2];
        }, set: function(e3) {
          Object.defineProperty(this, t2, {enumerable: true, configurable: true, writable: true, value: e3});
        }});
      }, fix: function(e2) {
        return e2[S.expando] ? e2 : new S.Event(e2);
      }, special: {load: {noBubble: true}, click: {setup: function(e2) {
        var t2 = this || e2;
        return pe.test(t2.type) && t2.click && A(t2, "input") && Se(t2, "click", we), false;
      }, trigger: function(e2) {
        var t2 = this || e2;
        return pe.test(t2.type) && t2.click && A(t2, "input") && Se(t2, "click"), true;
      }, _default: function(e2) {
        var t2 = e2.target;
        return pe.test(t2.type) && t2.click && A(t2, "input") && Y.get(t2, "click") || A(t2, "a");
      }}, beforeunload: {postDispatch: function(e2) {
        e2.result !== void 0 && e2.originalEvent && (e2.originalEvent.returnValue = e2.result);
      }}}}, S.removeEvent = function(e2, t2, n2) {
        e2.removeEventListener && e2.removeEventListener(t2, n2);
      }, S.Event = function(e2, t2) {
        if (!(this instanceof S.Event))
          return new S.Event(e2, t2);
        e2 && e2.type ? (this.originalEvent = e2, this.type = e2.type, this.isDefaultPrevented = e2.defaultPrevented || e2.defaultPrevented === void 0 && e2.returnValue === false ? we : Te, this.target = e2.target && e2.target.nodeType === 3 ? e2.target.parentNode : e2.target, this.currentTarget = e2.currentTarget, this.relatedTarget = e2.relatedTarget) : this.type = e2, t2 && S.extend(this, t2), this.timeStamp = e2 && e2.timeStamp || Date.now(), this[S.expando] = true;
      }, S.Event.prototype = {constructor: S.Event, isDefaultPrevented: Te, isPropagationStopped: Te, isImmediatePropagationStopped: Te, isSimulated: false, preventDefault: function() {
        var e2 = this.originalEvent;
        this.isDefaultPrevented = we, e2 && !this.isSimulated && e2.preventDefault();
      }, stopPropagation: function() {
        var e2 = this.originalEvent;
        this.isPropagationStopped = we, e2 && !this.isSimulated && e2.stopPropagation();
      }, stopImmediatePropagation: function() {
        var e2 = this.originalEvent;
        this.isImmediatePropagationStopped = we, e2 && !this.isSimulated && e2.stopImmediatePropagation(), this.stopPropagation();
      }}, S.each({altKey: true, bubbles: true, cancelable: true, changedTouches: true, ctrlKey: true, detail: true, eventPhase: true, metaKey: true, pageX: true, pageY: true, shiftKey: true, view: true, char: true, code: true, charCode: true, key: true, keyCode: true, button: true, buttons: true, clientX: true, clientY: true, offsetX: true, offsetY: true, pointerId: true, pointerType: true, screenX: true, screenY: true, targetTouches: true, toElement: true, touches: true, which: true}, S.event.addProp), S.each({focus: "focusin", blur: "focusout"}, function(e2, t2) {
        S.event.special[e2] = {setup: function() {
          return Se(this, e2, Ce), false;
        }, trigger: function() {
          return Se(this, e2), true;
        }, _default: function() {
          return true;
        }, delegateType: t2};
      }), S.each({mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout"}, function(e2, i2) {
        S.event.special[e2] = {delegateType: i2, bindType: i2, handle: function(e3) {
          var t2, n2 = e3.relatedTarget, r2 = e3.handleObj;
          return n2 && (n2 === this || S.contains(this, n2)) || (e3.type = r2.origType, t2 = r2.handler.apply(this, arguments), e3.type = i2), t2;
        }};
      }), S.fn.extend({on: function(e2, t2, n2, r2) {
        return Ee(this, e2, t2, n2, r2);
      }, one: function(e2, t2, n2, r2) {
        return Ee(this, e2, t2, n2, r2, 1);
      }, off: function(e2, t2, n2) {
        var r2, i2;
        if (e2 && e2.preventDefault && e2.handleObj)
          return r2 = e2.handleObj, S(e2.delegateTarget).off(r2.namespace ? r2.origType + "." + r2.namespace : r2.origType, r2.selector, r2.handler), this;
        if (typeof e2 == "object") {
          for (i2 in e2)
            this.off(i2, t2, e2[i2]);
          return this;
        }
        return t2 !== false && typeof t2 != "function" || (n2 = t2, t2 = void 0), n2 === false && (n2 = Te), this.each(function() {
          S.event.remove(this, e2, n2, t2);
        });
      }});
      var ke = /<script|<style|<link/i, Ae = /checked\s*(?:[^=]|=\s*.checked.)/i, Ne = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
      function je(e2, t2) {
        return A(e2, "table") && A(t2.nodeType !== 11 ? t2 : t2.firstChild, "tr") && S(e2).children("tbody")[0] || e2;
      }
      function De(e2) {
        return e2.type = (e2.getAttribute("type") !== null) + "/" + e2.type, e2;
      }
      function qe(e2) {
        return (e2.type || "").slice(0, 5) === "true/" ? e2.type = e2.type.slice(5) : e2.removeAttribute("type"), e2;
      }
      function Le(e2, t2) {
        var n2, r2, i2, o2, a2, s2;
        if (t2.nodeType === 1) {
          if (Y.hasData(e2) && (s2 = Y.get(e2).events))
            for (i2 in Y.remove(t2, "handle events"), s2)
              for (n2 = 0, r2 = s2[i2].length; n2 < r2; n2++)
                S.event.add(t2, i2, s2[i2][n2]);
          Q.hasData(e2) && (o2 = Q.access(e2), a2 = S.extend({}, o2), Q.set(t2, a2));
        }
      }
      function He(n2, r2, i2, o2) {
        r2 = g(r2);
        var e2, t2, a2, s2, u2, l2, c2 = 0, f2 = n2.length, p2 = f2 - 1, d2 = r2[0], h2 = m(d2);
        if (h2 || 1 < f2 && typeof d2 == "string" && !y.checkClone && Ae.test(d2))
          return n2.each(function(e3) {
            var t3 = n2.eq(e3);
            h2 && (r2[0] = d2.call(this, e3, t3.html())), He(t3, r2, i2, o2);
          });
        if (f2 && (t2 = (e2 = xe(r2, n2[0].ownerDocument, false, n2, o2)).firstChild, e2.childNodes.length === 1 && (e2 = t2), t2 || o2)) {
          for (s2 = (a2 = S.map(ve(e2, "script"), De)).length; c2 < f2; c2++)
            u2 = e2, c2 !== p2 && (u2 = S.clone(u2, true, true), s2 && S.merge(a2, ve(u2, "script"))), i2.call(n2[c2], u2, c2);
          if (s2)
            for (l2 = a2[a2.length - 1].ownerDocument, S.map(a2, qe), c2 = 0; c2 < s2; c2++)
              u2 = a2[c2], he.test(u2.type || "") && !Y.access(u2, "globalEval") && S.contains(l2, u2) && (u2.src && (u2.type || "").toLowerCase() !== "module" ? S._evalUrl && !u2.noModule && S._evalUrl(u2.src, {nonce: u2.nonce || u2.getAttribute("nonce")}, l2) : b(u2.textContent.replace(Ne, ""), u2, l2));
        }
        return n2;
      }
      function Oe(e2, t2, n2) {
        for (var r2, i2 = t2 ? S.filter(t2, e2) : e2, o2 = 0; (r2 = i2[o2]) != null; o2++)
          n2 || r2.nodeType !== 1 || S.cleanData(ve(r2)), r2.parentNode && (n2 && ie(r2) && ye(ve(r2, "script")), r2.parentNode.removeChild(r2));
        return e2;
      }
      S.extend({htmlPrefilter: function(e2) {
        return e2;
      }, clone: function(e2, t2, n2) {
        var r2, i2, o2, a2, s2, u2, l2, c2 = e2.cloneNode(true), f2 = ie(e2);
        if (!(y.noCloneChecked || e2.nodeType !== 1 && e2.nodeType !== 11 || S.isXMLDoc(e2)))
          for (a2 = ve(c2), r2 = 0, i2 = (o2 = ve(e2)).length; r2 < i2; r2++)
            s2 = o2[r2], u2 = a2[r2], void 0, (l2 = u2.nodeName.toLowerCase()) === "input" && pe.test(s2.type) ? u2.checked = s2.checked : l2 !== "input" && l2 !== "textarea" || (u2.defaultValue = s2.defaultValue);
        if (t2)
          if (n2)
            for (o2 = o2 || ve(e2), a2 = a2 || ve(c2), r2 = 0, i2 = o2.length; r2 < i2; r2++)
              Le(o2[r2], a2[r2]);
          else
            Le(e2, c2);
        return 0 < (a2 = ve(c2, "script")).length && ye(a2, !f2 && ve(e2, "script")), c2;
      }, cleanData: function(e2) {
        for (var t2, n2, r2, i2 = S.event.special, o2 = 0; (n2 = e2[o2]) !== void 0; o2++)
          if (V(n2)) {
            if (t2 = n2[Y.expando]) {
              if (t2.events)
                for (r2 in t2.events)
                  i2[r2] ? S.event.remove(n2, r2) : S.removeEvent(n2, r2, t2.handle);
              n2[Y.expando] = void 0;
            }
            n2[Q.expando] && (n2[Q.expando] = void 0);
          }
      }}), S.fn.extend({detach: function(e2) {
        return Oe(this, e2, true);
      }, remove: function(e2) {
        return Oe(this, e2);
      }, text: function(e2) {
        return $2(this, function(e3) {
          return e3 === void 0 ? S.text(this) : this.empty().each(function() {
            this.nodeType !== 1 && this.nodeType !== 11 && this.nodeType !== 9 || (this.textContent = e3);
          });
        }, null, e2, arguments.length);
      }, append: function() {
        return He(this, arguments, function(e2) {
          this.nodeType !== 1 && this.nodeType !== 11 && this.nodeType !== 9 || je(this, e2).appendChild(e2);
        });
      }, prepend: function() {
        return He(this, arguments, function(e2) {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            var t2 = je(this, e2);
            t2.insertBefore(e2, t2.firstChild);
          }
        });
      }, before: function() {
        return He(this, arguments, function(e2) {
          this.parentNode && this.parentNode.insertBefore(e2, this);
        });
      }, after: function() {
        return He(this, arguments, function(e2) {
          this.parentNode && this.parentNode.insertBefore(e2, this.nextSibling);
        });
      }, empty: function() {
        for (var e2, t2 = 0; (e2 = this[t2]) != null; t2++)
          e2.nodeType === 1 && (S.cleanData(ve(e2, false)), e2.textContent = "");
        return this;
      }, clone: function(e2, t2) {
        return e2 = e2 != null && e2, t2 = t2 == null ? e2 : t2, this.map(function() {
          return S.clone(this, e2, t2);
        });
      }, html: function(e2) {
        return $2(this, function(e3) {
          var t2 = this[0] || {}, n2 = 0, r2 = this.length;
          if (e3 === void 0 && t2.nodeType === 1)
            return t2.innerHTML;
          if (typeof e3 == "string" && !ke.test(e3) && !ge[(de.exec(e3) || ["", ""])[1].toLowerCase()]) {
            e3 = S.htmlPrefilter(e3);
            try {
              for (; n2 < r2; n2++)
                (t2 = this[n2] || {}).nodeType === 1 && (S.cleanData(ve(t2, false)), t2.innerHTML = e3);
              t2 = 0;
            } catch (e4) {
            }
          }
          t2 && this.empty().append(e3);
        }, null, e2, arguments.length);
      }, replaceWith: function() {
        var n2 = [];
        return He(this, arguments, function(e2) {
          var t2 = this.parentNode;
          S.inArray(this, n2) < 0 && (S.cleanData(ve(this)), t2 && t2.replaceChild(e2, this));
        }, n2);
      }}), S.each({appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith"}, function(e2, a2) {
        S.fn[e2] = function(e3) {
          for (var t2, n2 = [], r2 = S(e3), i2 = r2.length - 1, o2 = 0; o2 <= i2; o2++)
            t2 = o2 === i2 ? this : this.clone(true), S(r2[o2])[a2](t2), u.apply(n2, t2.get());
          return this.pushStack(n2);
        };
      });
      var Pe = new RegExp("^(" + ee + ")(?!px)[a-z%]+$", "i"), Re = function(e2) {
        var t2 = e2.ownerDocument.defaultView;
        return t2 && t2.opener || (t2 = C), t2.getComputedStyle(e2);
      }, Me = function(e2, t2, n2) {
        var r2, i2, o2 = {};
        for (i2 in t2)
          o2[i2] = e2.style[i2], e2.style[i2] = t2[i2];
        for (i2 in r2 = n2.call(e2), t2)
          e2.style[i2] = o2[i2];
        return r2;
      }, Ie = new RegExp(ne.join("|"), "i");
      function We(e2, t2, n2) {
        var r2, i2, o2, a2, s2 = e2.style;
        return (n2 = n2 || Re(e2)) && ((a2 = n2.getPropertyValue(t2) || n2[t2]) !== "" || ie(e2) || (a2 = S.style(e2, t2)), !y.pixelBoxStyles() && Pe.test(a2) && Ie.test(t2) && (r2 = s2.width, i2 = s2.minWidth, o2 = s2.maxWidth, s2.minWidth = s2.maxWidth = s2.width = a2, a2 = n2.width, s2.width = r2, s2.minWidth = i2, s2.maxWidth = o2)), a2 !== void 0 ? a2 + "" : a2;
      }
      function Fe(e2, t2) {
        return {get: function() {
          if (!e2())
            return (this.get = t2).apply(this, arguments);
          delete this.get;
        }};
      }
      !function() {
        function e2() {
          if (l2) {
            u2.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", l2.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", re.appendChild(u2).appendChild(l2);
            var e3 = C.getComputedStyle(l2);
            n2 = e3.top !== "1%", s2 = t2(e3.marginLeft) === 12, l2.style.right = "60%", o2 = t2(e3.right) === 36, r2 = t2(e3.width) === 36, l2.style.position = "absolute", i2 = t2(l2.offsetWidth / 3) === 12, re.removeChild(u2), l2 = null;
          }
        }
        function t2(e3) {
          return Math.round(parseFloat(e3));
        }
        var n2, r2, i2, o2, a2, s2, u2 = E.createElement("div"), l2 = E.createElement("div");
        l2.style && (l2.style.backgroundClip = "content-box", l2.cloneNode(true).style.backgroundClip = "", y.clearCloneStyle = l2.style.backgroundClip === "content-box", S.extend(y, {boxSizingReliable: function() {
          return e2(), r2;
        }, pixelBoxStyles: function() {
          return e2(), o2;
        }, pixelPosition: function() {
          return e2(), n2;
        }, reliableMarginLeft: function() {
          return e2(), s2;
        }, scrollboxSize: function() {
          return e2(), i2;
        }, reliableTrDimensions: function() {
          var e3, t3, n3, r3;
          return a2 == null && (e3 = E.createElement("table"), t3 = E.createElement("tr"), n3 = E.createElement("div"), e3.style.cssText = "position:absolute;left:-11111px;border-collapse:separate", t3.style.cssText = "border:1px solid", t3.style.height = "1px", n3.style.height = "9px", n3.style.display = "block", re.appendChild(e3).appendChild(t3).appendChild(n3), r3 = C.getComputedStyle(t3), a2 = parseInt(r3.height, 10) + parseInt(r3.borderTopWidth, 10) + parseInt(r3.borderBottomWidth, 10) === t3.offsetHeight, re.removeChild(e3)), a2;
        }}));
      }();
      var Be = ["Webkit", "Moz", "ms"], $e = E.createElement("div").style, _e = {};
      function ze(e2) {
        var t2 = S.cssProps[e2] || _e[e2];
        return t2 || (e2 in $e ? e2 : _e[e2] = function(e3) {
          var t3 = e3[0].toUpperCase() + e3.slice(1), n2 = Be.length;
          while (n2--)
            if ((e3 = Be[n2] + t3) in $e)
              return e3;
        }(e2) || e2);
      }
      var Ue = /^(none|table(?!-c[ea]).+)/, Xe = /^--/, Ve = {position: "absolute", visibility: "hidden", display: "block"}, Ge = {letterSpacing: "0", fontWeight: "400"};
      function Ye(e2, t2, n2) {
        var r2 = te.exec(t2);
        return r2 ? Math.max(0, r2[2] - (n2 || 0)) + (r2[3] || "px") : t2;
      }
      function Qe(e2, t2, n2, r2, i2, o2) {
        var a2 = t2 === "width" ? 1 : 0, s2 = 0, u2 = 0;
        if (n2 === (r2 ? "border" : "content"))
          return 0;
        for (; a2 < 4; a2 += 2)
          n2 === "margin" && (u2 += S.css(e2, n2 + ne[a2], true, i2)), r2 ? (n2 === "content" && (u2 -= S.css(e2, "padding" + ne[a2], true, i2)), n2 !== "margin" && (u2 -= S.css(e2, "border" + ne[a2] + "Width", true, i2))) : (u2 += S.css(e2, "padding" + ne[a2], true, i2), n2 !== "padding" ? u2 += S.css(e2, "border" + ne[a2] + "Width", true, i2) : s2 += S.css(e2, "border" + ne[a2] + "Width", true, i2));
        return !r2 && 0 <= o2 && (u2 += Math.max(0, Math.ceil(e2["offset" + t2[0].toUpperCase() + t2.slice(1)] - o2 - u2 - s2 - 0.5)) || 0), u2;
      }
      function Je(e2, t2, n2) {
        var r2 = Re(e2), i2 = (!y.boxSizingReliable() || n2) && S.css(e2, "boxSizing", false, r2) === "border-box", o2 = i2, a2 = We(e2, t2, r2), s2 = "offset" + t2[0].toUpperCase() + t2.slice(1);
        if (Pe.test(a2)) {
          if (!n2)
            return a2;
          a2 = "auto";
        }
        return (!y.boxSizingReliable() && i2 || !y.reliableTrDimensions() && A(e2, "tr") || a2 === "auto" || !parseFloat(a2) && S.css(e2, "display", false, r2) === "inline") && e2.getClientRects().length && (i2 = S.css(e2, "boxSizing", false, r2) === "border-box", (o2 = s2 in e2) && (a2 = e2[s2])), (a2 = parseFloat(a2) || 0) + Qe(e2, t2, n2 || (i2 ? "border" : "content"), o2, r2, a2) + "px";
      }
      function Ke(e2, t2, n2, r2, i2) {
        return new Ke.prototype.init(e2, t2, n2, r2, i2);
      }
      S.extend({cssHooks: {opacity: {get: function(e2, t2) {
        if (t2) {
          var n2 = We(e2, "opacity");
          return n2 === "" ? "1" : n2;
        }
      }}}, cssNumber: {animationIterationCount: true, columnCount: true, fillOpacity: true, flexGrow: true, flexShrink: true, fontWeight: true, gridArea: true, gridColumn: true, gridColumnEnd: true, gridColumnStart: true, gridRow: true, gridRowEnd: true, gridRowStart: true, lineHeight: true, opacity: true, order: true, orphans: true, widows: true, zIndex: true, zoom: true}, cssProps: {}, style: function(e2, t2, n2, r2) {
        if (e2 && e2.nodeType !== 3 && e2.nodeType !== 8 && e2.style) {
          var i2, o2, a2, s2 = X(t2), u2 = Xe.test(t2), l2 = e2.style;
          if (u2 || (t2 = ze(s2)), a2 = S.cssHooks[t2] || S.cssHooks[s2], n2 === void 0)
            return a2 && "get" in a2 && (i2 = a2.get(e2, false, r2)) !== void 0 ? i2 : l2[t2];
          (o2 = typeof n2) === "string" && (i2 = te.exec(n2)) && i2[1] && (n2 = se(e2, t2, i2), o2 = "number"), n2 != null && n2 == n2 && (o2 !== "number" || u2 || (n2 += i2 && i2[3] || (S.cssNumber[s2] ? "" : "px")), y.clearCloneStyle || n2 !== "" || t2.indexOf("background") !== 0 || (l2[t2] = "inherit"), a2 && "set" in a2 && (n2 = a2.set(e2, n2, r2)) === void 0 || (u2 ? l2.setProperty(t2, n2) : l2[t2] = n2));
        }
      }, css: function(e2, t2, n2, r2) {
        var i2, o2, a2, s2 = X(t2);
        return Xe.test(t2) || (t2 = ze(s2)), (a2 = S.cssHooks[t2] || S.cssHooks[s2]) && "get" in a2 && (i2 = a2.get(e2, true, n2)), i2 === void 0 && (i2 = We(e2, t2, r2)), i2 === "normal" && t2 in Ge && (i2 = Ge[t2]), n2 === "" || n2 ? (o2 = parseFloat(i2), n2 === true || isFinite(o2) ? o2 || 0 : i2) : i2;
      }}), S.each(["height", "width"], function(e2, u2) {
        S.cssHooks[u2] = {get: function(e3, t2, n2) {
          if (t2)
            return !Ue.test(S.css(e3, "display")) || e3.getClientRects().length && e3.getBoundingClientRect().width ? Je(e3, u2, n2) : Me(e3, Ve, function() {
              return Je(e3, u2, n2);
            });
        }, set: function(e3, t2, n2) {
          var r2, i2 = Re(e3), o2 = !y.scrollboxSize() && i2.position === "absolute", a2 = (o2 || n2) && S.css(e3, "boxSizing", false, i2) === "border-box", s2 = n2 ? Qe(e3, u2, n2, a2, i2) : 0;
          return a2 && o2 && (s2 -= Math.ceil(e3["offset" + u2[0].toUpperCase() + u2.slice(1)] - parseFloat(i2[u2]) - Qe(e3, u2, "border", false, i2) - 0.5)), s2 && (r2 = te.exec(t2)) && (r2[3] || "px") !== "px" && (e3.style[u2] = t2, t2 = S.css(e3, u2)), Ye(0, t2, s2);
        }};
      }), S.cssHooks.marginLeft = Fe(y.reliableMarginLeft, function(e2, t2) {
        if (t2)
          return (parseFloat(We(e2, "marginLeft")) || e2.getBoundingClientRect().left - Me(e2, {marginLeft: 0}, function() {
            return e2.getBoundingClientRect().left;
          })) + "px";
      }), S.each({margin: "", padding: "", border: "Width"}, function(i2, o2) {
        S.cssHooks[i2 + o2] = {expand: function(e2) {
          for (var t2 = 0, n2 = {}, r2 = typeof e2 == "string" ? e2.split(" ") : [e2]; t2 < 4; t2++)
            n2[i2 + ne[t2] + o2] = r2[t2] || r2[t2 - 2] || r2[0];
          return n2;
        }}, i2 !== "margin" && (S.cssHooks[i2 + o2].set = Ye);
      }), S.fn.extend({css: function(e2, t2) {
        return $2(this, function(e3, t3, n2) {
          var r2, i2, o2 = {}, a2 = 0;
          if (Array.isArray(t3)) {
            for (r2 = Re(e3), i2 = t3.length; a2 < i2; a2++)
              o2[t3[a2]] = S.css(e3, t3[a2], false, r2);
            return o2;
          }
          return n2 !== void 0 ? S.style(e3, t3, n2) : S.css(e3, t3);
        }, e2, t2, 1 < arguments.length);
      }}), ((S.Tween = Ke).prototype = {constructor: Ke, init: function(e2, t2, n2, r2, i2, o2) {
        this.elem = e2, this.prop = n2, this.easing = i2 || S.easing._default, this.options = t2, this.start = this.now = this.cur(), this.end = r2, this.unit = o2 || (S.cssNumber[n2] ? "" : "px");
      }, cur: function() {
        var e2 = Ke.propHooks[this.prop];
        return e2 && e2.get ? e2.get(this) : Ke.propHooks._default.get(this);
      }, run: function(e2) {
        var t2, n2 = Ke.propHooks[this.prop];
        return this.options.duration ? this.pos = t2 = S.easing[this.easing](e2, this.options.duration * e2, 0, 1, this.options.duration) : this.pos = t2 = e2, this.now = (this.end - this.start) * t2 + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n2 && n2.set ? n2.set(this) : Ke.propHooks._default.set(this), this;
      }}).init.prototype = Ke.prototype, (Ke.propHooks = {_default: {get: function(e2) {
        var t2;
        return e2.elem.nodeType !== 1 || e2.elem[e2.prop] != null && e2.elem.style[e2.prop] == null ? e2.elem[e2.prop] : (t2 = S.css(e2.elem, e2.prop, "")) && t2 !== "auto" ? t2 : 0;
      }, set: function(e2) {
        S.fx.step[e2.prop] ? S.fx.step[e2.prop](e2) : e2.elem.nodeType !== 1 || !S.cssHooks[e2.prop] && e2.elem.style[ze(e2.prop)] == null ? e2.elem[e2.prop] = e2.now : S.style(e2.elem, e2.prop, e2.now + e2.unit);
      }}}).scrollTop = Ke.propHooks.scrollLeft = {set: function(e2) {
        e2.elem.nodeType && e2.elem.parentNode && (e2.elem[e2.prop] = e2.now);
      }}, S.easing = {linear: function(e2) {
        return e2;
      }, swing: function(e2) {
        return 0.5 - Math.cos(e2 * Math.PI) / 2;
      }, _default: "swing"}, S.fx = Ke.prototype.init, S.fx.step = {};
      var Ze, et, tt, nt, rt = /^(?:toggle|show|hide)$/, it = /queueHooks$/;
      function ot() {
        et && (E.hidden === false && C.requestAnimationFrame ? C.requestAnimationFrame(ot) : C.setTimeout(ot, S.fx.interval), S.fx.tick());
      }
      function at() {
        return C.setTimeout(function() {
          Ze = void 0;
        }), Ze = Date.now();
      }
      function st(e2, t2) {
        var n2, r2 = 0, i2 = {height: e2};
        for (t2 = t2 ? 1 : 0; r2 < 4; r2 += 2 - t2)
          i2["margin" + (n2 = ne[r2])] = i2["padding" + n2] = e2;
        return t2 && (i2.opacity = i2.width = e2), i2;
      }
      function ut(e2, t2, n2) {
        for (var r2, i2 = (lt.tweeners[t2] || []).concat(lt.tweeners["*"]), o2 = 0, a2 = i2.length; o2 < a2; o2++)
          if (r2 = i2[o2].call(n2, t2, e2))
            return r2;
      }
      function lt(o2, e2, t2) {
        var n2, a2, r2 = 0, i2 = lt.prefilters.length, s2 = S.Deferred().always(function() {
          delete u2.elem;
        }), u2 = function() {
          if (a2)
            return false;
          for (var e3 = Ze || at(), t3 = Math.max(0, l2.startTime + l2.duration - e3), n3 = 1 - (t3 / l2.duration || 0), r3 = 0, i3 = l2.tweens.length; r3 < i3; r3++)
            l2.tweens[r3].run(n3);
          return s2.notifyWith(o2, [l2, n3, t3]), n3 < 1 && i3 ? t3 : (i3 || s2.notifyWith(o2, [l2, 1, 0]), s2.resolveWith(o2, [l2]), false);
        }, l2 = s2.promise({elem: o2, props: S.extend({}, e2), opts: S.extend(true, {specialEasing: {}, easing: S.easing._default}, t2), originalProperties: e2, originalOptions: t2, startTime: Ze || at(), duration: t2.duration, tweens: [], createTween: function(e3, t3) {
          var n3 = S.Tween(o2, l2.opts, e3, t3, l2.opts.specialEasing[e3] || l2.opts.easing);
          return l2.tweens.push(n3), n3;
        }, stop: function(e3) {
          var t3 = 0, n3 = e3 ? l2.tweens.length : 0;
          if (a2)
            return this;
          for (a2 = true; t3 < n3; t3++)
            l2.tweens[t3].run(1);
          return e3 ? (s2.notifyWith(o2, [l2, 1, 0]), s2.resolveWith(o2, [l2, e3])) : s2.rejectWith(o2, [l2, e3]), this;
        }}), c2 = l2.props;
        for (!function(e3, t3) {
          var n3, r3, i3, o3, a3;
          for (n3 in e3)
            if (i3 = t3[r3 = X(n3)], o3 = e3[n3], Array.isArray(o3) && (i3 = o3[1], o3 = e3[n3] = o3[0]), n3 !== r3 && (e3[r3] = o3, delete e3[n3]), (a3 = S.cssHooks[r3]) && "expand" in a3)
              for (n3 in o3 = a3.expand(o3), delete e3[r3], o3)
                n3 in e3 || (e3[n3] = o3[n3], t3[n3] = i3);
            else
              t3[r3] = i3;
        }(c2, l2.opts.specialEasing); r2 < i2; r2++)
          if (n2 = lt.prefilters[r2].call(l2, o2, c2, l2.opts))
            return m(n2.stop) && (S._queueHooks(l2.elem, l2.opts.queue).stop = n2.stop.bind(n2)), n2;
        return S.map(c2, ut, l2), m(l2.opts.start) && l2.opts.start.call(o2, l2), l2.progress(l2.opts.progress).done(l2.opts.done, l2.opts.complete).fail(l2.opts.fail).always(l2.opts.always), S.fx.timer(S.extend(u2, {elem: o2, anim: l2, queue: l2.opts.queue})), l2;
      }
      S.Animation = S.extend(lt, {tweeners: {"*": [function(e2, t2) {
        var n2 = this.createTween(e2, t2);
        return se(n2.elem, e2, te.exec(t2), n2), n2;
      }]}, tweener: function(e2, t2) {
        m(e2) ? (t2 = e2, e2 = ["*"]) : e2 = e2.match(P);
        for (var n2, r2 = 0, i2 = e2.length; r2 < i2; r2++)
          n2 = e2[r2], lt.tweeners[n2] = lt.tweeners[n2] || [], lt.tweeners[n2].unshift(t2);
      }, prefilters: [function(e2, t2, n2) {
        var r2, i2, o2, a2, s2, u2, l2, c2, f2 = "width" in t2 || "height" in t2, p2 = this, d2 = {}, h2 = e2.style, g2 = e2.nodeType && ae(e2), v2 = Y.get(e2, "fxshow");
        for (r2 in n2.queue || ((a2 = S._queueHooks(e2, "fx")).unqueued == null && (a2.unqueued = 0, s2 = a2.empty.fire, a2.empty.fire = function() {
          a2.unqueued || s2();
        }), a2.unqueued++, p2.always(function() {
          p2.always(function() {
            a2.unqueued--, S.queue(e2, "fx").length || a2.empty.fire();
          });
        })), t2)
          if (i2 = t2[r2], rt.test(i2)) {
            if (delete t2[r2], o2 = o2 || i2 === "toggle", i2 === (g2 ? "hide" : "show")) {
              if (i2 !== "show" || !v2 || v2[r2] === void 0)
                continue;
              g2 = true;
            }
            d2[r2] = v2 && v2[r2] || S.style(e2, r2);
          }
        if ((u2 = !S.isEmptyObject(t2)) || !S.isEmptyObject(d2))
          for (r2 in f2 && e2.nodeType === 1 && (n2.overflow = [h2.overflow, h2.overflowX, h2.overflowY], (l2 = v2 && v2.display) == null && (l2 = Y.get(e2, "display")), (c2 = S.css(e2, "display")) === "none" && (l2 ? c2 = l2 : (le([e2], true), l2 = e2.style.display || l2, c2 = S.css(e2, "display"), le([e2]))), (c2 === "inline" || c2 === "inline-block" && l2 != null) && S.css(e2, "float") === "none" && (u2 || (p2.done(function() {
            h2.display = l2;
          }), l2 == null && (c2 = h2.display, l2 = c2 === "none" ? "" : c2)), h2.display = "inline-block")), n2.overflow && (h2.overflow = "hidden", p2.always(function() {
            h2.overflow = n2.overflow[0], h2.overflowX = n2.overflow[1], h2.overflowY = n2.overflow[2];
          })), u2 = false, d2)
            u2 || (v2 ? "hidden" in v2 && (g2 = v2.hidden) : v2 = Y.access(e2, "fxshow", {display: l2}), o2 && (v2.hidden = !g2), g2 && le([e2], true), p2.done(function() {
              for (r2 in g2 || le([e2]), Y.remove(e2, "fxshow"), d2)
                S.style(e2, r2, d2[r2]);
            })), u2 = ut(g2 ? v2[r2] : 0, r2, p2), r2 in v2 || (v2[r2] = u2.start, g2 && (u2.end = u2.start, u2.start = 0));
      }], prefilter: function(e2, t2) {
        t2 ? lt.prefilters.unshift(e2) : lt.prefilters.push(e2);
      }}), S.speed = function(e2, t2, n2) {
        var r2 = e2 && typeof e2 == "object" ? S.extend({}, e2) : {complete: n2 || !n2 && t2 || m(e2) && e2, duration: e2, easing: n2 && t2 || t2 && !m(t2) && t2};
        return S.fx.off ? r2.duration = 0 : typeof r2.duration != "number" && (r2.duration in S.fx.speeds ? r2.duration = S.fx.speeds[r2.duration] : r2.duration = S.fx.speeds._default), r2.queue != null && r2.queue !== true || (r2.queue = "fx"), r2.old = r2.complete, r2.complete = function() {
          m(r2.old) && r2.old.call(this), r2.queue && S.dequeue(this, r2.queue);
        }, r2;
      }, S.fn.extend({fadeTo: function(e2, t2, n2, r2) {
        return this.filter(ae).css("opacity", 0).show().end().animate({opacity: t2}, e2, n2, r2);
      }, animate: function(t2, e2, n2, r2) {
        var i2 = S.isEmptyObject(t2), o2 = S.speed(e2, n2, r2), a2 = function() {
          var e3 = lt(this, S.extend({}, t2), o2);
          (i2 || Y.get(this, "finish")) && e3.stop(true);
        };
        return a2.finish = a2, i2 || o2.queue === false ? this.each(a2) : this.queue(o2.queue, a2);
      }, stop: function(i2, e2, o2) {
        var a2 = function(e3) {
          var t2 = e3.stop;
          delete e3.stop, t2(o2);
        };
        return typeof i2 != "string" && (o2 = e2, e2 = i2, i2 = void 0), e2 && this.queue(i2 || "fx", []), this.each(function() {
          var e3 = true, t2 = i2 != null && i2 + "queueHooks", n2 = S.timers, r2 = Y.get(this);
          if (t2)
            r2[t2] && r2[t2].stop && a2(r2[t2]);
          else
            for (t2 in r2)
              r2[t2] && r2[t2].stop && it.test(t2) && a2(r2[t2]);
          for (t2 = n2.length; t2--; )
            n2[t2].elem !== this || i2 != null && n2[t2].queue !== i2 || (n2[t2].anim.stop(o2), e3 = false, n2.splice(t2, 1));
          !e3 && o2 || S.dequeue(this, i2);
        });
      }, finish: function(a2) {
        return a2 !== false && (a2 = a2 || "fx"), this.each(function() {
          var e2, t2 = Y.get(this), n2 = t2[a2 + "queue"], r2 = t2[a2 + "queueHooks"], i2 = S.timers, o2 = n2 ? n2.length : 0;
          for (t2.finish = true, S.queue(this, a2, []), r2 && r2.stop && r2.stop.call(this, true), e2 = i2.length; e2--; )
            i2[e2].elem === this && i2[e2].queue === a2 && (i2[e2].anim.stop(true), i2.splice(e2, 1));
          for (e2 = 0; e2 < o2; e2++)
            n2[e2] && n2[e2].finish && n2[e2].finish.call(this);
          delete t2.finish;
        });
      }}), S.each(["toggle", "show", "hide"], function(e2, r2) {
        var i2 = S.fn[r2];
        S.fn[r2] = function(e3, t2, n2) {
          return e3 == null || typeof e3 == "boolean" ? i2.apply(this, arguments) : this.animate(st(r2, true), e3, t2, n2);
        };
      }), S.each({slideDown: st("show"), slideUp: st("hide"), slideToggle: st("toggle"), fadeIn: {opacity: "show"}, fadeOut: {opacity: "hide"}, fadeToggle: {opacity: "toggle"}}, function(e2, r2) {
        S.fn[e2] = function(e3, t2, n2) {
          return this.animate(r2, e3, t2, n2);
        };
      }), S.timers = [], S.fx.tick = function() {
        var e2, t2 = 0, n2 = S.timers;
        for (Ze = Date.now(); t2 < n2.length; t2++)
          (e2 = n2[t2])() || n2[t2] !== e2 || n2.splice(t2--, 1);
        n2.length || S.fx.stop(), Ze = void 0;
      }, S.fx.timer = function(e2) {
        S.timers.push(e2), S.fx.start();
      }, S.fx.interval = 13, S.fx.start = function() {
        et || (et = true, ot());
      }, S.fx.stop = function() {
        et = null;
      }, S.fx.speeds = {slow: 600, fast: 200, _default: 400}, S.fn.delay = function(r2, e2) {
        return r2 = S.fx && S.fx.speeds[r2] || r2, e2 = e2 || "fx", this.queue(e2, function(e3, t2) {
          var n2 = C.setTimeout(e3, r2);
          t2.stop = function() {
            C.clearTimeout(n2);
          };
        });
      }, tt = E.createElement("input"), nt = E.createElement("select").appendChild(E.createElement("option")), tt.type = "checkbox", y.checkOn = tt.value !== "", y.optSelected = nt.selected, (tt = E.createElement("input")).value = "t", tt.type = "radio", y.radioValue = tt.value === "t";
      var ct, ft = S.expr.attrHandle;
      S.fn.extend({attr: function(e2, t2) {
        return $2(this, S.attr, e2, t2, 1 < arguments.length);
      }, removeAttr: function(e2) {
        return this.each(function() {
          S.removeAttr(this, e2);
        });
      }}), S.extend({attr: function(e2, t2, n2) {
        var r2, i2, o2 = e2.nodeType;
        if (o2 !== 3 && o2 !== 8 && o2 !== 2)
          return typeof e2.getAttribute == "undefined" ? S.prop(e2, t2, n2) : (o2 === 1 && S.isXMLDoc(e2) || (i2 = S.attrHooks[t2.toLowerCase()] || (S.expr.match.bool.test(t2) ? ct : void 0)), n2 !== void 0 ? n2 === null ? void S.removeAttr(e2, t2) : i2 && "set" in i2 && (r2 = i2.set(e2, n2, t2)) !== void 0 ? r2 : (e2.setAttribute(t2, n2 + ""), n2) : i2 && "get" in i2 && (r2 = i2.get(e2, t2)) !== null ? r2 : (r2 = S.find.attr(e2, t2)) == null ? void 0 : r2);
      }, attrHooks: {type: {set: function(e2, t2) {
        if (!y.radioValue && t2 === "radio" && A(e2, "input")) {
          var n2 = e2.value;
          return e2.setAttribute("type", t2), n2 && (e2.value = n2), t2;
        }
      }}}, removeAttr: function(e2, t2) {
        var n2, r2 = 0, i2 = t2 && t2.match(P);
        if (i2 && e2.nodeType === 1)
          while (n2 = i2[r2++])
            e2.removeAttribute(n2);
      }}), ct = {set: function(e2, t2, n2) {
        return t2 === false ? S.removeAttr(e2, n2) : e2.setAttribute(n2, n2), n2;
      }}, S.each(S.expr.match.bool.source.match(/\w+/g), function(e2, t2) {
        var a2 = ft[t2] || S.find.attr;
        ft[t2] = function(e3, t3, n2) {
          var r2, i2, o2 = t3.toLowerCase();
          return n2 || (i2 = ft[o2], ft[o2] = r2, r2 = a2(e3, t3, n2) != null ? o2 : null, ft[o2] = i2), r2;
        };
      });
      var pt = /^(?:input|select|textarea|button)$/i, dt = /^(?:a|area)$/i;
      function ht(e2) {
        return (e2.match(P) || []).join(" ");
      }
      function gt(e2) {
        return e2.getAttribute && e2.getAttribute("class") || "";
      }
      function vt(e2) {
        return Array.isArray(e2) ? e2 : typeof e2 == "string" && e2.match(P) || [];
      }
      S.fn.extend({prop: function(e2, t2) {
        return $2(this, S.prop, e2, t2, 1 < arguments.length);
      }, removeProp: function(e2) {
        return this.each(function() {
          delete this[S.propFix[e2] || e2];
        });
      }}), S.extend({prop: function(e2, t2, n2) {
        var r2, i2, o2 = e2.nodeType;
        if (o2 !== 3 && o2 !== 8 && o2 !== 2)
          return o2 === 1 && S.isXMLDoc(e2) || (t2 = S.propFix[t2] || t2, i2 = S.propHooks[t2]), n2 !== void 0 ? i2 && "set" in i2 && (r2 = i2.set(e2, n2, t2)) !== void 0 ? r2 : e2[t2] = n2 : i2 && "get" in i2 && (r2 = i2.get(e2, t2)) !== null ? r2 : e2[t2];
      }, propHooks: {tabIndex: {get: function(e2) {
        var t2 = S.find.attr(e2, "tabindex");
        return t2 ? parseInt(t2, 10) : pt.test(e2.nodeName) || dt.test(e2.nodeName) && e2.href ? 0 : -1;
      }}}, propFix: {for: "htmlFor", class: "className"}}), y.optSelected || (S.propHooks.selected = {get: function(e2) {
        var t2 = e2.parentNode;
        return t2 && t2.parentNode && t2.parentNode.selectedIndex, null;
      }, set: function(e2) {
        var t2 = e2.parentNode;
        t2 && (t2.selectedIndex, t2.parentNode && t2.parentNode.selectedIndex);
      }}), S.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        S.propFix[this.toLowerCase()] = this;
      }), S.fn.extend({addClass: function(t2) {
        var e2, n2, r2, i2, o2, a2, s2, u2 = 0;
        if (m(t2))
          return this.each(function(e3) {
            S(this).addClass(t2.call(this, e3, gt(this)));
          });
        if ((e2 = vt(t2)).length) {
          while (n2 = this[u2++])
            if (i2 = gt(n2), r2 = n2.nodeType === 1 && " " + ht(i2) + " ") {
              a2 = 0;
              while (o2 = e2[a2++])
                r2.indexOf(" " + o2 + " ") < 0 && (r2 += o2 + " ");
              i2 !== (s2 = ht(r2)) && n2.setAttribute("class", s2);
            }
        }
        return this;
      }, removeClass: function(t2) {
        var e2, n2, r2, i2, o2, a2, s2, u2 = 0;
        if (m(t2))
          return this.each(function(e3) {
            S(this).removeClass(t2.call(this, e3, gt(this)));
          });
        if (!arguments.length)
          return this.attr("class", "");
        if ((e2 = vt(t2)).length) {
          while (n2 = this[u2++])
            if (i2 = gt(n2), r2 = n2.nodeType === 1 && " " + ht(i2) + " ") {
              a2 = 0;
              while (o2 = e2[a2++])
                while (-1 < r2.indexOf(" " + o2 + " "))
                  r2 = r2.replace(" " + o2 + " ", " ");
              i2 !== (s2 = ht(r2)) && n2.setAttribute("class", s2);
            }
        }
        return this;
      }, toggleClass: function(i2, t2) {
        var o2 = typeof i2, a2 = o2 === "string" || Array.isArray(i2);
        return typeof t2 == "boolean" && a2 ? t2 ? this.addClass(i2) : this.removeClass(i2) : m(i2) ? this.each(function(e2) {
          S(this).toggleClass(i2.call(this, e2, gt(this), t2), t2);
        }) : this.each(function() {
          var e2, t3, n2, r2;
          if (a2) {
            t3 = 0, n2 = S(this), r2 = vt(i2);
            while (e2 = r2[t3++])
              n2.hasClass(e2) ? n2.removeClass(e2) : n2.addClass(e2);
          } else
            i2 !== void 0 && o2 !== "boolean" || ((e2 = gt(this)) && Y.set(this, "__className__", e2), this.setAttribute && this.setAttribute("class", e2 || i2 === false ? "" : Y.get(this, "__className__") || ""));
        });
      }, hasClass: function(e2) {
        var t2, n2, r2 = 0;
        t2 = " " + e2 + " ";
        while (n2 = this[r2++])
          if (n2.nodeType === 1 && -1 < (" " + ht(gt(n2)) + " ").indexOf(t2))
            return true;
        return false;
      }});
      var yt = /\r/g;
      S.fn.extend({val: function(n2) {
        var r2, e2, i2, t2 = this[0];
        return arguments.length ? (i2 = m(n2), this.each(function(e3) {
          var t3;
          this.nodeType === 1 && ((t3 = i2 ? n2.call(this, e3, S(this).val()) : n2) == null ? t3 = "" : typeof t3 == "number" ? t3 += "" : Array.isArray(t3) && (t3 = S.map(t3, function(e4) {
            return e4 == null ? "" : e4 + "";
          })), (r2 = S.valHooks[this.type] || S.valHooks[this.nodeName.toLowerCase()]) && "set" in r2 && r2.set(this, t3, "value") !== void 0 || (this.value = t3));
        })) : t2 ? (r2 = S.valHooks[t2.type] || S.valHooks[t2.nodeName.toLowerCase()]) && "get" in r2 && (e2 = r2.get(t2, "value")) !== void 0 ? e2 : typeof (e2 = t2.value) == "string" ? e2.replace(yt, "") : e2 == null ? "" : e2 : void 0;
      }}), S.extend({valHooks: {option: {get: function(e2) {
        var t2 = S.find.attr(e2, "value");
        return t2 != null ? t2 : ht(S.text(e2));
      }}, select: {get: function(e2) {
        var t2, n2, r2, i2 = e2.options, o2 = e2.selectedIndex, a2 = e2.type === "select-one", s2 = a2 ? null : [], u2 = a2 ? o2 + 1 : i2.length;
        for (r2 = o2 < 0 ? u2 : a2 ? o2 : 0; r2 < u2; r2++)
          if (((n2 = i2[r2]).selected || r2 === o2) && !n2.disabled && (!n2.parentNode.disabled || !A(n2.parentNode, "optgroup"))) {
            if (t2 = S(n2).val(), a2)
              return t2;
            s2.push(t2);
          }
        return s2;
      }, set: function(e2, t2) {
        var n2, r2, i2 = e2.options, o2 = S.makeArray(t2), a2 = i2.length;
        while (a2--)
          ((r2 = i2[a2]).selected = -1 < S.inArray(S.valHooks.option.get(r2), o2)) && (n2 = true);
        return n2 || (e2.selectedIndex = -1), o2;
      }}}}), S.each(["radio", "checkbox"], function() {
        S.valHooks[this] = {set: function(e2, t2) {
          if (Array.isArray(t2))
            return e2.checked = -1 < S.inArray(S(e2).val(), t2);
        }}, y.checkOn || (S.valHooks[this].get = function(e2) {
          return e2.getAttribute("value") === null ? "on" : e2.value;
        });
      }), y.focusin = "onfocusin" in C;
      var mt = /^(?:focusinfocus|focusoutblur)$/, xt = function(e2) {
        e2.stopPropagation();
      };
      S.extend(S.event, {trigger: function(e2, t2, n2, r2) {
        var i2, o2, a2, s2, u2, l2, c2, f2, p2 = [n2 || E], d2 = v.call(e2, "type") ? e2.type : e2, h2 = v.call(e2, "namespace") ? e2.namespace.split(".") : [];
        if (o2 = f2 = a2 = n2 = n2 || E, n2.nodeType !== 3 && n2.nodeType !== 8 && !mt.test(d2 + S.event.triggered) && (-1 < d2.indexOf(".") && (d2 = (h2 = d2.split(".")).shift(), h2.sort()), u2 = d2.indexOf(":") < 0 && "on" + d2, (e2 = e2[S.expando] ? e2 : new S.Event(d2, typeof e2 == "object" && e2)).isTrigger = r2 ? 2 : 3, e2.namespace = h2.join("."), e2.rnamespace = e2.namespace ? new RegExp("(^|\\.)" + h2.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, e2.result = void 0, e2.target || (e2.target = n2), t2 = t2 == null ? [e2] : S.makeArray(t2, [e2]), c2 = S.event.special[d2] || {}, r2 || !c2.trigger || c2.trigger.apply(n2, t2) !== false)) {
          if (!r2 && !c2.noBubble && !x(n2)) {
            for (s2 = c2.delegateType || d2, mt.test(s2 + d2) || (o2 = o2.parentNode); o2; o2 = o2.parentNode)
              p2.push(o2), a2 = o2;
            a2 === (n2.ownerDocument || E) && p2.push(a2.defaultView || a2.parentWindow || C);
          }
          i2 = 0;
          while ((o2 = p2[i2++]) && !e2.isPropagationStopped())
            f2 = o2, e2.type = 1 < i2 ? s2 : c2.bindType || d2, (l2 = (Y.get(o2, "events") || Object.create(null))[e2.type] && Y.get(o2, "handle")) && l2.apply(o2, t2), (l2 = u2 && o2[u2]) && l2.apply && V(o2) && (e2.result = l2.apply(o2, t2), e2.result === false && e2.preventDefault());
          return e2.type = d2, r2 || e2.isDefaultPrevented() || c2._default && c2._default.apply(p2.pop(), t2) !== false || !V(n2) || u2 && m(n2[d2]) && !x(n2) && ((a2 = n2[u2]) && (n2[u2] = null), S.event.triggered = d2, e2.isPropagationStopped() && f2.addEventListener(d2, xt), n2[d2](), e2.isPropagationStopped() && f2.removeEventListener(d2, xt), S.event.triggered = void 0, a2 && (n2[u2] = a2)), e2.result;
        }
      }, simulate: function(e2, t2, n2) {
        var r2 = S.extend(new S.Event(), n2, {type: e2, isSimulated: true});
        S.event.trigger(r2, null, t2);
      }}), S.fn.extend({trigger: function(e2, t2) {
        return this.each(function() {
          S.event.trigger(e2, t2, this);
        });
      }, triggerHandler: function(e2, t2) {
        var n2 = this[0];
        if (n2)
          return S.event.trigger(e2, t2, n2, true);
      }}), y.focusin || S.each({focus: "focusin", blur: "focusout"}, function(n2, r2) {
        var i2 = function(e2) {
          S.event.simulate(r2, e2.target, S.event.fix(e2));
        };
        S.event.special[r2] = {setup: function() {
          var e2 = this.ownerDocument || this.document || this, t2 = Y.access(e2, r2);
          t2 || e2.addEventListener(n2, i2, true), Y.access(e2, r2, (t2 || 0) + 1);
        }, teardown: function() {
          var e2 = this.ownerDocument || this.document || this, t2 = Y.access(e2, r2) - 1;
          t2 ? Y.access(e2, r2, t2) : (e2.removeEventListener(n2, i2, true), Y.remove(e2, r2));
        }};
      });
      var bt = C.location, wt = {guid: Date.now()}, Tt = /\?/;
      S.parseXML = function(e2) {
        var t2, n2;
        if (!e2 || typeof e2 != "string")
          return null;
        try {
          t2 = new C.DOMParser().parseFromString(e2, "text/xml");
        } catch (e3) {
        }
        return n2 = t2 && t2.getElementsByTagName("parsererror")[0], t2 && !n2 || S.error("Invalid XML: " + (n2 ? S.map(n2.childNodes, function(e3) {
          return e3.textContent;
        }).join("\n") : e2)), t2;
      };
      var Ct = /\[\]$/, Et = /\r?\n/g, St = /^(?:submit|button|image|reset|file)$/i, kt = /^(?:input|select|textarea|keygen)/i;
      function At(n2, e2, r2, i2) {
        var t2;
        if (Array.isArray(e2))
          S.each(e2, function(e3, t3) {
            r2 || Ct.test(n2) ? i2(n2, t3) : At(n2 + "[" + (typeof t3 == "object" && t3 != null ? e3 : "") + "]", t3, r2, i2);
          });
        else if (r2 || w(e2) !== "object")
          i2(n2, e2);
        else
          for (t2 in e2)
            At(n2 + "[" + t2 + "]", e2[t2], r2, i2);
      }
      S.param = function(e2, t2) {
        var n2, r2 = [], i2 = function(e3, t3) {
          var n3 = m(t3) ? t3() : t3;
          r2[r2.length] = encodeURIComponent(e3) + "=" + encodeURIComponent(n3 == null ? "" : n3);
        };
        if (e2 == null)
          return "";
        if (Array.isArray(e2) || e2.jquery && !S.isPlainObject(e2))
          S.each(e2, function() {
            i2(this.name, this.value);
          });
        else
          for (n2 in e2)
            At(n2, e2[n2], t2, i2);
        return r2.join("&");
      }, S.fn.extend({serialize: function() {
        return S.param(this.serializeArray());
      }, serializeArray: function() {
        return this.map(function() {
          var e2 = S.prop(this, "elements");
          return e2 ? S.makeArray(e2) : this;
        }).filter(function() {
          var e2 = this.type;
          return this.name && !S(this).is(":disabled") && kt.test(this.nodeName) && !St.test(e2) && (this.checked || !pe.test(e2));
        }).map(function(e2, t2) {
          var n2 = S(this).val();
          return n2 == null ? null : Array.isArray(n2) ? S.map(n2, function(e3) {
            return {name: t2.name, value: e3.replace(Et, "\r\n")};
          }) : {name: t2.name, value: n2.replace(Et, "\r\n")};
        }).get();
      }});
      var Nt = /%20/g, jt = /#.*$/, Dt = /([?&])_=[^&]*/, qt = /^(.*?):[ \t]*([^\r\n]*)$/gm, Lt = /^(?:GET|HEAD)$/, Ht = /^\/\//, Ot = {}, Pt = {}, Rt = "*/".concat("*"), Mt = E.createElement("a");
      function It(o2) {
        return function(e2, t2) {
          typeof e2 != "string" && (t2 = e2, e2 = "*");
          var n2, r2 = 0, i2 = e2.toLowerCase().match(P) || [];
          if (m(t2))
            while (n2 = i2[r2++])
              n2[0] === "+" ? (n2 = n2.slice(1) || "*", (o2[n2] = o2[n2] || []).unshift(t2)) : (o2[n2] = o2[n2] || []).push(t2);
        };
      }
      function Wt(t2, i2, o2, a2) {
        var s2 = {}, u2 = t2 === Pt;
        function l2(e2) {
          var r2;
          return s2[e2] = true, S.each(t2[e2] || [], function(e3, t3) {
            var n2 = t3(i2, o2, a2);
            return typeof n2 != "string" || u2 || s2[n2] ? u2 ? !(r2 = n2) : void 0 : (i2.dataTypes.unshift(n2), l2(n2), false);
          }), r2;
        }
        return l2(i2.dataTypes[0]) || !s2["*"] && l2("*");
      }
      function Ft(e2, t2) {
        var n2, r2, i2 = S.ajaxSettings.flatOptions || {};
        for (n2 in t2)
          t2[n2] !== void 0 && ((i2[n2] ? e2 : r2 || (r2 = {}))[n2] = t2[n2]);
        return r2 && S.extend(true, e2, r2), e2;
      }
      Mt.href = bt.href, S.extend({active: 0, lastModified: {}, etag: {}, ajaxSettings: {url: bt.href, type: "GET", isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(bt.protocol), global: true, processData: true, async: true, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: {"*": Rt, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript"}, contents: {xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/}, responseFields: {xml: "responseXML", text: "responseText", json: "responseJSON"}, converters: {"* text": String, "text html": true, "text json": JSON.parse, "text xml": S.parseXML}, flatOptions: {url: true, context: true}}, ajaxSetup: function(e2, t2) {
        return t2 ? Ft(Ft(e2, S.ajaxSettings), t2) : Ft(S.ajaxSettings, e2);
      }, ajaxPrefilter: It(Ot), ajaxTransport: It(Pt), ajax: function(e2, t2) {
        typeof e2 == "object" && (t2 = e2, e2 = void 0), t2 = t2 || {};
        var c2, f2, p2, n2, d2, r2, h2, g2, i2, o2, v2 = S.ajaxSetup({}, t2), y2 = v2.context || v2, m2 = v2.context && (y2.nodeType || y2.jquery) ? S(y2) : S.event, x2 = S.Deferred(), b2 = S.Callbacks("once memory"), w2 = v2.statusCode || {}, a2 = {}, s2 = {}, u2 = "canceled", T2 = {readyState: 0, getResponseHeader: function(e3) {
          var t3;
          if (h2) {
            if (!n2) {
              n2 = {};
              while (t3 = qt.exec(p2))
                n2[t3[1].toLowerCase() + " "] = (n2[t3[1].toLowerCase() + " "] || []).concat(t3[2]);
            }
            t3 = n2[e3.toLowerCase() + " "];
          }
          return t3 == null ? null : t3.join(", ");
        }, getAllResponseHeaders: function() {
          return h2 ? p2 : null;
        }, setRequestHeader: function(e3, t3) {
          return h2 == null && (e3 = s2[e3.toLowerCase()] = s2[e3.toLowerCase()] || e3, a2[e3] = t3), this;
        }, overrideMimeType: function(e3) {
          return h2 == null && (v2.mimeType = e3), this;
        }, statusCode: function(e3) {
          var t3;
          if (e3)
            if (h2)
              T2.always(e3[T2.status]);
            else
              for (t3 in e3)
                w2[t3] = [w2[t3], e3[t3]];
          return this;
        }, abort: function(e3) {
          var t3 = e3 || u2;
          return c2 && c2.abort(t3), l2(0, t3), this;
        }};
        if (x2.promise(T2), v2.url = ((e2 || v2.url || bt.href) + "").replace(Ht, bt.protocol + "//"), v2.type = t2.method || t2.type || v2.method || v2.type, v2.dataTypes = (v2.dataType || "*").toLowerCase().match(P) || [""], v2.crossDomain == null) {
          r2 = E.createElement("a");
          try {
            r2.href = v2.url, r2.href = r2.href, v2.crossDomain = Mt.protocol + "//" + Mt.host != r2.protocol + "//" + r2.host;
          } catch (e3) {
            v2.crossDomain = true;
          }
        }
        if (v2.data && v2.processData && typeof v2.data != "string" && (v2.data = S.param(v2.data, v2.traditional)), Wt(Ot, v2, t2, T2), h2)
          return T2;
        for (i2 in (g2 = S.event && v2.global) && S.active++ == 0 && S.event.trigger("ajaxStart"), v2.type = v2.type.toUpperCase(), v2.hasContent = !Lt.test(v2.type), f2 = v2.url.replace(jt, ""), v2.hasContent ? v2.data && v2.processData && (v2.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && (v2.data = v2.data.replace(Nt, "+")) : (o2 = v2.url.slice(f2.length), v2.data && (v2.processData || typeof v2.data == "string") && (f2 += (Tt.test(f2) ? "&" : "?") + v2.data, delete v2.data), v2.cache === false && (f2 = f2.replace(Dt, "$1"), o2 = (Tt.test(f2) ? "&" : "?") + "_=" + wt.guid++ + o2), v2.url = f2 + o2), v2.ifModified && (S.lastModified[f2] && T2.setRequestHeader("If-Modified-Since", S.lastModified[f2]), S.etag[f2] && T2.setRequestHeader("If-None-Match", S.etag[f2])), (v2.data && v2.hasContent && v2.contentType !== false || t2.contentType) && T2.setRequestHeader("Content-Type", v2.contentType), T2.setRequestHeader("Accept", v2.dataTypes[0] && v2.accepts[v2.dataTypes[0]] ? v2.accepts[v2.dataTypes[0]] + (v2.dataTypes[0] !== "*" ? ", " + Rt + "; q=0.01" : "") : v2.accepts["*"]), v2.headers)
          T2.setRequestHeader(i2, v2.headers[i2]);
        if (v2.beforeSend && (v2.beforeSend.call(y2, T2, v2) === false || h2))
          return T2.abort();
        if (u2 = "abort", b2.add(v2.complete), T2.done(v2.success), T2.fail(v2.error), c2 = Wt(Pt, v2, t2, T2)) {
          if (T2.readyState = 1, g2 && m2.trigger("ajaxSend", [T2, v2]), h2)
            return T2;
          v2.async && 0 < v2.timeout && (d2 = C.setTimeout(function() {
            T2.abort("timeout");
          }, v2.timeout));
          try {
            h2 = false, c2.send(a2, l2);
          } catch (e3) {
            if (h2)
              throw e3;
            l2(-1, e3);
          }
        } else
          l2(-1, "No Transport");
        function l2(e3, t3, n3, r3) {
          var i3, o3, a3, s3, u3, l3 = t3;
          h2 || (h2 = true, d2 && C.clearTimeout(d2), c2 = void 0, p2 = r3 || "", T2.readyState = 0 < e3 ? 4 : 0, i3 = 200 <= e3 && e3 < 300 || e3 === 304, n3 && (s3 = function(e4, t4, n4) {
            var r4, i4, o4, a4, s4 = e4.contents, u4 = e4.dataTypes;
            while (u4[0] === "*")
              u4.shift(), r4 === void 0 && (r4 = e4.mimeType || t4.getResponseHeader("Content-Type"));
            if (r4) {
              for (i4 in s4)
                if (s4[i4] && s4[i4].test(r4)) {
                  u4.unshift(i4);
                  break;
                }
            }
            if (u4[0] in n4)
              o4 = u4[0];
            else {
              for (i4 in n4) {
                if (!u4[0] || e4.converters[i4 + " " + u4[0]]) {
                  o4 = i4;
                  break;
                }
                a4 || (a4 = i4);
              }
              o4 = o4 || a4;
            }
            if (o4)
              return o4 !== u4[0] && u4.unshift(o4), n4[o4];
          }(v2, T2, n3)), !i3 && -1 < S.inArray("script", v2.dataTypes) && S.inArray("json", v2.dataTypes) < 0 && (v2.converters["text script"] = function() {
          }), s3 = function(e4, t4, n4, r4) {
            var i4, o4, a4, s4, u4, l4 = {}, c3 = e4.dataTypes.slice();
            if (c3[1])
              for (a4 in e4.converters)
                l4[a4.toLowerCase()] = e4.converters[a4];
            o4 = c3.shift();
            while (o4)
              if (e4.responseFields[o4] && (n4[e4.responseFields[o4]] = t4), !u4 && r4 && e4.dataFilter && (t4 = e4.dataFilter(t4, e4.dataType)), u4 = o4, o4 = c3.shift()) {
                if (o4 === "*")
                  o4 = u4;
                else if (u4 !== "*" && u4 !== o4) {
                  if (!(a4 = l4[u4 + " " + o4] || l4["* " + o4])) {
                    for (i4 in l4)
                      if ((s4 = i4.split(" "))[1] === o4 && (a4 = l4[u4 + " " + s4[0]] || l4["* " + s4[0]])) {
                        a4 === true ? a4 = l4[i4] : l4[i4] !== true && (o4 = s4[0], c3.unshift(s4[1]));
                        break;
                      }
                  }
                  if (a4 !== true)
                    if (a4 && e4["throws"])
                      t4 = a4(t4);
                    else
                      try {
                        t4 = a4(t4);
                      } catch (e5) {
                        return {state: "parsererror", error: a4 ? e5 : "No conversion from " + u4 + " to " + o4};
                      }
                }
              }
            return {state: "success", data: t4};
          }(v2, s3, T2, i3), i3 ? (v2.ifModified && ((u3 = T2.getResponseHeader("Last-Modified")) && (S.lastModified[f2] = u3), (u3 = T2.getResponseHeader("etag")) && (S.etag[f2] = u3)), e3 === 204 || v2.type === "HEAD" ? l3 = "nocontent" : e3 === 304 ? l3 = "notmodified" : (l3 = s3.state, o3 = s3.data, i3 = !(a3 = s3.error))) : (a3 = l3, !e3 && l3 || (l3 = "error", e3 < 0 && (e3 = 0))), T2.status = e3, T2.statusText = (t3 || l3) + "", i3 ? x2.resolveWith(y2, [o3, l3, T2]) : x2.rejectWith(y2, [T2, l3, a3]), T2.statusCode(w2), w2 = void 0, g2 && m2.trigger(i3 ? "ajaxSuccess" : "ajaxError", [T2, v2, i3 ? o3 : a3]), b2.fireWith(y2, [T2, l3]), g2 && (m2.trigger("ajaxComplete", [T2, v2]), --S.active || S.event.trigger("ajaxStop")));
        }
        return T2;
      }, getJSON: function(e2, t2, n2) {
        return S.get(e2, t2, n2, "json");
      }, getScript: function(e2, t2) {
        return S.get(e2, void 0, t2, "script");
      }}), S.each(["get", "post"], function(e2, i2) {
        S[i2] = function(e3, t2, n2, r2) {
          return m(t2) && (r2 = r2 || n2, n2 = t2, t2 = void 0), S.ajax(S.extend({url: e3, type: i2, dataType: r2, data: t2, success: n2}, S.isPlainObject(e3) && e3));
        };
      }), S.ajaxPrefilter(function(e2) {
        var t2;
        for (t2 in e2.headers)
          t2.toLowerCase() === "content-type" && (e2.contentType = e2.headers[t2] || "");
      }), S._evalUrl = function(e2, t2, n2) {
        return S.ajax({url: e2, type: "GET", dataType: "script", cache: true, async: false, global: false, converters: {"text script": function() {
        }}, dataFilter: function(e3) {
          S.globalEval(e3, t2, n2);
        }});
      }, S.fn.extend({wrapAll: function(e2) {
        var t2;
        return this[0] && (m(e2) && (e2 = e2.call(this[0])), t2 = S(e2, this[0].ownerDocument).eq(0).clone(true), this[0].parentNode && t2.insertBefore(this[0]), t2.map(function() {
          var e3 = this;
          while (e3.firstElementChild)
            e3 = e3.firstElementChild;
          return e3;
        }).append(this)), this;
      }, wrapInner: function(n2) {
        return m(n2) ? this.each(function(e2) {
          S(this).wrapInner(n2.call(this, e2));
        }) : this.each(function() {
          var e2 = S(this), t2 = e2.contents();
          t2.length ? t2.wrapAll(n2) : e2.append(n2);
        });
      }, wrap: function(t2) {
        var n2 = m(t2);
        return this.each(function(e2) {
          S(this).wrapAll(n2 ? t2.call(this, e2) : t2);
        });
      }, unwrap: function(e2) {
        return this.parent(e2).not("body").each(function() {
          S(this).replaceWith(this.childNodes);
        }), this;
      }}), S.expr.pseudos.hidden = function(e2) {
        return !S.expr.pseudos.visible(e2);
      }, S.expr.pseudos.visible = function(e2) {
        return !!(e2.offsetWidth || e2.offsetHeight || e2.getClientRects().length);
      }, S.ajaxSettings.xhr = function() {
        try {
          return new C.XMLHttpRequest();
        } catch (e2) {
        }
      };
      var Bt = {0: 200, 1223: 204}, $t = S.ajaxSettings.xhr();
      y.cors = !!$t && "withCredentials" in $t, y.ajax = $t = !!$t, S.ajaxTransport(function(i2) {
        var o2, a2;
        if (y.cors || $t && !i2.crossDomain)
          return {send: function(e2, t2) {
            var n2, r2 = i2.xhr();
            if (r2.open(i2.type, i2.url, i2.async, i2.username, i2.password), i2.xhrFields)
              for (n2 in i2.xhrFields)
                r2[n2] = i2.xhrFields[n2];
            for (n2 in i2.mimeType && r2.overrideMimeType && r2.overrideMimeType(i2.mimeType), i2.crossDomain || e2["X-Requested-With"] || (e2["X-Requested-With"] = "XMLHttpRequest"), e2)
              r2.setRequestHeader(n2, e2[n2]);
            o2 = function(e3) {
              return function() {
                o2 && (o2 = a2 = r2.onload = r2.onerror = r2.onabort = r2.ontimeout = r2.onreadystatechange = null, e3 === "abort" ? r2.abort() : e3 === "error" ? typeof r2.status != "number" ? t2(0, "error") : t2(r2.status, r2.statusText) : t2(Bt[r2.status] || r2.status, r2.statusText, (r2.responseType || "text") !== "text" || typeof r2.responseText != "string" ? {binary: r2.response} : {text: r2.responseText}, r2.getAllResponseHeaders()));
              };
            }, r2.onload = o2(), a2 = r2.onerror = r2.ontimeout = o2("error"), r2.onabort !== void 0 ? r2.onabort = a2 : r2.onreadystatechange = function() {
              r2.readyState === 4 && C.setTimeout(function() {
                o2 && a2();
              });
            }, o2 = o2("abort");
            try {
              r2.send(i2.hasContent && i2.data || null);
            } catch (e3) {
              if (o2)
                throw e3;
            }
          }, abort: function() {
            o2 && o2();
          }};
      }), S.ajaxPrefilter(function(e2) {
        e2.crossDomain && (e2.contents.script = false);
      }), S.ajaxSetup({accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"}, contents: {script: /\b(?:java|ecma)script\b/}, converters: {"text script": function(e2) {
        return S.globalEval(e2), e2;
      }}}), S.ajaxPrefilter("script", function(e2) {
        e2.cache === void 0 && (e2.cache = false), e2.crossDomain && (e2.type = "GET");
      }), S.ajaxTransport("script", function(n2) {
        var r2, i2;
        if (n2.crossDomain || n2.scriptAttrs)
          return {send: function(e2, t2) {
            r2 = S("<script>").attr(n2.scriptAttrs || {}).prop({charset: n2.scriptCharset, src: n2.url}).on("load error", i2 = function(e3) {
              r2.remove(), i2 = null, e3 && t2(e3.type === "error" ? 404 : 200, e3.type);
            }), E.head.appendChild(r2[0]);
          }, abort: function() {
            i2 && i2();
          }};
      });
      var _t, zt = [], Ut = /(=)\?(?=&|$)|\?\?/;
      S.ajaxSetup({jsonp: "callback", jsonpCallback: function() {
        var e2 = zt.pop() || S.expando + "_" + wt.guid++;
        return this[e2] = true, e2;
      }}), S.ajaxPrefilter("json jsonp", function(e2, t2, n2) {
        var r2, i2, o2, a2 = e2.jsonp !== false && (Ut.test(e2.url) ? "url" : typeof e2.data == "string" && (e2.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && Ut.test(e2.data) && "data");
        if (a2 || e2.dataTypes[0] === "jsonp")
          return r2 = e2.jsonpCallback = m(e2.jsonpCallback) ? e2.jsonpCallback() : e2.jsonpCallback, a2 ? e2[a2] = e2[a2].replace(Ut, "$1" + r2) : e2.jsonp !== false && (e2.url += (Tt.test(e2.url) ? "&" : "?") + e2.jsonp + "=" + r2), e2.converters["script json"] = function() {
            return o2 || S.error(r2 + " was not called"), o2[0];
          }, e2.dataTypes[0] = "json", i2 = C[r2], C[r2] = function() {
            o2 = arguments;
          }, n2.always(function() {
            i2 === void 0 ? S(C).removeProp(r2) : C[r2] = i2, e2[r2] && (e2.jsonpCallback = t2.jsonpCallback, zt.push(r2)), o2 && m(i2) && i2(o2[0]), o2 = i2 = void 0;
          }), "script";
      }), y.createHTMLDocument = ((_t = E.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", _t.childNodes.length === 2), S.parseHTML = function(e2, t2, n2) {
        return typeof e2 != "string" ? [] : (typeof t2 == "boolean" && (n2 = t2, t2 = false), t2 || (y.createHTMLDocument ? ((r2 = (t2 = E.implementation.createHTMLDocument("")).createElement("base")).href = E.location.href, t2.head.appendChild(r2)) : t2 = E), o2 = !n2 && [], (i2 = N.exec(e2)) ? [t2.createElement(i2[1])] : (i2 = xe([e2], t2, o2), o2 && o2.length && S(o2).remove(), S.merge([], i2.childNodes)));
        var r2, i2, o2;
      }, S.fn.load = function(e2, t2, n2) {
        var r2, i2, o2, a2 = this, s2 = e2.indexOf(" ");
        return -1 < s2 && (r2 = ht(e2.slice(s2)), e2 = e2.slice(0, s2)), m(t2) ? (n2 = t2, t2 = void 0) : t2 && typeof t2 == "object" && (i2 = "POST"), 0 < a2.length && S.ajax({url: e2, type: i2 || "GET", dataType: "html", data: t2}).done(function(e3) {
          o2 = arguments, a2.html(r2 ? S("<div>").append(S.parseHTML(e3)).find(r2) : e3);
        }).always(n2 && function(e3, t3) {
          a2.each(function() {
            n2.apply(this, o2 || [e3.responseText, t3, e3]);
          });
        }), this;
      }, S.expr.pseudos.animated = function(t2) {
        return S.grep(S.timers, function(e2) {
          return t2 === e2.elem;
        }).length;
      }, S.offset = {setOffset: function(e2, t2, n2) {
        var r2, i2, o2, a2, s2, u2, l2 = S.css(e2, "position"), c2 = S(e2), f2 = {};
        l2 === "static" && (e2.style.position = "relative"), s2 = c2.offset(), o2 = S.css(e2, "top"), u2 = S.css(e2, "left"), (l2 === "absolute" || l2 === "fixed") && -1 < (o2 + u2).indexOf("auto") ? (a2 = (r2 = c2.position()).top, i2 = r2.left) : (a2 = parseFloat(o2) || 0, i2 = parseFloat(u2) || 0), m(t2) && (t2 = t2.call(e2, n2, S.extend({}, s2))), t2.top != null && (f2.top = t2.top - s2.top + a2), t2.left != null && (f2.left = t2.left - s2.left + i2), "using" in t2 ? t2.using.call(e2, f2) : c2.css(f2);
      }}, S.fn.extend({offset: function(t2) {
        if (arguments.length)
          return t2 === void 0 ? this : this.each(function(e3) {
            S.offset.setOffset(this, t2, e3);
          });
        var e2, n2, r2 = this[0];
        return r2 ? r2.getClientRects().length ? (e2 = r2.getBoundingClientRect(), n2 = r2.ownerDocument.defaultView, {top: e2.top + n2.pageYOffset, left: e2.left + n2.pageXOffset}) : {top: 0, left: 0} : void 0;
      }, position: function() {
        if (this[0]) {
          var e2, t2, n2, r2 = this[0], i2 = {top: 0, left: 0};
          if (S.css(r2, "position") === "fixed")
            t2 = r2.getBoundingClientRect();
          else {
            t2 = this.offset(), n2 = r2.ownerDocument, e2 = r2.offsetParent || n2.documentElement;
            while (e2 && (e2 === n2.body || e2 === n2.documentElement) && S.css(e2, "position") === "static")
              e2 = e2.parentNode;
            e2 && e2 !== r2 && e2.nodeType === 1 && ((i2 = S(e2).offset()).top += S.css(e2, "borderTopWidth", true), i2.left += S.css(e2, "borderLeftWidth", true));
          }
          return {top: t2.top - i2.top - S.css(r2, "marginTop", true), left: t2.left - i2.left - S.css(r2, "marginLeft", true)};
        }
      }, offsetParent: function() {
        return this.map(function() {
          var e2 = this.offsetParent;
          while (e2 && S.css(e2, "position") === "static")
            e2 = e2.offsetParent;
          return e2 || re;
        });
      }}), S.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function(t2, i2) {
        var o2 = i2 === "pageYOffset";
        S.fn[t2] = function(e2) {
          return $2(this, function(e3, t3, n2) {
            var r2;
            if (x(e3) ? r2 = e3 : e3.nodeType === 9 && (r2 = e3.defaultView), n2 === void 0)
              return r2 ? r2[i2] : e3[t3];
            r2 ? r2.scrollTo(o2 ? r2.pageXOffset : n2, o2 ? n2 : r2.pageYOffset) : e3[t3] = n2;
          }, t2, e2, arguments.length);
        };
      }), S.each(["top", "left"], function(e2, n2) {
        S.cssHooks[n2] = Fe(y.pixelPosition, function(e3, t2) {
          if (t2)
            return t2 = We(e3, n2), Pe.test(t2) ? S(e3).position()[n2] + "px" : t2;
        });
      }), S.each({Height: "height", Width: "width"}, function(a2, s2) {
        S.each({padding: "inner" + a2, content: s2, "": "outer" + a2}, function(r2, o2) {
          S.fn[o2] = function(e2, t2) {
            var n2 = arguments.length && (r2 || typeof e2 != "boolean"), i2 = r2 || (e2 === true || t2 === true ? "margin" : "border");
            return $2(this, function(e3, t3, n3) {
              var r3;
              return x(e3) ? o2.indexOf("outer") === 0 ? e3["inner" + a2] : e3.document.documentElement["client" + a2] : e3.nodeType === 9 ? (r3 = e3.documentElement, Math.max(e3.body["scroll" + a2], r3["scroll" + a2], e3.body["offset" + a2], r3["offset" + a2], r3["client" + a2])) : n3 === void 0 ? S.css(e3, t3, i2) : S.style(e3, t3, n3, i2);
            }, s2, n2 ? e2 : void 0, n2);
          };
        });
      }), S.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(e2, t2) {
        S.fn[t2] = function(e3) {
          return this.on(t2, e3);
        };
      }), S.fn.extend({bind: function(e2, t2, n2) {
        return this.on(e2, null, t2, n2);
      }, unbind: function(e2, t2) {
        return this.off(e2, null, t2);
      }, delegate: function(e2, t2, n2, r2) {
        return this.on(t2, e2, n2, r2);
      }, undelegate: function(e2, t2, n2) {
        return arguments.length === 1 ? this.off(e2, "**") : this.off(t2, e2 || "**", n2);
      }, hover: function(e2, t2) {
        return this.mouseenter(e2).mouseleave(t2 || e2);
      }}), S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(e2, n2) {
        S.fn[n2] = function(e3, t2) {
          return 0 < arguments.length ? this.on(n2, null, e3, t2) : this.trigger(n2);
        };
      });
      var Xt = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
      S.proxy = function(e2, t2) {
        var n2, r2, i2;
        if (typeof t2 == "string" && (n2 = e2[t2], t2 = e2, e2 = n2), m(e2))
          return r2 = s.call(arguments, 2), (i2 = function() {
            return e2.apply(t2 || this, r2.concat(s.call(arguments)));
          }).guid = e2.guid = e2.guid || S.guid++, i2;
      }, S.holdReady = function(e2) {
        e2 ? S.readyWait++ : S.ready(true);
      }, S.isArray = Array.isArray, S.parseJSON = JSON.parse, S.nodeName = A, S.isFunction = m, S.isWindow = x, S.camelCase = X, S.type = w, S.now = Date.now, S.isNumeric = function(e2) {
        var t2 = S.type(e2);
        return (t2 === "number" || t2 === "string") && !isNaN(e2 - parseFloat(e2));
      }, S.trim = function(e2) {
        return e2 == null ? "" : (e2 + "").replace(Xt, "");
      }, typeof define == "function" && define.amd && define("jquery", [], function() {
        return S;
      });
      var Vt = C.jQuery, Gt = C.$;
      return S.noConflict = function(e2) {
        return C.$ === S && (C.$ = Gt), e2 && C.jQuery === S && (C.jQuery = Vt), S;
      }, typeof e == "undefined" && (C.jQuery = C.$ = S), S;
    });
  });

  // node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS((exports, module) => {
    /*!
     * jQuery JavaScript Library v3.7.0
     * https://jquery.com/
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2023-05-11T18:29Z
     */
    (function(global, factory) {
      "use strict";
      if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
      "use strict";
      var arr = [];
      var getProto = Object.getPrototypeOf;
      var slice = arr.slice;
      var flat = arr.flat ? function(array) {
        return arr.flat.call(array);
      } : function(array) {
        return arr.concat.apply([], array);
      };
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      var isFunction = function isFunction2(obj) {
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
      };
      var isWindow = function isWindow2(obj) {
        return obj != null && obj === obj.window;
      };
      var document2 = window2.document;
      var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
      };
      function DOMEval(code, node, doc) {
        doc = doc || document2;
        var i, val, script = doc.createElement("script");
        script.text = code;
        if (node) {
          for (i in preservedScriptAttributes) {
            val = node[i] || node.getAttribute && node.getAttribute(i);
            if (val) {
              script.setAttribute(i, val);
            }
          }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
      }
      function toType(obj) {
        if (obj == null) {
          return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
      }
      var version = "3.7.0", rhtmlSuffix = /HTML$/i, jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
      };
      jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function() {
          return slice.call(this);
        },
        get: function(num) {
          if (num == null) {
            return slice.call(this);
          }
          return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function(elems) {
          var ret = jQuery.merge(this.constructor(), elems);
          ret.prevObject = this;
          return ret;
        },
        each: function(callback) {
          return jQuery.each(this, callback);
        },
        map: function(callback) {
          return this.pushStack(jQuery.map(this, function(elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function() {
          return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
          return this.eq(0);
        },
        last: function() {
          return this.eq(-1);
        },
        even: function() {
          return this.pushStack(jQuery.grep(this, function(_elem, i) {
            return (i + 1) % 2;
          }));
        },
        odd: function() {
          return this.pushStack(jQuery.grep(this, function(_elem, i) {
            return i % 2;
          }));
        },
        eq: function(i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function() {
          return this.prevObject || this.constructor();
        },
        push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[i] || {};
          i++;
        }
        if (typeof target !== "object" && !isFunction(target)) {
          target = {};
        }
        if (i === length) {
          target = this;
          i--;
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              copy = options[name];
              if (name === "__proto__" || target === copy) {
                continue;
              }
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                src = target[name];
                if (copyIsArray && !Array.isArray(src)) {
                  clone = [];
                } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                  clone = {};
                } else {
                  clone = src;
                }
                copyIsArray = false;
                target[name] = jQuery.extend(deep, clone, copy);
              } else if (copy !== void 0) {
                target[name] = copy;
              }
            }
          }
        }
        return target;
      };
      jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
          throw new Error(msg);
        },
        noop: function() {
        },
        isPlainObject: function(obj) {
          var proto, Ctor;
          if (!obj || toString.call(obj) !== "[object Object]") {
            return false;
          }
          proto = getProto(obj);
          if (!proto) {
            return true;
          }
          Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },
        globalEval: function(code, options, doc) {
          DOMEval(code, {nonce: options && options.nonce}, doc);
        },
        each: function(obj, callback) {
          var length, i = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          }
          return obj;
        },
        text: function(elem) {
          var node, ret = "", i = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            while (node = elem[i++]) {
              ret += jQuery.text(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            return elem.textContent;
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          }
          return ret;
        },
        makeArray: function(arr2, results) {
          var ret = results || [];
          if (arr2 != null) {
            if (isArrayLike(Object(arr2))) {
              jQuery.merge(ret, typeof arr2 === "string" ? [arr2] : arr2);
            } else {
              push.call(ret, arr2);
            }
          }
          return ret;
        },
        inArray: function(elem, arr2, i) {
          return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
        },
        isXMLDoc: function(elem) {
          var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
          return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
        },
        merge: function(first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j];
          }
          first.length = i;
          return first;
        },
        grep: function(elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }
          return matches;
        },
        map: function(elems, callback, arg) {
          var length, value, i = 0, ret = [];
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          }
          return flat(ret);
        },
        guid: 1,
        support
      });
      if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
      }
      jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });
      function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) {
          return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }
      function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
      }
      var pop = arr.pop;
      var sort = arr.sort;
      var splice = arr.splice;
      var whitespace = "[\\x20\\t\\r\\n\\f]";
      var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");
      jQuery.contains = function(a, b) {
        var bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      };
      var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
      function fcssescape(ch, asCodePoint) {
        if (asCodePoint) {
          if (ch === "\0") {
            return "\uFFFD";
          }
          return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
        }
        return "\\" + ch;
      }
      jQuery.escapeSelector = function(sel) {
        return (sel + "").replace(rcssescape, fcssescape);
      };
      var preferredDoc = document2, pushNative = push;
      (function() {
        var i, Expr, outermostContext, sortInput, hasDuplicate, push2 = pushNative, document3, documentElement2, documentIsHTML, rbuggyQSA, matches, expando = jQuery.expando, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
          ID: new RegExp("^#(" + identifier + ")"),
          CLASS: new RegExp("^\\.(" + identifier + ")"),
          TAG: new RegExp("^(" + identifier + "|[*])"),
          ATTR: new RegExp("^" + attributes),
          PSEUDO: new RegExp("^" + pseudos),
          CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
          bool: new RegExp("^(?:" + booleans + ")$", "i"),
          needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 65536;
          if (nonHex) {
            return nonHex;
          }
          return high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, unloadHandler = function() {
          setDocument();
        }, inDisabledFieldset = addCombinator(function(elem) {
          return elem.disabled === true && nodeName(elem, "fieldset");
        }, {dir: "parentNode", next: "legend"});
        function safeActiveElement() {
          try {
            return document3.activeElement;
          } catch (err) {
          }
        }
        try {
          push2.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
          arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push2 = {
            apply: function(target, els) {
              pushNative.apply(target, slice.call(els));
            },
            call: function(target) {
              pushNative.apply(target, slice.call(arguments, 1));
            }
          };
        }
        function find(selector, context, results, seed) {
          var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
          results = results || [];
          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          }
          if (!seed) {
            setDocument(context);
            context = context || document3;
            if (documentIsHTML) {
              if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                if (m = match[1]) {
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      if (elem.id === m) {
                        push2.call(results, elem);
                        return results;
                      }
                    } else {
                      return results;
                    }
                  } else {
                    if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {
                      push2.call(results, elem);
                      return results;
                    }
                  }
                } else if (match[2]) {
                  push2.apply(results, context.getElementsByTagName(selector));
                  return results;
                } else if ((m = match[3]) && context.getElementsByClassName) {
                  push2.apply(results, context.getElementsByClassName(m));
                  return results;
                }
              }
              if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                newSelector = selector;
                newContext = context;
                if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                  if (newContext != context || !support.scope) {
                    if (nid = context.getAttribute("id")) {
                      nid = jQuery.escapeSelector(nid);
                    } else {
                      context.setAttribute("id", nid = expando);
                    }
                  }
                  groups = tokenize(selector);
                  i2 = groups.length;
                  while (i2--) {
                    groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                  }
                  newSelector = groups.join(",");
                }
                try {
                  push2.apply(results, newContext.querySelectorAll(newSelector));
                  return results;
                } catch (qsaError) {
                  nonnativeSelectorCache(selector, true);
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
        }
        function createCache() {
          var keys = [];
          function cache(key, value) {
            if (keys.push(key + " ") > Expr.cacheLength) {
              delete cache[keys.shift()];
            }
            return cache[key + " "] = value;
          }
          return cache;
        }
        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        function assert(fn) {
          var el = document3.createElement("fieldset");
          try {
            return !!fn(el);
          } catch (e) {
            return false;
          } finally {
            if (el.parentNode) {
              el.parentNode.removeChild(el);
            }
            el = null;
          }
        }
        function createInputPseudo(type) {
          return function(elem) {
            return nodeName(elem, "input") && elem.type === type;
          };
        }
        function createButtonPseudo(type) {
          return function(elem) {
            return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
          };
        }
        function createDisabledPseudo(disabled) {
          return function(elem) {
            if ("form" in elem) {
              if (elem.parentNode && elem.disabled === false) {
                if ("label" in elem) {
                  if ("label" in elem.parentNode) {
                    return elem.parentNode.disabled === disabled;
                  } else {
                    return elem.disabled === disabled;
                  }
                }
                return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
              }
              return elem.disabled === disabled;
            } else if ("label" in elem) {
              return elem.disabled === disabled;
            }
            return false;
          };
        }
        function createPositionalPseudo(fn) {
          return markFunction(function(argument) {
            argument = +argument;
            return markFunction(function(seed, matches2) {
              var j, matchIndexes = fn([], seed.length, argument), i2 = matchIndexes.length;
              while (i2--) {
                if (seed[j = matchIndexes[i2]]) {
                  seed[j] = !(matches2[j] = seed[j]);
                }
              }
            });
          });
        }
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        function setDocument(node) {
          var subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
            return document3;
          }
          document3 = doc;
          documentElement2 = document3.documentElement;
          documentIsHTML = !jQuery.isXMLDoc(document3);
          matches = documentElement2.matches || documentElement2.webkitMatchesSelector || documentElement2.msMatchesSelector;
          if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
            subWindow.addEventListener("unload", unloadHandler);
          }
          support.getById = assert(function(el) {
            documentElement2.appendChild(el).id = jQuery.expando;
            return !document3.getElementsByName || !document3.getElementsByName(jQuery.expando).length;
          });
          support.disconnectedMatch = assert(function(el) {
            return matches.call(el, "*");
          });
          support.scope = assert(function() {
            return document3.querySelectorAll(":scope");
          });
          support.cssHas = assert(function() {
            try {
              document3.querySelector(":has(*,:jqfake)");
              return false;
            } catch (e) {
              return true;
            }
          });
          if (support.getById) {
            Expr.filter.ID = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                return elem.getAttribute("id") === attrId;
              };
            };
            Expr.find.ID = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : [];
              }
            };
          } else {
            Expr.filter.ID = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node2 && node2.value === attrId;
              };
            };
            Expr.find.ID = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var node2, i2, elems, elem = context.getElementById(id);
                if (elem) {
                  node2 = elem.getAttributeNode("id");
                  if (node2 && node2.value === id) {
                    return [elem];
                  }
                  elems = context.getElementsByName(id);
                  i2 = 0;
                  while (elem = elems[i2++]) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                  }
                }
                return [];
              }
            };
          }
          Expr.find.TAG = function(tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag);
            } else {
              return context.querySelectorAll(tag);
            }
          };
          Expr.find.CLASS = function(className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          rbuggyQSA = [];
          assert(function(el) {
            var input;
            documentElement2.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a><select id='" + expando + "-\r\\' disabled='disabled'><option selected=''></option></select>";
            if (!el.querySelectorAll("[selected]").length) {
              rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
            }
            if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
              rbuggyQSA.push("~=");
            }
            if (!el.querySelectorAll("a#" + expando + "+*").length) {
              rbuggyQSA.push(".#.+[+~]");
            }
            if (!el.querySelectorAll(":checked").length) {
              rbuggyQSA.push(":checked");
            }
            input = document3.createElement("input");
            input.setAttribute("type", "hidden");
            el.appendChild(input).setAttribute("name", "D");
            documentElement2.appendChild(el).disabled = true;
            if (el.querySelectorAll(":disabled").length !== 2) {
              rbuggyQSA.push(":enabled", ":disabled");
            }
            input = document3.createElement("input");
            input.setAttribute("name", "");
            el.appendChild(input);
            if (!el.querySelectorAll("[name='']").length) {
              rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
            }
          });
          if (!support.cssHas) {
            rbuggyQSA.push(":has");
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          sortOrder = function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare;
            }
            compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
              if (a === document3 || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
                return -1;
              }
              if (b === document3 || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
                return 1;
              }
              return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
            }
            return compare & 4 ? -1 : 1;
          };
          return document3;
        }
        find.matches = function(expr, elements) {
          return find(expr, null, null, elements);
        };
        find.matchesSelector = function(elem, expr) {
          setDocument(elem);
          if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {
              nonnativeSelectorCache(expr, true);
            }
          }
          return find(expr, document3, null, [elem]).length > 0;
        };
        find.contains = function(context, elem) {
          if ((context.ownerDocument || context) != document3) {
            setDocument(context);
          }
          return jQuery.contains(context, elem);
        };
        find.attr = function(elem, name) {
          if ((elem.ownerDocument || elem) != document3) {
            setDocument(elem);
          }
          var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
          if (val !== void 0) {
            return val;
          }
          return elem.getAttribute(name);
        };
        find.error = function(msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        jQuery.uniqueSort = function(results) {
          var elem, duplicates = [], j = 0, i2 = 0;
          hasDuplicate = !support.sortStable;
          sortInput = !support.sortStable && slice.call(results, 0);
          sort.call(results, sortOrder);
          if (hasDuplicate) {
            while (elem = results[i2++]) {
              if (elem === results[i2]) {
                j = duplicates.push(i2);
              }
            }
            while (j--) {
              splice.call(results, duplicates[j], 1);
            }
          }
          sortInput = null;
          return results;
        };
        jQuery.fn.uniqueSort = function() {
          return this.pushStack(jQuery.uniqueSort(slice.apply(this)));
        };
        Expr = jQuery.expr = {
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": {dir: "parentNode", first: true},
            " ": {dir: "parentNode"},
            "+": {dir: "previousSibling", first: true},
            "~": {dir: "previousSibling"}
          },
          preFilter: {
            ATTR: function(match) {
              match[1] = match[1].replace(runescape, funescape);
              match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
              if (match[2] === "~=") {
                match[3] = " " + match[3] + " ";
              }
              return match.slice(0, 4);
            },
            CHILD: function(match) {
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === "nth") {
                if (!match[3]) {
                  find.error(match[0]);
                }
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                match[5] = +(match[7] + match[8] || match[3] === "odd");
              } else if (match[3]) {
                find.error(match[0]);
              }
              return match;
            },
            PSEUDO: function(match) {
              var excess, unquoted = !match[6] && match[2];
              if (matchExpr.CHILD.test(match[0])) {
                return null;
              }
              if (match[3]) {
                match[2] = match[4] || match[5] || "";
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              }
              return match.slice(0, 3);
            }
          },
          filter: {
            TAG: function(nodeNameSelector) {
              var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function() {
                return true;
              } : function(elem) {
                return nodeName(elem, expectedNodeName);
              };
            },
            CLASS: function(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
              });
            },
            ATTR: function(name, operator, check) {
              return function(elem) {
                var result = find.attr(elem, name);
                if (result == null) {
                  return operator === "!=";
                }
                if (!operator) {
                  return true;
                }
                result += "";
                if (operator === "=") {
                  return result === check;
                }
                if (operator === "!=") {
                  return result !== check;
                }
                if (operator === "^=") {
                  return check && result.indexOf(check) === 0;
                }
                if (operator === "*=") {
                  return check && result.indexOf(check) > -1;
                }
                if (operator === "$=") {
                  return check && result.slice(-check.length) === check;
                }
                if (operator === "~=") {
                  return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
                }
                if (operator === "|=") {
                  return result === check || result.slice(0, check.length + 1) === check + "-";
                }
                return false;
              };
            },
            CHILD: function(type, what, _argument, first, last) {
              var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
              return first === 1 && last === 0 ? function(elem) {
                return !!elem.parentNode;
              } : function(elem, _context, xml) {
                var cache, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                if (parent) {
                  if (simple) {
                    while (dir2) {
                      node = elem;
                      while (node = node[dir2]) {
                        if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                          return false;
                        }
                      }
                      start = dir2 = type === "only" && !start && "nextSibling";
                    }
                    return true;
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  if (forward && useCache) {
                    outerCache = parent[expando] || (parent[expando] = {});
                    cache = outerCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        outerCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else {
                    if (useCache) {
                      outerCache = elem[expando] || (elem[expando] = {});
                      cache = outerCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex;
                    }
                    if (diff === false) {
                      while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            outerCache[type] = [dirruns, diff];
                          }
                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0;
                }
              };
            },
            PSEUDO: function(pseudo, argument) {
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);
              if (fn[expando]) {
                return fn(argument);
              }
              if (fn.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                  var idx, matched = fn(seed, argument), i2 = matched.length;
                  while (i2--) {
                    idx = indexOf.call(seed, matched[i2]);
                    seed[idx] = !(matches2[idx] = matched[i2]);
                  }
                }) : function(elem) {
                  return fn(elem, 0, args);
                };
              }
              return fn;
            }
          },
          pseudos: {
            not: markFunction(function(selector) {
              var input = [], results = [], matcher = compile(selector.replace(rtrimCSS, "$1"));
              return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                while (i2--) {
                  if (elem = unmatched[i2]) {
                    seed[i2] = !(matches2[i2] = elem);
                  }
                }
              }) : function(elem, _context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                input[0] = null;
                return !results.pop();
              };
            }),
            has: markFunction(function(selector) {
              return function(elem) {
                return find(selector, elem).length > 0;
              };
            }),
            contains: markFunction(function(text) {
              text = text.replace(runescape, funescape);
              return function(elem) {
                return (elem.textContent || jQuery.text(elem)).indexOf(text) > -1;
              };
            }),
            lang: markFunction(function(lang) {
              if (!ridentifier.test(lang || "")) {
                find.error("unsupported lang: " + lang);
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function(elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false;
              };
            }),
            target: function(elem) {
              var hash = window2.location && window2.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            root: function(elem) {
              return elem === documentElement2;
            },
            focus: function(elem) {
              return elem === safeActiveElement() && document3.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            enabled: createDisabledPseudo(false),
            disabled: createDisabledPseudo(true),
            checked: function(elem) {
              return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
            },
            selected: function(elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex;
              }
              return elem.selected === true;
            },
            empty: function(elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }
              return true;
            },
            parent: function(elem) {
              return !Expr.pseudos.empty(elem);
            },
            header: function(elem) {
              return rheader.test(elem.nodeName);
            },
            input: function(elem) {
              return rinputs.test(elem.nodeName);
            },
            button: function(elem) {
              return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
            },
            text: function(elem) {
              var attr;
              return nodeName(elem, "input") && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            first: createPositionalPseudo(function() {
              return [0];
            }),
            last: createPositionalPseudo(function(_matchIndexes, length) {
              return [length - 1];
            }),
            eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            even: createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 0;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            odd: createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 1;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            lt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2;
              if (argument < 0) {
                i2 = argument + length;
              } else if (argument > length) {
                i2 = length;
              } else {
                i2 = argument;
              }
              for (; --i2 >= 0; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            gt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2 = argument < 0 ? argument + length : argument;
              for (; ++i2 < length; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            })
          }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in {radio: true, checkbox: true, file: true, password: true, image: true}) {
          Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {submit: true, reset: true}) {
          Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                soFar = soFar.slice(match[0].length) || soFar;
              }
              groups.push(tokens = []);
            }
            matched = false;
            if (match = rleadingCombinator.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: match[0].replace(rtrimCSS, " ")
              });
              soFar = soFar.slice(matched.length);
            }
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }
            if (!matched) {
              break;
            }
          }
          if (parseOnly) {
            return soFar.length;
          }
          return soFar ? find.error(selector) : tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
          var i2 = 0, len = tokens.length, selector = "";
          for (; i2 < len; i2++) {
            selector += tokens[i2].value;
          }
          return selector;
        }
        function addCombinator(matcher, combinator, base) {
          var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
          return combinator.first ? function(elem, context, xml) {
            while (elem = elem[dir2]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }
            return false;
          } : function(elem, context, xml) {
            var oldCache, outerCache, newCache = [dirruns, doneName];
            if (xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  if (skip && nodeName(elem, skip)) {
                    elem = elem[dir2] || elem;
                  } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    return newCache[2] = oldCache[2];
                  } else {
                    outerCache[key] = newCache;
                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              }
            }
            return false;
          };
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function(elem, context, xml) {
            var i2 = matchers.length;
            while (i2--) {
              if (!matchers[i2](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
          var i2 = 0, len = contexts.length;
          for (; i2 < len; i2++) {
            find(selector, contexts[i2], results);
          }
          return results;
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
          for (; i2 < len; i2++) {
            if (elem = unmatched[i2]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i2);
                }
              }
            }
          }
          return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }
          return markFunction(function(seed, results, context, xml) {
            var temp, i2, elem, matcherOut, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
            if (matcher) {
              matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results;
              matcher(matcherIn, matcherOut, context, xml);
            } else {
              matcherOut = matcherIn;
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              i2 = temp.length;
              while (i2--) {
                if (elem = temp[i2]) {
                  matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = [];
                  i2 = matcherOut.length;
                  while (i2--) {
                    if (elem = matcherOut[i2]) {
                      temp.push(matcherIn[i2] = elem);
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml);
                }
                i2 = matcherOut.length;
                while (i2--) {
                  if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i2]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push2.apply(results, matcherOut);
              }
            }
          });
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
            return elem === checkContext;
          }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
            return indexOf.call(checkContext, elem) > -1;
          }, implicitRelative, true), matchers = [function(elem, context, xml) {
            var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            checkContext = null;
            return ret;
          }];
          for (; i2 < len; i2++) {
            if (matcher = Expr.relative[tokens[i2].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
              if (matcher[expando]) {
                j = ++i2;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }
                return setMatcher(i2 > 1 && elementMatcher(matchers), i2 > 1 && toSelector(tokens.slice(0, i2 - 1).concat({value: tokens[i2 - 2].type === " " ? "*" : ""})).replace(rtrimCSS, "$1"), matcher, i2 < j && matcherFromTokens(tokens.slice(i2, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context == document3 || context || outermost;
            }
            for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
              if (byElement && elem) {
                j = 0;
                if (!context && elem.ownerDocument != document3) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context || document3, xml)) {
                    push2.call(results, elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              if (bySet) {
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            matchedCount += i2;
            if (bySet && i2 !== matchedCount) {
              j = 0;
              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }
              if (seed) {
                if (matchedCount > 0) {
                  while (i2--) {
                    if (!(unmatched[i2] || setMatched[i2])) {
                      setMatched[i2] = pop.call(results);
                    }
                  }
                }
                setMatched = condense(setMatched);
              }
              push2.apply(results, setMatched);
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                jQuery.uniqueSort(results);
              }
            }
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }
            return unmatched;
          };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        function compile(selector, match) {
          var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
          if (!cached) {
            if (!match) {
              match = tokenize(selector);
            }
            i2 = match.length;
            while (i2--) {
              cached = matcherFromTokens(match[i2]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            cached.selector = selector;
          }
          return cached;
        }
        function select(selector, context, results, seed) {
          var i2, tokens, token, type, find2, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          if (match.length === 1) {
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
              if (!context) {
                return results;
              } else if (compiled) {
                context = context.parentNode;
              }
              selector = selector.slice(tokens.shift().value.length);
            }
            i2 = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
            while (i2--) {
              token = tokens[i2];
              if (Expr.relative[type = token.type]) {
                break;
              }
              if (find2 = Expr.find[type]) {
                if (seed = find2(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  tokens.splice(i2, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push2.apply(results, seed);
                    return results;
                  }
                  break;
                }
              }
            }
          }
          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results;
        }
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        setDocument();
        support.sortDetached = assert(function(el) {
          return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
        });
        jQuery.find = find;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = jQuery.uniqueSort;
        find.compile = compile;
        find.select = select;
        find.setDocument = setDocument;
        find.escape = jQuery.escapeSelector;
        find.getText = jQuery.text;
        find.isXML = jQuery.isXMLDoc;
        find.selectors = jQuery.expr;
        find.support = jQuery.support;
        find.uniqueSort = jQuery.uniqueSort;
      })();
      var dir = function(elem, dir2, until) {
        var matched = [], truncate = until !== void 0;
        while ((elem = elem[dir2]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break;
            }
            matched.push(elem);
          }
        }
        return matched;
      };
      var siblings = function(n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n);
          }
        }
        return matched;
      };
      var rneedsContext = jQuery.expr.match.needsContext;
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
          return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        }
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
          });
        }
        if (typeof qualifier !== "string") {
          return jQuery.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
          });
        }
        return jQuery.filter(qualifier, elements, not);
      }
      jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ":not(" + expr + ")";
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem2) {
          return elem2.nodeType === 1;
        }));
      };
      jQuery.fn.extend({
        find: function(selector) {
          var i, ret, len = this.length, self = this;
          if (typeof selector !== "string") {
            return this.pushStack(jQuery(selector).filter(function() {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }
          ret = this.pushStack([]);
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
          return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
      });
      var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function(selector, context, root) {
        var match, elem;
        if (!selector) {
          return this;
        }
        root = root || rootjQuery;
        if (typeof selector === "string") {
          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
            match = [null, selector, null];
          } else {
            match = rquickExpr.exec(selector);
          }
          if (match && (match[1] || !context)) {
            if (match[1]) {
              context = context instanceof jQuery ? context[0] : context;
              jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document2, true));
              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                for (match in context) {
                  if (isFunction(this[match])) {
                    this[match](context[match]);
                  } else {
                    this.attr(match, context[match]);
                  }
                }
              }
              return this;
            } else {
              elem = document2.getElementById(match[2]);
              if (elem) {
                this[0] = elem;
                this.length = 1;
              }
              return this;
            }
          } else if (!context || context.jquery) {
            return (context || root).find(selector);
          } else {
            return this.constructor(context).find(selector);
          }
        } else if (selector.nodeType) {
          this[0] = selector;
          this.length = 1;
          return this;
        } else if (isFunction(selector)) {
          return root.ready !== void 0 ? root.ready(selector) : selector(jQuery);
        }
        return jQuery.makeArray(selector, this);
      };
      init.prototype = jQuery.fn;
      rootjQuery = jQuery(document2);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
      jQuery.fn.extend({
        has: function(target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function() {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function(selectors, context) {
          var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break;
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function(elem) {
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          }
          if (typeof elem === "string") {
            return indexOf.call(jQuery(elem), this[0]);
          }
          return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });
      function sibling(cur, dir2) {
        while ((cur = cur[dir2]) && cur.nodeType !== 1) {
        }
        return cur;
      }
      jQuery.each({
        parent: function(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, _i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, _i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, _i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
          return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
          return siblings(elem.firstChild);
        },
        contents: function(elem) {
          if (elem.contentDocument != null && getProto(elem.contentDocument)) {
            return elem.contentDocument;
          }
          if (nodeName(elem, "template")) {
            elem = elem.content || elem;
          }
          return jQuery.merge([], elem.childNodes);
        }
      }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== "Until") {
            selector = until;
          }
          if (selector && typeof selector === "string") {
            matched = jQuery.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched);
            }
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
          object[flag] = true;
        });
        return object;
      }
      jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
          locked = locked || options.once;
          fired = firing = true;
          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();
            while (++firingIndex < list.length) {
              if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                firingIndex = list.length;
                memory = false;
              }
            }
          }
          if (!options.memory) {
            memory = false;
          }
          firing = false;
          if (locked) {
            if (memory) {
              list = [];
            } else {
              list = "";
            }
          }
        }, self = {
          add: function() {
            if (list) {
              if (memory && !firing) {
                firingIndex = list.length - 1;
                queue.push(memory);
              }
              (function add(args) {
                jQuery.each(args, function(_, arg) {
                  if (isFunction(arg)) {
                    if (!options.unique || !self.has(arg)) {
                      list.push(arg);
                    }
                  } else if (arg && arg.length && toType(arg) !== "string") {
                    add(arg);
                  }
                });
              })(arguments);
              if (memory && !firing) {
                fire();
              }
            }
            return this;
          },
          remove: function() {
            jQuery.each(arguments, function(_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                if (index <= firingIndex) {
                  firingIndex--;
                }
              }
            });
            return this;
          },
          has: function(fn) {
            return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
          },
          empty: function() {
            if (list) {
              list = [];
            }
            return this;
          },
          disable: function() {
            locked = queue = [];
            list = memory = "";
            return this;
          },
          disabled: function() {
            return !list;
          },
          lock: function() {
            locked = queue = [];
            if (!memory && !firing) {
              list = memory = "";
            }
            return this;
          },
          locked: function() {
            return !!locked;
          },
          fireWith: function(context, args) {
            if (!locked) {
              args = args || [];
              args = [context, args.slice ? args.slice() : args];
              queue.push(args);
              if (!firing) {
                fire();
              }
            }
            return this;
          },
          fire: function() {
            self.fireWith(this, arguments);
            return this;
          },
          fired: function() {
            return !!fired;
          }
        };
        return self;
      };
      function Identity(v) {
        return v;
      }
      function Thrower(ex) {
        throw ex;
      }
      function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
          if (value && isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject);
          } else if (value && isFunction(method = value.then)) {
            method.call(value, resolve, reject);
          } else {
            resolve.apply(void 0, [value].slice(noValue));
          }
        } catch (value2) {
          reject.apply(void 0, [value2]);
        }
      }
      jQuery.extend({
        Deferred: function(func) {
          var tuples = [
            [
              "notify",
              "progress",
              jQuery.Callbacks("memory"),
              jQuery.Callbacks("memory"),
              2
            ],
            [
              "resolve",
              "done",
              jQuery.Callbacks("once memory"),
              jQuery.Callbacks("once memory"),
              0,
              "resolved"
            ],
            [
              "reject",
              "fail",
              jQuery.Callbacks("once memory"),
              jQuery.Callbacks("once memory"),
              1,
              "rejected"
            ]
          ], state = "pending", promise = {
            state: function() {
              return state;
            },
            always: function() {
              deferred.done(arguments).fail(arguments);
              return this;
            },
            catch: function(fn) {
              return promise.then(null, fn);
            },
            pipe: function() {
              var fns = arguments;
              return jQuery.Deferred(function(newDefer) {
                jQuery.each(tuples, function(_i, tuple) {
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                  deferred[tuple[1]](function() {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            then: function(onFulfilled, onRejected, onProgress) {
              var maxDepth = 0;
              function resolve(depth, deferred2, handler, special) {
                return function() {
                  var that = this, args = arguments, mightThrow = function() {
                    var returned, then;
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);
                    if (returned === deferred2.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }
                    then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                    if (isFunction(then)) {
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special));
                      } else {
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special), resolve(maxDepth, deferred2, Identity, deferred2.notifyWith));
                      }
                    } else {
                      if (handler !== Identity) {
                        that = void 0;
                        args = [returned];
                      }
                      (special || deferred2.resolveWith)(that, args);
                    }
                  }, process = special ? mightThrow : function() {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (jQuery.Deferred.exceptionHook) {
                        jQuery.Deferred.exceptionHook(e, process.error);
                      }
                      if (depth + 1 >= maxDepth) {
                        if (handler !== Thrower) {
                          that = void 0;
                          args = [e];
                        }
                        deferred2.rejectWith(that, args);
                      }
                    }
                  };
                  if (depth) {
                    process();
                  } else {
                    if (jQuery.Deferred.getErrorHook) {
                      process.error = jQuery.Deferred.getErrorHook();
                    } else if (jQuery.Deferred.getStackHook) {
                      process.error = jQuery.Deferred.getStackHook();
                    }
                    window2.setTimeout(process);
                  }
                };
              }
              return jQuery.Deferred(function(newDefer) {
                tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
              }).promise();
            },
            promise: function(obj) {
              return obj != null ? jQuery.extend(obj, promise) : promise;
            }
          }, deferred = {};
          jQuery.each(tuples, function(i, tuple) {
            var list = tuple[2], stateString = tuple[5];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(function() {
                state = stateString;
              }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
            }
            list.add(tuple[3].fire);
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
              return this;
            };
            deferred[tuple[0] + "With"] = list.fireWith;
          });
          promise.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        when: function(singleValue) {
          var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery.Deferred(), updateFunc = function(i2) {
            return function(value) {
              resolveContexts[i2] = this;
              resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
              if (!--remaining) {
                primary.resolveWith(resolveContexts, resolveValues);
              }
            };
          };
          if (remaining <= 1) {
            adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);
            if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
              return primary.then();
            }
          }
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), primary.reject);
          }
          return primary.promise();
        }
      });
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery.Deferred.exceptionHook = function(error, asyncError) {
        if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
          window2.console.warn("jQuery.Deferred exception: " + error.message, error.stack, asyncError);
        }
      };
      jQuery.readyException = function(error) {
        window2.setTimeout(function() {
          throw error;
        });
      };
      var readyList = jQuery.Deferred();
      jQuery.fn.ready = function(fn) {
        readyList.then(fn).catch(function(error) {
          jQuery.readyException(error);
        });
        return this;
      };
      jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function(wait) {
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          }
          jQuery.isReady = true;
          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          }
          readyList.resolveWith(document2, [jQuery]);
        }
      });
      jQuery.ready.then = readyList.then;
      function completed() {
        document2.removeEventListener("DOMContentLoaded", completed);
        window2.removeEventListener("load", completed);
        jQuery.ready();
      }
      if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
        window2.setTimeout(jQuery.ready);
      } else {
        document2.addEventListener("DOMContentLoaded", completed);
        window2.addEventListener("load", completed);
      }
      var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType(key) === "object") {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          }
        } else if (value !== void 0) {
          chainable = true;
          if (!isFunction(value)) {
            raw = true;
          }
          if (bulk) {
            if (raw) {
              fn.call(elems, value);
              fn = null;
            } else {
              bulk = fn;
              fn = function(elem, _key, value2) {
                return bulk.call(jQuery(elem), value2);
              };
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
          }
        }
        if (chainable) {
          return elems;
        }
        if (bulk) {
          return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
      };
      var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
      function fcamelCase(_all, letter) {
        return letter.toUpperCase();
      }
      function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
      }
      var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };
      function Data() {
        this.expando = jQuery.expando + Data.uid++;
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function(owner) {
          var value = owner[this.expando];
          if (!value) {
            value = {};
            if (acceptData(owner)) {
              if (owner.nodeType) {
                owner[this.expando] = value;
              } else {
                Object.defineProperty(owner, this.expando, {
                  value,
                  configurable: true
                });
              }
            }
          }
          return value;
        },
        set: function(owner, data, value) {
          var prop, cache = this.cache(owner);
          if (typeof data === "string") {
            cache[camelCase(data)] = value;
          } else {
            for (prop in data) {
              cache[camelCase(prop)] = data[prop];
            }
          }
          return cache;
        },
        get: function(owner, key) {
          return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function(owner, key, value) {
          if (key === void 0 || key && typeof key === "string" && value === void 0) {
            return this.get(owner, key);
          }
          this.set(owner, key, value);
          return value !== void 0 ? value : key;
        },
        remove: function(owner, key) {
          var i, cache = owner[this.expando];
          if (cache === void 0) {
            return;
          }
          if (key !== void 0) {
            if (Array.isArray(key)) {
              key = key.map(camelCase);
            } else {
              key = camelCase(key);
              key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
            }
            i = key.length;
            while (i--) {
              delete cache[key[i]];
            }
          }
          if (key === void 0 || jQuery.isEmptyObject(cache)) {
            if (owner.nodeType) {
              owner[this.expando] = void 0;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function(owner) {
          var cache = owner[this.expando];
          return cache !== void 0 && !jQuery.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data();
      var dataUser = new Data();
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data) {
        if (data === "true") {
          return true;
        }
        if (data === "false") {
          return false;
        }
        if (data === "null") {
          return null;
        }
        if (data === +data + "") {
          return +data;
        }
        if (rbrace.test(data)) {
          return JSON.parse(data);
        }
        return data;
      }
      function dataAttr(elem, key, data) {
        var name;
        if (data === void 0 && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === "string") {
            try {
              data = getData(data);
            } catch (e) {
            }
            dataUser.set(elem, key, data);
          } else {
            data = void 0;
          }
        }
        return data;
      }
      jQuery.extend({
        hasData: function(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
          return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
          dataUser.remove(elem, name);
        },
        _data: function(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
          dataPriv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function(key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          if (key === void 0) {
            if (this.length) {
              data = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i = attrs.length;
                while (i--) {
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf("data-") === 0) {
                      name = camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }
                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }
            return data;
          }
          if (typeof key === "object") {
            return this.each(function() {
              dataUser.set(this, key);
            });
          }
          return access(this, function(value2) {
            var data2;
            if (elem && value2 === void 0) {
              data2 = dataUser.get(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              data2 = dataAttr(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              return;
            }
            this.each(function() {
              dataUser.set(this, key, value2);
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
          return this.each(function() {
            dataUser.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue: function(elem, type, data) {
          var queue;
          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type);
            if (data) {
              if (!queue || Array.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },
        dequeue: function(elem, type) {
          type = type || "fx";
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
            jQuery.dequeue(elem, type);
          };
          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }
          if (fn) {
            if (type === "fx") {
              queue.unshift("inprogress");
            }
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        _queueHooks: function(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue: function(type, data) {
          var setter = 2;
          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }
          return data === void 0 ? this : this.each(function() {
            var queue = jQuery.queue(this, type, data);
            jQuery._queueHooks(this, type);
            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function(type) {
          return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
            if (!--count) {
              defer.resolveWith(elements, [elements]);
            }
          };
          if (typeof type !== "string") {
            obj = type;
            type = void 0;
          }
          type = type || "fx";
          while (i--) {
            tmp = dataPriv.get(elements[i], type + "queueHooks");
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var documentElement = document2.documentElement;
      var isAttached = function(elem) {
        return jQuery.contains(elem.ownerDocument, elem);
      }, composed = {composed: true};
      if (documentElement.getRootNode) {
        isAttached = function(elem) {
          return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
      }
      var isHiddenWithinTree = function(elem, el) {
        elem = el || elem;
        return elem.style.display === "none" || elem.style.display === "" && isAttached(elem) && jQuery.css(elem, "display") === "none";
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
          return tween.cur();
        } : function() {
          return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          initial = initial / 2;
          unit = unit || initialInUnit[3];
          initialInUnit = +initial || 1;
          while (maxIterations--) {
            jQuery.style(elem, prop, initialInUnit + unit);
            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
              maxIterations = 0;
            }
            initialInUnit = initialInUnit / scale;
          }
          initialInUnit = initialInUnit * 2;
          jQuery.style(elem, prop, initialInUnit + unit);
          valueParts = valueParts || [];
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }
        return adjusted;
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
        if (display) {
          return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName2));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") {
          display = "block";
        }
        defaultDisplayMap[nodeName2] = display;
        return display;
      }
      function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          display = elem.style.display;
          if (show) {
            if (display === "none") {
              values[index] = dataPriv.get(elem, "display") || null;
              if (!values[index]) {
                elem.style.display = "";
              }
            }
            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem);
            }
          } else {
            if (display !== "none") {
              values[index] = "none";
              dataPriv.set(elem, "display", display);
            }
          }
        }
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index];
          }
        }
        return elements;
      }
      jQuery.fn.extend({
        show: function() {
          return showHide(this, true);
        },
        hide: function() {
          return showHide(this);
        },
        toggle: function(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }
          return this.each(function() {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
      var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
      (function() {
        var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
      })();
      var wrapMap = {
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      if (!support.option) {
        wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
      }
      function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
          ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
          ret = context.querySelectorAll(tag || "*");
        } else {
          ret = [];
        }
        if (tag === void 0 || tag && nodeName(context, tag)) {
          return jQuery.merge([context], ret);
        }
        return ret;
      }
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
          elem = elems[i];
          if (elem || elem === 0) {
            if (toType(elem) === "object") {
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem));
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div"));
              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild;
              }
              jQuery.merge(nodes, tmp.childNodes);
              tmp = fragment.firstChild;
              tmp.textContent = "";
            }
          }
        }
        fragment.textContent = "";
        i = 0;
        while (elem = nodes[i++]) {
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }
            continue;
          }
          attached = isAttached(elem);
          tmp = getAll(fragment.appendChild(elem), "script");
          if (attached) {
            setGlobalEval(tmp);
          }
          if (scripts) {
            j = 0;
            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }
        return fragment;
      }
      var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue() {
        return true;
      }
      function returnFalse() {
        return false;
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === "object") {
          if (typeof selector !== "string") {
            data = data || selector;
            selector = void 0;
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one);
          }
          return elem;
        }
        if (data == null && fn == null) {
          fn = selector;
          data = selector = void 0;
        } else if (fn == null) {
          if (typeof selector === "string") {
            fn = data;
            data = void 0;
          } else {
            fn = data;
            data = selector;
            selector = void 0;
          }
        }
        if (fn === false) {
          fn = returnFalse;
        } else if (!fn) {
          return elem;
        }
        if (one === 1) {
          origFn = fn;
          fn = function(event) {
            jQuery().off(event);
            return origFn.apply(this, arguments);
          };
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
          jQuery.event.add(this, types, fn, data, selector);
        });
      }
      jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          if (!acceptData(elem)) {
            return;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector);
          }
          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = Object.create(null);
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e) {
              return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
            };
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery.event.special[type] || {};
            handleObj = jQuery.extend({
              type,
              origType,
              data,
              handler,
              guid: handler.guid,
              selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery.event.global[type] = true;
          }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return;
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },
        dispatch: function(nativeEvent) {
          var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {};
          args[0] = event;
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i];
          }
          event.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          }
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== void 0) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }
          return event.result;
        },
        handlers: function(event, handlers) {
          var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  sel = handleObj.selector + " ";
                  if (matchedSelectors[sel] === void 0) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj);
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({elem: cur, handlers: matchedHandlers});
                }
              }
            }
          }
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({elem: cur, handlers: handlers.slice(delegateCount)});
          }
          return handlerQueue;
        },
        addProp: function(name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: isFunction(hook) ? function() {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            } : function() {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },
            set: function(value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value
              });
            }
          });
        },
        fix: function(originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
          load: {
            noBubble: true
          },
          click: {
            setup: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click", true);
              }
              return false;
            },
            trigger: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click");
              }
              return true;
            },
            _default: function(event) {
              var target = event.target;
              return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
            }
          },
          beforeunload: {
            postDispatch: function(event) {
              if (event.result !== void 0 && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      };
      function leverageNative(el, type, isSetup) {
        if (!isSetup) {
          if (dataPriv.get(el, type) === void 0) {
            jQuery.event.add(el, type, returnTrue);
          }
          return;
        }
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
          namespace: false,
          handler: function(event) {
            var result, saved = dataPriv.get(this, type);
            if (event.isTrigger & 1 && this[type]) {
              if (!saved) {
                saved = slice.call(arguments);
                dataPriv.set(this, type, saved);
                this[type]();
                result = dataPriv.get(this, type);
                dataPriv.set(this, type, false);
                if (saved !== result) {
                  event.stopImmediatePropagation();
                  event.preventDefault();
                  return result;
                }
              } else if ((jQuery.event.special[type] || {}).delegateType) {
                event.stopPropagation();
              }
            } else if (saved) {
              dataPriv.set(this, type, jQuery.event.trigger(saved[0], saved.slice(1), this));
              event.stopPropagation();
              event.isImmediatePropagationStopped = returnTrue;
            }
          }
        });
      }
      jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };
      jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && src.returnValue === false ? returnTrue : returnFalse;
          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget;
        } else {
          this.type = src;
        }
        if (props) {
          jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery.expando] = true;
      };
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation: function() {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function() {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        char: true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
      }, jQuery.event.addProp);
      jQuery.each({focus: "focusin", blur: "focusout"}, function(type, delegateType) {
        function focusMappedHandler(nativeEvent) {
          if (document2.documentMode) {
            var handle = dataPriv.get(this, "handle"), event = jQuery.event.fix(nativeEvent);
            event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
            event.isSimulated = true;
            handle(nativeEvent);
            if (event.target === event.currentTarget) {
              handle(event);
            }
          } else {
            jQuery.event.simulate(delegateType, nativeEvent.target, jQuery.event.fix(nativeEvent));
          }
        }
        jQuery.event.special[type] = {
          setup: function() {
            var attaches;
            leverageNative(this, type, true);
            if (document2.documentMode) {
              attaches = dataPriv.get(this, delegateType);
              if (!attaches) {
                this.addEventListener(delegateType, focusMappedHandler);
              }
              dataPriv.set(this, delegateType, (attaches || 0) + 1);
            } else {
              return false;
            }
          },
          trigger: function() {
            leverageNative(this, type);
            return true;
          },
          teardown: function() {
            var attaches;
            if (document2.documentMode) {
              attaches = dataPriv.get(this, delegateType) - 1;
              if (!attaches) {
                this.removeEventListener(delegateType, focusMappedHandler);
                dataPriv.remove(this, delegateType);
              } else {
                dataPriv.set(this, delegateType, attaches);
              }
            } else {
              return false;
            }
          },
          _default: function(event) {
            return dataPriv.get(event.target, type);
          },
          delegateType
        };
        jQuery.event.special[delegateType] = {
          setup: function() {
            var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType);
            if (!attaches) {
              if (document2.documentMode) {
                this.addEventListener(delegateType, focusMappedHandler);
              } else {
                doc.addEventListener(type, focusMappedHandler, true);
              }
            }
            dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
          },
          teardown: function() {
            var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType) - 1;
            if (!attaches) {
              if (document2.documentMode) {
                this.removeEventListener(delegateType, focusMappedHandler);
              } else {
                doc.removeEventListener(type, focusMappedHandler, true);
              }
              dataPriv.remove(dataHolder, delegateType);
            } else {
              dataPriv.set(dataHolder, delegateType, attaches);
            }
          }
        };
      });
      jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function(orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function(event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });
      jQuery.fn.extend({
        on: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }
          if (typeof types === "object") {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === "function") {
            fn = selector;
            selector = void 0;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function() {
            jQuery.event.remove(this, types, fn, selector);
          });
        }
      });
      var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
      function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
          return jQuery(elem).children("tbody")[0] || elem;
        }
        return elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
          elem.type = elem.type.slice(5);
        } else {
          elem.removeAttribute("type");
        }
        return elem;
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return;
        }
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.get(src);
          events = pdataOld.events;
          if (events) {
            dataPriv.remove(dest, "handle events");
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        }
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur);
        }
      }
      function fixInput(src, dest) {
        var nodeName2 = dest.nodeName.toLowerCase();
        if (nodeName2 === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked;
        } else if (nodeName2 === "input" || nodeName2 === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }
      function domManip(collection, args, callback, ignored) {
        args = flat(args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
          return collection.each(function(index) {
            var self = collection.eq(index);
            if (valueIsFunction) {
              args[0] = value.call(this, index, self.html());
            }
            domManip(self, args, callback, ignored);
          });
        }
        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first;
          }
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length;
            for (; i < l; i++) {
              node = fragment;
              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true);
                if (hasScripts) {
                  jQuery.merge(scripts, getAll(node, "script"));
                }
              }
              callback.call(collection[i], node, i);
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              jQuery.map(scripts, restoreScript);
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                  if (node.src && (node.type || "").toLowerCase() !== "module") {
                    if (jQuery._evalUrl && !node.noModule) {
                      jQuery._evalUrl(node.src, {
                        nonce: node.nonce || node.getAttribute("nonce")
                      }, doc);
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                  }
                }
              }
            }
          }
        }
        return collection;
      }
      function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node));
          }
          if (node.parentNode) {
            if (keepData && isAttached(node)) {
              setGlobalEval(getAll(node, "script"));
            }
            node.parentNode.removeChild(node);
          }
        }
        return elem;
      }
      jQuery.extend({
        htmlPrefilter: function(html) {
          return html;
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          destElements = getAll(clone, "script");
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          }
          return clone;
        },
        cleanData: function(elems) {
          var data, elem, type, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== void 0; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                elem[dataPriv.expando] = void 0;
              }
              if (elem[dataUser.expando]) {
                elem[dataUser.expando] = void 0;
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function(selector) {
          return remove(this, selector, true);
        },
        remove: function(selector) {
          return remove(this, selector);
        },
        text: function(value) {
          return access(this, function(value2) {
            return value2 === void 0 ? jQuery.text(this) : this.empty().each(function() {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value2;
              }
            });
          }, null, value, arguments.length);
        },
        append: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty: function() {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem, false));
              elem.textContent = "";
            }
          }
          return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function() {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function(value) {
          return access(this, function(value2) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value2 === void 0 && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
              value2 = jQuery.htmlPrefilter(value2);
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value2;
                  }
                }
                elem = 0;
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value2);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function() {
          var ignored = [];
          return domManip(this, arguments, function(elem) {
            var parent = this.parentNode;
            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this);
              }
            }
          }, ignored);
        }
      });
      jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function(name, original) {
        jQuery.fn[name] = function(selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            push.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
      var rcustomProp = /^--/;
      var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window2;
        }
        return view.getComputedStyle(elem);
      };
      var swap = function(elem, options, callback) {
        var ret, name, old = {};
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }
        ret = callback.call(elem);
        for (name in options) {
          elem.style[name] = old[name];
        }
        return ret;
      };
      var rboxStyle = new RegExp(cssExpand.join("|"), "i");
      (function() {
        function computeStyleTests() {
          if (!div) {
            return;
          }
          container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
          div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
          documentElement.appendChild(container).appendChild(div);
          var divStyle = window2.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%";
          reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
          div.style.right = "60%";
          pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
          boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
          div.style.position = "absolute";
          scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
          documentElement.removeChild(container);
          div = null;
        }
        function roundPixelMeasures(measure) {
          return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
        if (!div.style) {
          return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
          boxSizingReliable: function() {
            computeStyleTests();
            return boxSizingReliableVal;
          },
          pixelBoxStyles: function() {
            computeStyleTests();
            return pixelBoxStylesVal;
          },
          pixelPosition: function() {
            computeStyleTests();
            return pixelPositionVal;
          },
          reliableMarginLeft: function() {
            computeStyleTests();
            return reliableMarginLeftVal;
          },
          scrollboxSize: function() {
            computeStyleTests();
            return scrollboxSizeVal;
          },
          reliableTrDimensions: function() {
            var table, tr, trChild, trStyle;
            if (reliableTrDimensionsVal == null) {
              table = document2.createElement("table");
              tr = document2.createElement("tr");
              trChild = document2.createElement("div");
              table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
              tr.style.cssText = "border:1px solid";
              tr.style.height = "1px";
              trChild.style.height = "9px";
              trChild.style.display = "block";
              documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
              trStyle = window2.getComputedStyle(tr);
              reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
              documentElement.removeChild(table);
            }
            return reliableTrDimensionsVal;
          }
        });
      })();
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
          if (isCustomProp && ret) {
            ret = ret.replace(rtrimCSS, "$1") || void 0;
          }
          if (ret === "" && !isAttached(elem)) {
            ret = jQuery.style(elem, name);
          }
          if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }
        return ret !== void 0 ? ret + "" : ret;
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get: function() {
            if (conditionFn()) {
              delete this.get;
              return;
            }
            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }
      var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
      function vendorPropName(name) {
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name;
          }
        }
      }
      function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];
        if (final) {
          return final;
        }
        if (name in emptyStyle) {
          return name;
        }
        return vendorProps[name] = vendorPropName(name) || name;
      }
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = {position: "absolute", visibility: "hidden", display: "block"}, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      };
      function setPositiveNumber(_elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
      }
      function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0, marginDelta = 0;
        if (box === (isBorderBox ? "border" : "content")) {
          return 0;
        }
        for (; i < 4; i += 2) {
          if (box === "margin") {
            marginDelta += jQuery.css(elem, box + cssExpand[i], true, styles);
          }
          if (!isBorderBox) {
            delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            if (box !== "padding") {
              delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } else {
              extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          } else {
            if (box === "content") {
              delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            }
            if (box !== "margin") {
              delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        }
        if (!isBorderBox && computedVal >= 0) {
          delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
        }
        return delta + marginDelta;
      }
      function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
        if (rnumnonpx.test(val)) {
          if (!extra) {
            return val;
          }
          val = "auto";
        }
        if ((!support.boxSizingReliable() && isBorderBox || !support.reliableTrDimensions() && nodeName(elem, "tr") || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
          isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
          valueIsBorderBox = offsetProp in elem;
          if (valueIsBorderBox) {
            val = elem[offsetProp];
          }
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, val) + "px";
      }
      jQuery.extend({
        cssHooks: {
          opacity: {
            get: function(elem, computed) {
              if (computed) {
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },
        cssNumber: {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageSlice: true,
          columnCount: true,
          flexGrow: true,
          flexShrink: true,
          fontWeight: true,
          gridArea: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnStart: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowStart: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          scale: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeMiterlimit: true,
          strokeOpacity: true
        },
        cssProps: {},
        style: function(elem, name, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }
          var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (value !== void 0) {
            type = typeof value;
            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              type = "number";
            }
            if (value == null || value !== value) {
              return;
            }
            if (type === "number" && !isCustomProp) {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
            }
            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            }
            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
              if (isCustomProp) {
                style.setProperty(name, value);
              } else {
                style[name] = value;
              }
            }
          } else {
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
              return ret;
            }
            return style[name];
          }
        },
        css: function(elem, name, extra, styles) {
          var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === void 0) {
            val = curCSS(elem, name, styles);
          }
          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }
          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }
          return val;
        }
      });
      jQuery.each(["height", "width"], function(_i, dimension) {
        jQuery.cssHooks[dimension] = {
          get: function(elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, dimension, extra);
              }) : getWidthOrHeight(elem, dimension, extra);
            }
          },
          set: function(elem, value, extra) {
            var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
            if (isBorderBox && scrollboxSizeBuggy) {
              subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
            }
            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
              elem.style[dimension] = value;
              value = jQuery.css(elem, dimension);
            }
            return setPositiveNumber(elem, value, subtract);
          }
        };
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {marginLeft: 0}, function() {
            return elem.getBoundingClientRect().left;
          })) + "px";
        }
      });
      jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function(value) {
            var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }
            return expanded;
          }
        };
        if (prefix !== "margin") {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery.fn.extend({
        css: function(name, value) {
          return access(this, function(elem, name2, value2) {
            var styles, len, map = {}, i = 0;
            if (Array.isArray(name2)) {
              styles = getStyles(elem);
              len = name2.length;
              for (; i < len; i++) {
                map[name2[i]] = jQuery.css(elem, name2[i], false, styles);
              }
              return map;
            }
            return value2 !== void 0 ? jQuery.style(elem, name2, value2) : jQuery.css(elem, name2);
          }, name, value, arguments.length > 1);
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function(tween) {
            var result;
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            }
            result = jQuery.css(tween.elem, tween.prop, "");
            return !result || result === "auto" ? 0 : result;
          },
          set: function(tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.easing = {
        linear: function(p) {
          return p;
        },
        swing: function(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
      };
      jQuery.fx = Tween.prototype.init;
      jQuery.fx.step = {};
      var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function schedule() {
        if (inProgress) {
          if (document2.hidden === false && window2.requestAnimationFrame) {
            window2.requestAnimationFrame(schedule);
          } else {
            window2.setTimeout(schedule, jQuery.fx.interval);
          }
          jQuery.fx.tick();
        }
      }
      function createFxNow() {
        window2.setTimeout(function() {
          fxNow = void 0;
        });
        return fxNow = Date.now();
      }
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = {height: type};
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            return tween;
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";
            if (value === (hidden ? "hide" : "show")) {
              if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
          return;
        }
        if (isBox && elem.nodeType === 1) {
          opts.overflow = [style.overflow, style.overflowX, style.overflowY];
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, "display");
          }
          display = jQuery.css(elem, "display");
          if (display === "none") {
            if (restoreDisplay) {
              display = restoreDisplay;
            } else {
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, "display");
              showHide([elem]);
            }
          }
          if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
            if (jQuery.css(elem, "float") === "none") {
              if (!propTween) {
                anim.done(function() {
                  style.display = restoreDisplay;
                });
                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === "none" ? "" : display;
                }
              }
              style.display = "inline-block";
            }
          }
        }
        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function() {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }
        propTween = false;
        for (prop in orig) {
          if (!propTween) {
            if (dataShow) {
              if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = dataPriv.access(elem, "fxshow", {display: restoreDisplay});
            }
            if (toggle) {
              dataShow.hidden = !hidden;
            }
            if (hidden) {
              showHide([elem], true);
            }
            anim.done(function() {
              if (!hidden) {
                showHide([elem]);
              }
              dataPriv.remove(elem, "fxshow");
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop]);
              }
            });
          }
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0;
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
          name = camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (Array.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name) {
            props[name] = value;
            delete props[index];
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
          delete tick.elem;
        }), tick = function() {
          if (stopped) {
            return false;
          }
          var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
          for (; index2 < length2; index2++) {
            animation.tweens[index2].run(percent);
          }
          deferred.notifyWith(elem, [animation, percent, remaining]);
          if (percent < 1 && length2) {
            return remaining;
          }
          if (!length2) {
            deferred.notifyWith(elem, [animation, 1, 0]);
          }
          deferred.resolveWith(elem, [animation]);
          return false;
        }, animation = deferred.promise({
          elem,
          props: jQuery.extend({}, properties),
          opts: jQuery.extend(true, {
            specialEasing: {},
            easing: jQuery.easing._default
          }, options),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function(prop, end) {
            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
            animation.tweens.push(tween);
            return tween;
          },
          stop: function(gotoEnd) {
            var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
            if (stopped) {
              return this;
            }
            stopped = true;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(1);
            }
            if (gotoEnd) {
              deferred.notifyWith(elem, [animation, 1, 0]);
              deferred.resolveWith(elem, [animation, gotoEnd]);
            } else {
              deferred.rejectWith(elem, [animation, gotoEnd]);
            }
            return this;
          }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
            }
            return result;
          }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
          elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation;
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          "*": [function(prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },
        tweener: function(props, callback) {
          if (isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnothtmlwhite);
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });
      jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
          opt.duration = 0;
        } else {
          if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration];
            } else {
              opt.duration = jQuery.fx.speeds._default;
            }
          }
        }
        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
          if (isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
          return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({opacity: to}, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
            var anim = Animation(this, jQuery.extend({}, prop), optall);
            if (empty || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };
          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = void 0;
          }
          if (clearQueue) {
            this.queue(type || "fx", []);
          }
          return this.each(function() {
            var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function(type) {
          if (type !== false) {
            type = type || "fx";
          }
          return this.each(function() {
            var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
            data.finish = true;
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      jQuery.each(["toggle", "show", "hide"], function(_i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      });
      jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {opacity: "show"},
        fadeOut: {opacity: "hide"},
        fadeToggle: {opacity: "toggle"}
      }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.timers = [];
      jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = void 0;
      };
      jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function() {
        if (inProgress) {
          return;
        }
        inProgress = true;
        schedule();
      };
      jQuery.fx.stop = function() {
        inProgress = null;
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      };
      jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
          var timeout = window2.setTimeout(next, time);
          hooks.stop = function() {
            window2.clearTimeout(timeout);
          };
        });
      };
      (function() {
        var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        input = document2.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();
      var boolHook, attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
          return this.each(function() {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (typeof elem.getAttribute === "undefined") {
            return jQuery.prop(elem, name, value);
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : void 0);
          }
          if (value !== void 0) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return;
            }
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            elem.setAttribute(name, value + "");
            return value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          ret = jQuery.find.attr(elem, name);
          return ret == null ? void 0 : ret;
        },
        attrHooks: {
          type: {
            set: function(elem, value) {
              if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        },
        removeAttr: function(elem, value) {
          var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name);
            }
          }
        }
      });
      boolHook = {
        set: function(elem, value, name) {
          if (value === false) {
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name2, isXML) {
          var ret, handle, lowercaseName = name2.toLowerCase();
          if (!isXML) {
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle;
          }
          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
          return this.each(function() {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        prop: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }
          if (value !== void 0) {
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            return elem[name] = value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          return elem[name];
        },
        propHooks: {
          tabIndex: {
            get: function(elem) {
              var tabindex = jQuery.find.attr(elem, "tabindex");
              if (tabindex) {
                return parseInt(tabindex, 10);
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0;
              }
              return -1;
            }
          }
        },
        propFix: {
          for: "htmlFor",
          class: "className"
        }
      });
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function(elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          },
          set: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }
      jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
      ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
      });
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }
      function classesToArray(value) {
        if (Array.isArray(value)) {
          return value;
        }
        if (typeof value === "string") {
          return value.match(rnothtmlwhite) || [];
        }
        return [];
      }
      jQuery.fn.extend({
        addClass: function(value) {
          var classNames, cur, curValue, className, i, finalValue;
          if (isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (cur.indexOf(" " + className + " ") < 0) {
                    cur += className + " ";
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        removeClass: function(value) {
          var classNames, cur, curValue, className, i, finalValue;
          if (isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
          }
          if (!arguments.length) {
            return this.attr("class", "");
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  while (cur.indexOf(" " + className + " ") > -1) {
                    cur = cur.replace(" " + className + " ", " ");
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        toggleClass: function(value, stateVal) {
          var classNames, className, i, self, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
          if (isFunction(value)) {
            return this.each(function(i2) {
              jQuery(this).toggleClass(value.call(this, i2, getClass(this), stateVal), stateVal);
            });
          }
          if (typeof stateVal === "boolean" && isValidValue) {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          classNames = classesToArray(value);
          return this.each(function() {
            if (isValidValue) {
              self = jQuery(this);
              for (i = 0; i < classNames.length; i++) {
                className = classNames[i];
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              }
            } else if (value === void 0 || type === "boolean") {
              className = getClass(this);
              if (className) {
                dataPriv.set(this, "__className__", className);
              }
              if (this.setAttribute) {
                this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
              }
            }
          });
        },
        hasClass: function(selector) {
          var className, elem, i = 0;
          className = " " + selector + " ";
          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
              return true;
            }
          }
          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function(value) {
          var hooks, ret, valueIsFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                return ret;
              }
              ret = elem.value;
              if (typeof ret === "string") {
                return ret.replace(rreturn, "");
              }
              return ret == null ? "" : ret;
            }
            return;
          }
          valueIsFunction = isFunction(value);
          return this.each(function(i) {
            var val;
            if (this.nodeType !== 1) {
              return;
            }
            if (valueIsFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (Array.isArray(val)) {
              val = jQuery.map(val, function(value2) {
                return value2 == null ? "" : value2 + "";
              });
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
              this.value = val;
            }
          });
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function(elem) {
              var val = jQuery.find.attr(elem, "value");
              return val != null ? val : stripAndCollapse(jQuery.text(elem));
            }
          },
          select: {
            get: function(elem) {
              var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
              if (index < 0) {
                i = max;
              } else {
                i = one ? index : 0;
              }
              for (; i < max; i++) {
                option = options[i];
                if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                  value = jQuery(option).val();
                  if (one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function(elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }
      });
      jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
          set: function(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      });
      var location = window2.location;
      var nonce = {guid: Date.now()};
      var rquery = /\?/;
      jQuery.parseXML = function(data) {
        var xml, parserErrorElem;
        if (!data || typeof data !== "string") {
          return null;
        }
        try {
          xml = new window2.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
        }
        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
        if (!xml || parserErrorElem) {
          jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
            return el.textContent;
          }).join("\n") : data));
        }
        return xml;
      };
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
        e.stopPropagation();
      };
      jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          cur = lastElement = tmp = elem = elem || document2;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }
          if (type.indexOf(".") > -1) {
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(":") < 0 && "on" + type;
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
          event.result = void 0;
          if (!event.target) {
            event.target = elem;
          }
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          }
          if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document2)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
            }
          }
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            lastElement = cur;
            event.type = i > 1 ? bubbleType : special.bindType || type;
            handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
            if (handle) {
              handle.apply(cur, data);
            }
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault();
              }
            }
          }
          event.type = type;
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery.event.triggered = type;
                if (event.isPropagationStopped()) {
                  lastElement.addEventListener(type, stopPropagationCallback);
                }
                elem[type]();
                if (event.isPropagationStopped()) {
                  lastElement.removeEventListener(type, stopPropagationCallback);
                }
                jQuery.event.triggered = void 0;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event.result;
        },
        simulate: function(type, elem, event) {
          var e = jQuery.extend(new jQuery.Event(), event, {
            type,
            isSimulated: true
          });
          jQuery.event.trigger(e, null, elem);
        }
      });
      jQuery.fn.extend({
        trigger: function(type, data) {
          return this.each(function() {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function(type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      });
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
          jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v);
            } else {
              buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
            }
          });
        } else if (!traditional && toType(obj) === "object") {
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }
        } else {
          add(prefix, obj);
        }
      }
      jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
          var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (a == null) {
          return "";
        }
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          jQuery.each(a, function() {
            add(this.name, this.value);
          });
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }
        return s.join("&");
      };
      jQuery.fn.extend({
        serialize: function() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
          return this.map(function() {
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function() {
            var type = this.type;
            return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function(_i, elem) {
            var val = jQuery(this).val();
            if (val == null) {
              return null;
            }
            if (Array.isArray(val)) {
              return jQuery.map(val, function(val2) {
                return {name: elem.name, value: val2.replace(rCRLF, "\r\n")};
              });
            }
            return {name: elem.name, value: val.replace(rCRLF, "\r\n")};
          }).get();
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
      originAnchor.href = location.href;
      function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (isFunction(func)) {
            while (dataType = dataTypes[i++]) {
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      }
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== void 0) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep);
        }
        return target;
      }
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
          dataTypes.shift();
          if (ct === void 0) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === "*") {
              current = prev;
            } else if (prev !== "*" && prev !== current) {
              conv = converters[prev + " " + current] || converters["* " + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(" ");
                  if (tmp[1] === current) {
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }
        return {state: "success", data: response};
      }
      jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          converters: {
            "* text": String,
            "text html": true,
            "text json": JSON.parse,
            "text xml": jQuery.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function(target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
          if (typeof url === "object") {
            options = url;
            url = void 0;
          }
          options = options || {};
          var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
            readyState: 0,
            getResponseHeader: function(key) {
              var match;
              if (completed2) {
                if (!responseHeaders) {
                  responseHeaders = {};
                  while (match = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                  }
                }
                match = responseHeaders[key.toLowerCase() + " "];
              }
              return match == null ? null : match.join(", ");
            },
            getAllResponseHeaders: function() {
              return completed2 ? responseHeadersString : null;
            },
            setRequestHeader: function(name, value) {
              if (completed2 == null) {
                name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                requestHeaders[name] = value;
              }
              return this;
            },
            overrideMimeType: function(type) {
              if (completed2 == null) {
                s.mimeType = type;
              }
              return this;
            },
            statusCode: function(map) {
              var code;
              if (map) {
                if (completed2) {
                  jqXHR.always(map[jqXHR.status]);
                } else {
                  for (code in map) {
                    statusCode[code] = [statusCode[code], map[code]];
                  }
                }
              }
              return this;
            },
            abort: function(statusText) {
              var finalText = statusText || strAbort;
              if (transport) {
                transport.abort(finalText);
              }
              done(0, finalText);
              return this;
            }
          };
          deferred.promise(jqXHR);
          s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
          s.type = options.method || options.type || s.method || s.type;
          s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
          if (s.crossDomain == null) {
            urlAnchor = document2.createElement("a");
            try {
              urlAnchor.href = s.url;
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e) {
              s.crossDomain = true;
            }
          }
          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery.param(s.data, s.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          if (completed2) {
            return jqXHR;
          }
          fireGlobals = jQuery.event && s.global;
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger("ajaxStart");
          }
          s.type = s.type.toUpperCase();
          s.hasContent = !rnoContent.test(s.type);
          cacheURL = s.url.replace(rhash, "");
          if (!s.hasContent) {
            uncached = s.url.slice(cacheURL.length);
            if (s.data && (s.processData || typeof s.data === "string")) {
              cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
              delete s.data;
            }
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, "$1");
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
            }
            s.url = cacheURL + uncached;
          } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
            s.data = s.data.replace(r20, "+");
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          }
          jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
            return jqXHR.abort();
          }
          strAbort = "abort";
          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error);
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            }
            if (completed2) {
              return jqXHR;
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = window2.setTimeout(function() {
                jqXHR.abort("timeout");
              }, s.timeout);
            }
            try {
              completed2 = false;
              transport.send(requestHeaders, done);
            } catch (e) {
              if (completed2) {
                throw e;
              }
              done(-1, e);
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            if (completed2) {
              return;
            }
            completed2 = true;
            if (timeoutTimer) {
              window2.clearTimeout(timeoutTimer);
            }
            transport = void 0;
            responseHeadersString = headers || "";
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }
            if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
              s.converters["text script"] = function() {
              };
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent";
              } else if (status === 304) {
                statusText = "notmodified";
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              error = statusText;
              if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + "";
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = void 0;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
            }
            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
              if (!--jQuery.active) {
                jQuery.event.trigger("ajaxStop");
              }
            }
          }
          return jqXHR;
        },
        getJSON: function(url, data, callback) {
          return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
          return jQuery.get(url, void 0, callback, "script");
        }
      });
      jQuery.each(["get", "post"], function(_i, method) {
        jQuery[method] = function(url, data, callback, type) {
          if (isFunction(data)) {
            type = type || callback;
            callback = data;
            data = void 0;
          }
          return jQuery.ajax(jQuery.extend({
            url,
            type: method,
            dataType: type,
            data,
            success: callback
          }, jQuery.isPlainObject(url) && url));
        };
      });
      jQuery.ajaxPrefilter(function(s) {
        var i;
        for (i in s.headers) {
          if (i.toLowerCase() === "content-type") {
            s.contentType = s.headers[i] || "";
          }
        }
      });
      jQuery._evalUrl = function(url, options, doc) {
        return jQuery.ajax({
          url,
          type: "GET",
          dataType: "script",
          cache: true,
          async: false,
          global: false,
          converters: {
            "text script": function() {
            }
          },
          dataFilter: function(response) {
            jQuery.globalEval(response, options, doc);
          }
        });
      };
      jQuery.fn.extend({
        wrapAll: function(html) {
          var wrap;
          if (this[0]) {
            if (isFunction(html)) {
              html = html.call(this[0]);
            }
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function() {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function(html) {
          if (isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }
          return this.each(function() {
            var self = jQuery(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function(html) {
          var htmlIsFunction = isFunction(html);
          return this.each(function(i) {
            jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function(selector) {
          this.parent(selector).not("body").each(function() {
            jQuery(this).replaceWith(this.childNodes);
          });
          return this;
        }
      });
      jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
      };
      jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };
      jQuery.ajaxSettings.xhr = function() {
        try {
          return new window2.XMLHttpRequest();
        } catch (e) {
        }
      };
      var xhrSuccessStatus = {
        0: 200,
        1223: 204
      }, xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function(headers, complete) {
              var i, xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
              callback = function(type) {
                return function() {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete(xhr.status, xhr.statusText);
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {binary: xhr.response} : {text: xhr.responseText}, xhr.getAllResponseHeaders());
                    }
                  }
                };
              };
              xhr.onload = callback();
              errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
              if (xhr.onabort !== void 0) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    window2.setTimeout(function() {
                      if (callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              }
              callback = callback("abort");
              try {
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                if (callback) {
                  throw e;
                }
              }
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
          s.contents.script = false;
        }
      });
      jQuery.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function(text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      });
      jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === void 0) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = "GET";
        }
      });
      jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain || s.scriptAttrs) {
          var script, callback;
          return {
            send: function(_, complete) {
              script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({charset: s.scriptCharset, src: s.url}).on("load error", callback = function(evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              });
              document2.head.appendChild(script[0]);
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
          this[callback] = true;
          return callback;
        }
      });
      jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
          callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          }
          s.converters["script json"] = function() {
            if (!responseContainer) {
              jQuery.error(callbackName + " was not called");
            }
            return responseContainer[0];
          };
          s.dataTypes[0] = "json";
          overwritten = window2[callbackName];
          window2[callbackName] = function() {
            responseContainer = arguments;
          };
          jqXHR.always(function() {
            if (overwritten === void 0) {
              jQuery(window2).removeProp(callbackName);
            } else {
              window2[callbackName] = overwritten;
            }
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = void 0;
          });
          return "script";
        }
      });
      support.createHTMLDocument = function() {
        var body = document2.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
      }();
      jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") {
          return [];
        }
        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }
        var base, parsed, scripts;
        if (!context) {
          if (support.createHTMLDocument) {
            context = document2.implementation.createHTMLDocument("");
            base = context.createElement("base");
            base.href = document2.location.href;
            context.head.appendChild(base);
          } else {
            context = document2;
          }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
          return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
      };
      jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off);
        }
        if (isFunction(params)) {
          callback = params;
          params = void 0;
        } else if (params && typeof params === "object") {
          type = "POST";
        }
        if (self.length > 0) {
          jQuery.ajax({
            url,
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
          }).always(callback && function(jqXHR, status) {
            self.each(function() {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }
        return this;
      };
      jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };
      jQuery.offset = {
        setOffset: function(elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
          if (position === "static") {
            elem.style.position = "relative";
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, "top");
          curCSSLeft = jQuery.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (isFunction(options)) {
            options = options.call(elem, i, jQuery.extend({}, curOffset));
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }
          if ("using" in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery.fn.extend({
        offset: function(options) {
          if (arguments.length) {
            return options === void 0 ? this : this.each(function(i) {
              jQuery.offset.setOffset(this, options, i);
            });
          }
          var rect, win, elem = this[0];
          if (!elem) {
            return;
          }
          if (!elem.getClientRects().length) {
            return {top: 0, left: 0};
          }
          rect = elem.getBoundingClientRect();
          win = elem.ownerDocument.defaultView;
          return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
          };
        },
        position: function() {
          if (!this[0]) {
            return;
          }
          var offsetParent, offset, doc, elem = this[0], parentOffset = {top: 0, left: 0};
          if (jQuery.css(elem, "position") === "fixed") {
            offset = elem.getBoundingClientRect();
          } else {
            offset = this.offset();
            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;
            while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.parentNode;
            }
            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
              parentOffset = jQuery(offsetParent).offset();
              parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
              parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
            }
          }
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
          };
        },
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || documentElement;
          });
        }
      });
      jQuery.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function(method, prop) {
        var top = prop === "pageYOffset";
        jQuery.fn[method] = function(val) {
          return access(this, function(elem, method2, val2) {
            var win;
            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }
            if (val2 === void 0) {
              return win ? win[prop] : elem[method2];
            }
            if (win) {
              win.scrollTo(!top ? val2 : win.pageXOffset, top ? val2 : win.pageYOffset);
            } else {
              elem[method2] = val2;
            }
          }, method, val, arguments.length);
        };
      });
      jQuery.each(["top", "left"], function(_i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
          }
        });
      });
      jQuery.each({Height: "height", Width: "width"}, function(name, type) {
        jQuery.each({
          padding: "inner" + name,
          content: type,
          "": "outer" + name
        }, function(defaultExtra, funcName) {
          jQuery.fn[funcName] = function(margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function(elem, type2, value2) {
              var doc;
              if (isWindow(elem)) {
                return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
              }
              return value2 === void 0 ? jQuery.css(elem, type2, extra) : jQuery.style(elem, type2, value2, extra);
            }, type, chainable ? margin : void 0, chainable);
          };
        });
      });
      jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
      ], function(_i, type) {
        jQuery.fn[type] = function(fn) {
          return this.on(type, fn);
        };
      });
      jQuery.fn.extend({
        bind: function(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(_i, name) {
        jQuery.fn[name] = function(data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      });
      var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
      jQuery.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
          tmp = fn[context];
          context = fn;
          fn = tmp;
        }
        if (!isFunction(fn)) {
          return void 0;
        }
        args = slice.call(arguments, 2);
        proxy = function() {
          return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
      };
      jQuery.holdReady = function(hold) {
        if (hold) {
          jQuery.readyWait++;
        } else {
          jQuery.ready(true);
        }
      };
      jQuery.isArray = Array.isArray;
      jQuery.parseJSON = JSON.parse;
      jQuery.nodeName = nodeName;
      jQuery.isFunction = isFunction;
      jQuery.isWindow = isWindow;
      jQuery.camelCase = camelCase;
      jQuery.type = toType;
      jQuery.now = Date.now;
      jQuery.isNumeric = function(obj) {
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
      };
      jQuery.trim = function(text) {
        return text == null ? "" : (text + "").replace(rtrim, "$1");
      };
      if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
          return jQuery;
        });
      }
      var _jQuery = window2.jQuery, _$ = window2.$;
      jQuery.noConflict = function(deep) {
        if (window2.$ === jQuery) {
          window2.$ = _$;
        }
        if (deep && window2.jQuery === jQuery) {
          window2.jQuery = _jQuery;
        }
        return jQuery;
      };
      if (typeof noGlobal === "undefined") {
        window2.jQuery = window2.$ = jQuery;
      }
      return jQuery;
    });
  });

  // node_modules/moment/moment.js
  var require_moment = __commonJS((exports, module) => {
    //! moment.js
    //! version : 2.29.4
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key, argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token2);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({unit: u, priority: priorities[u]});
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback, tokenLen;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i = 0; i < tokenLen; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
            this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
      }
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
            this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
            this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split("-");
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return name.match("^[^/\\\\]*$") != null;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn("Locale " + key + " not found. Did you forget to load it?");
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
      });
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i = 0; i < tokenLen; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function(obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({nullInput: true});
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering.length;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, "m"), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return {milliseconds: 0, months: 0};
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property, propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));
          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
      proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
      proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
      proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
      proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
      hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      //! moment.js
      hooks.version = "2.29.4";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
      };
      return hooks;
    });
  });

  // resources/js/plugin.js
  var require_plugin = __commonJS((exports, module) => {
    var import_jquery2 = __toModule(require_jquery_min());
    /**
    * @version: 3.1
    * @author: Dan Grossman http://www.dangrossman.info/
    * @copyright: Copyright (c) 2012-2019 Dan Grossman. All rights reserved.
    * @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
    * @website: http://www.daterangepicker.com/
    */
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["moment", "jquery"], function(moment3, jquery) {
          if (!jquery.fn)
            jquery.fn = {};
          if (typeof moment3 !== "function" && moment3.hasOwnProperty("default"))
            moment3 = moment3["default"];
          return factory(moment3, jquery);
        });
      } else if (typeof module === "object" && module.exports) {
        var jQuery = typeof window != "undefined" ? window.jQuery : void 0;
        if (!jQuery) {
          jQuery = require_jquery();
          if (!jQuery.fn)
            jQuery.fn = {};
        }
        var moment2 = typeof window != "undefined" && typeof window.moment != "undefined" ? window.moment : require_moment();
        module.exports = factory(moment2, jQuery);
      } else {
        root.daterangepicker = factory(root.moment, root.jQuery);
      }
    })(void 0, function(moment2, $3) {
      var DateRangePicker2 = function(element, options, cb) {
        this.parentEl = "body";
        this.element = $3(element);
        this.startDate = moment2().startOf("day");
        this.endDate = moment2().endOf("day");
        this.minDate = false;
        this.maxDate = false;
        this.maxSpan = false;
        this.autoApply = false;
        this.singleDatePicker = false;
        this.showDropdowns = false;
        this.minYear = moment2().subtract(100, "year").format("YYYY");
        this.maxYear = moment2().add(100, "year").format("YYYY");
        this.showWeekNumbers = false;
        this.showISOWeekNumbers = false;
        this.showCustomRangeLabel = true;
        this.timePicker = false;
        this.timePicker24Hour = false;
        this.timePickerIncrement = 1;
        this.timePickerSeconds = false;
        this.linkedCalendars = true;
        this.autoUpdateInput = true;
        this.alwaysShowCalendars = false;
        this.ranges = {};
        this.handleApplyUsing = null;
        this.name = null;
        this.opens = "right";
        if (this.element.hasClass("pull-right"))
          this.opens = "left";
        this.drops = "down";
        if (this.element.hasClass("dropup"))
          this.drops = "up";
        this.buttonClasses = "btn btn-sm";
        this.applyButtonClasses = "filament-link inline-flex items-center justify-center gap-0.5 font-medium outline-none hover:underline focus:underline text-sm text-primary-600 hover:text-primary-500 dark:text-primary-500 dark:hover:text-primary-400";
        this.cancelButtonClasses = "filament-link inline-flex items-center justify-center gap-0.5 font-medium outline-none hover:underline focus:underline text-sm text-danger-600 hover:text-danger-500 dark:text-danger-500 dark:hover:text-danger-400";
        this.locale = {
          direction: "ltr",
          format: moment2.localeData().longDateFormat("L"),
          separator: " - ",
          applyLabel: "Apply",
          cancelLabel: "Cancel",
          weekLabel: "W",
          customRangeLabel: "Custom Range",
          daysOfWeek: moment2.weekdaysMin(),
          monthNames: moment2.monthsShort(),
          firstDay: moment2.localeData().firstDayOfWeek()
        };
        this.callback = function() {
        };
        this.isShowing = false;
        this.leftCalendar = {};
        this.rightCalendar = {};
        if (typeof options !== "object" || options === null)
          options = {};
        options = $3.extend(this.element.data(), options);
        if (typeof options.template !== "string" && !(options.template instanceof $3))
          options.template = '<div class="daterangepicker"><div class="ranges"></div><div class="drp-calendar left"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-calendar right"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-buttons"><span class="drp-selected"></span><button class="cancelBtn" type="button"></button><button class="applyBtn" disabled="disabled" type="button"></button> </div></div>';
        this.parentEl = options.parentEl && $3(options.parentEl).length ? $3(options.parentEl) : $3(this.parentEl);
        this.container = $3(options.template).appendTo(this.parentEl);
        this.handleApplyUsing = options.handleApplyUsing;
        this.name = options.name;
        if (typeof options.locale === "object") {
          if (typeof options.locale.direction === "string")
            this.locale.direction = options.locale.direction;
          if (typeof options.locale.format === "string")
            this.locale.format = options.locale.format;
          if (typeof options.locale.separator === "string")
            this.locale.separator = options.locale.separator;
          if (typeof options.locale.daysOfWeek === "object")
            this.locale.daysOfWeek = options.locale.daysOfWeek.slice();
          if (typeof options.locale.monthNames === "object")
            this.locale.monthNames = options.locale.monthNames.slice();
          if (typeof options.locale.firstDay === "number")
            this.locale.firstDay = options.locale.firstDay;
          if (typeof options.locale.applyLabel === "string")
            this.locale.applyLabel = options.locale.applyLabel;
          if (typeof options.locale.cancelLabel === "string")
            this.locale.cancelLabel = options.locale.cancelLabel;
          if (typeof options.locale.weekLabel === "string")
            this.locale.weekLabel = options.locale.weekLabel;
          if (typeof options.locale.customRangeLabel === "string") {
            var elem = document.createElement("textarea");
            elem.innerHTML = options.locale.customRangeLabel;
            var rangeHtml = elem.value;
            this.locale.customRangeLabel = rangeHtml;
          }
        }
        this.container.addClass(this.locale.direction);
        if (typeof options.startDate === "string")
          this.startDate = moment2(options.startDate, this.locale.format);
        if (typeof options.endDate === "string")
          this.endDate = moment2(options.endDate, this.locale.format);
        if (typeof options.minDate === "string")
          this.minDate = moment2(options.minDate, this.locale.format);
        if (typeof options.maxDate === "string")
          this.maxDate = moment2(options.maxDate, this.locale.format);
        if (typeof options.startDate === "object")
          this.startDate = moment2(options.startDate);
        if (typeof options.endDate === "object")
          this.endDate = moment2(options.endDate);
        if (typeof options.minDate === "object")
          this.minDate = moment2(options.minDate);
        if (typeof options.maxDate === "object")
          this.maxDate = moment2(options.maxDate);
        if (this.minDate && this.startDate.isBefore(this.minDate))
          this.startDate = this.minDate.clone();
        if (this.maxDate && this.endDate.isAfter(this.maxDate))
          this.endDate = this.maxDate.clone();
        if (typeof options.applyButtonClasses === "string")
          this.applyButtonClasses = options.applyButtonClasses;
        if (typeof options.applyClass === "string")
          this.applyButtonClasses = options.applyClass;
        if (typeof options.cancelButtonClasses === "string")
          this.cancelButtonClasses = options.cancelButtonClasses;
        if (typeof options.cancelClass === "string")
          this.cancelButtonClasses = options.cancelClass;
        if (typeof options.maxSpan === "object")
          this.maxSpan = options.maxSpan;
        if (typeof options.dateLimit === "object")
          this.maxSpan = options.dateLimit;
        if (typeof options.opens === "string")
          this.opens = options.opens;
        if (typeof options.drops === "string")
          this.drops = options.drops;
        if (typeof options.showWeekNumbers === "boolean")
          this.showWeekNumbers = options.showWeekNumbers;
        if (typeof options.showISOWeekNumbers === "boolean")
          this.showISOWeekNumbers = options.showISOWeekNumbers;
        if (typeof options.buttonClasses === "string")
          this.buttonClasses = options.buttonClasses;
        if (typeof options.buttonClasses === "object")
          this.buttonClasses = options.buttonClasses.join(" ");
        if (typeof options.showDropdowns === "boolean")
          this.showDropdowns = options.showDropdowns;
        if (typeof options.minYear === "number")
          this.minYear = options.minYear;
        if (typeof options.maxYear === "number")
          this.maxYear = options.maxYear;
        if (typeof options.showCustomRangeLabel === "boolean")
          this.showCustomRangeLabel = options.showCustomRangeLabel;
        if (typeof options.singleDatePicker === "boolean") {
          this.singleDatePicker = options.singleDatePicker;
          if (this.singleDatePicker)
            this.endDate = this.startDate.clone();
        }
        if (typeof options.timePicker === "boolean")
          this.timePicker = options.timePicker;
        if (typeof options.timePickerSeconds === "boolean")
          this.timePickerSeconds = options.timePickerSeconds;
        if (typeof options.timePickerIncrement === "number")
          this.timePickerIncrement = options.timePickerIncrement;
        if (typeof options.timePicker24Hour === "boolean")
          this.timePicker24Hour = options.timePicker24Hour;
        if (typeof options.autoApply === "boolean")
          this.autoApply = options.autoApply;
        if (typeof options.autoUpdateInput === "boolean")
          this.autoUpdateInput = options.autoUpdateInput;
        if (typeof options.linkedCalendars === "boolean")
          this.linkedCalendars = options.linkedCalendars;
        if (typeof options.isInvalidDate === "function")
          this.isInvalidDate = options.isInvalidDate;
        if (typeof options.isCustomDate === "function")
          this.isCustomDate = options.isCustomDate;
        if (typeof options.alwaysShowCalendars === "boolean")
          this.alwaysShowCalendars = options.alwaysShowCalendars;
        if (this.locale.firstDay != 0) {
          var iterator = this.locale.firstDay;
          while (iterator > 0) {
            this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
            iterator--;
          }
        }
        var start, end, range;
        if (typeof options.startDate === "undefined" && typeof options.endDate === "undefined") {
          if ($3(this.element).is(":text")) {
            var val = $3(this.element).val(), split = val.split(this.locale.separator);
            start = end = null;
            if (split.length == 2) {
              start = moment2(split[0], this.locale.format);
              end = moment2(split[1], this.locale.format);
            } else if (this.singleDatePicker && val !== "") {
              start = moment2(val, this.locale.format);
              end = moment2(val, this.locale.format);
            }
            if (start !== null && end !== null) {
              this.setStartDate(start);
              this.setEndDate(end);
            }
          }
        }
        if (typeof options.ranges === "object") {
          for (range in options.ranges) {
            if (typeof options.ranges[range][0] === "string")
              start = moment2(options.ranges[range][0], this.locale.format);
            else
              start = moment2(options.ranges[range][0]);
            if (typeof options.ranges[range][1] === "string")
              end = moment2(options.ranges[range][1], this.locale.format);
            else
              end = moment2(options.ranges[range][1]);
            if (this.minDate && start.isBefore(this.minDate))
              start = this.minDate.clone();
            var maxDate = this.maxDate;
            if (this.maxSpan && maxDate && start.clone().add(this.maxSpan).isAfter(maxDate))
              maxDate = start.clone().add(this.maxSpan);
            if (maxDate && end.isAfter(maxDate))
              end = maxDate.clone();
            if (this.minDate && end.isBefore(this.minDate, this.timepicker ? "minute" : "day") || maxDate && start.isAfter(maxDate, this.timepicker ? "minute" : "day"))
              continue;
            var elem = document.createElement("textarea");
            elem.innerHTML = range;
            var rangeHtml = elem.value;
            this.ranges[rangeHtml] = [start, end];
          }
          var list = "<ul>";
          for (range in this.ranges) {
            list += '<li data-range-key="' + range + '" class="hover:bg-primary-600">' + range + "</li>";
          }
          if (this.showCustomRangeLabel) {
            list += '<li data-range-key="' + this.locale.customRangeLabel + '" class="hover:bg-primary-600">' + this.locale.customRangeLabel + "</li>";
          }
          list += "</ul>";
          this.container.find(".ranges").prepend(list);
        }
        if (typeof cb === "function") {
          this.callback = cb;
        }
        if (!this.timePicker) {
          this.startDate = this.startDate.startOf("day");
          this.endDate = this.endDate.endOf("day");
          this.container.find(".calendar-time").hide();
        }
        if (this.timePicker && this.autoApply)
          this.autoApply = false;
        if (this.autoApply) {
          this.container.addClass("auto-apply");
        }
        if (typeof options.ranges === "object")
          this.container.addClass("show-ranges");
        if (this.singleDatePicker) {
          this.container.addClass("single");
          this.container.find(".drp-calendar.left").addClass("single");
          this.container.find(".drp-calendar.left").show();
          this.container.find(".drp-calendar.right").hide();
          if (!this.timePicker && this.autoApply) {
            this.container.addClass("auto-apply");
          }
        }
        if (typeof options.ranges === "undefined" && !this.singleDatePicker || this.alwaysShowCalendars) {
          this.container.addClass("show-calendar");
        }
        this.container.addClass("opens" + this.opens);
        this.container.find(".applyBtn, .cancelBtn").addClass(this.buttonClasses);
        if (this.applyButtonClasses.length)
          this.container.find(".applyBtn").addClass(this.applyButtonClasses);
        if (this.cancelButtonClasses.length)
          this.container.find(".cancelBtn").addClass(this.cancelButtonClasses);
        this.container.find(".applyBtn").html(this.locale.applyLabel);
        this.container.find(".cancelBtn").html(this.locale.cancelLabel);
        this.container.find(".drp-calendar").on("click.daterangepicker", ".prev", $3.proxy(this.clickPrev, this)).on("click.daterangepicker", ".next", $3.proxy(this.clickNext, this)).on("mousedown.daterangepicker", "td.available", $3.proxy(this.clickDate, this)).on("mouseenter.daterangepicker", "td.available", $3.proxy(this.hoverDate, this)).on("change.daterangepicker", "select.yearselect", $3.proxy(this.monthOrYearChanged, this)).on("change.daterangepicker", "select.monthselect", $3.proxy(this.monthOrYearChanged, this)).on("change.daterangepicker", "select.hourselect,select.minuteselect,select.secondselect,select.ampmselect", $3.proxy(this.timeChanged, this));
        this.container.find(".ranges").on("click.daterangepicker", "li", $3.proxy(this.clickRange, this));
        this.container.find(".drp-buttons").on("click.daterangepicker", "button.applyBtn", $3.proxy(this.clickApply, this)).on("click.daterangepicker", "button.cancelBtn", $3.proxy(this.clickCancel, this));
        if (this.element.is("input") || this.element.is("button")) {
          this.element.on({
            "click.daterangepicker": $3.proxy(this.show, this),
            "focus.daterangepicker": $3.proxy(this.show, this),
            "keyup.daterangepicker": $3.proxy(this.elementChanged, this),
            "keydown.daterangepicker": $3.proxy(this.keydown, this)
          });
        } else {
          this.element.on("click.daterangepicker", $3.proxy(this.toggle, this));
          this.element.on("keydown.daterangepicker", $3.proxy(this.toggle, this));
        }
        this.updateElement();
      };
      DateRangePicker2.prototype = {
        constructor: DateRangePicker2,
        setStartDate: function(startDate) {
          if (typeof startDate === "string")
            this.startDate = moment2(startDate, this.locale.format);
          if (typeof startDate === "object")
            this.startDate = moment2(startDate);
          if (!this.timePicker)
            this.startDate = this.startDate.startOf("day");
          if (this.timePicker && this.timePickerIncrement)
            this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          if (this.minDate && this.startDate.isBefore(this.minDate)) {
            this.startDate = this.minDate.clone();
            if (this.timePicker && this.timePickerIncrement)
              this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          }
          if (this.maxDate && this.startDate.isAfter(this.maxDate)) {
            this.startDate = this.maxDate.clone();
            if (this.timePicker && this.timePickerIncrement)
              this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          }
          if (!this.isShowing)
            this.updateElement();
          this.updateMonthsInView();
        },
        setEndDate: function(endDate) {
          if (typeof endDate === "string")
            this.endDate = moment2(endDate, this.locale.format);
          if (typeof endDate === "object")
            this.endDate = moment2(endDate);
          if (!this.timePicker)
            this.endDate = this.endDate.endOf("day");
          if (this.timePicker && this.timePickerIncrement)
            this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          if (this.endDate.isBefore(this.startDate))
            this.endDate = this.startDate.clone();
          if (this.maxDate && this.endDate.isAfter(this.maxDate))
            this.endDate = this.maxDate.clone();
          if (this.maxSpan && this.startDate.clone().add(this.maxSpan).isBefore(this.endDate))
            this.endDate = this.startDate.clone().add(this.maxSpan);
          this.previousRightTime = this.endDate.clone();
          this.container.find(".drp-selected").html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
          if (!this.isShowing)
            this.updateElement();
          this.updateMonthsInView();
        },
        isInvalidDate: function() {
          return false;
        },
        isCustomDate: function() {
          return false;
        },
        updateView: function() {
          if (this.timePicker) {
            this.renderTimePicker("left");
            this.renderTimePicker("right");
            if (!this.endDate) {
              this.container.find(".right .calendar-time select").prop("disabled", true).addClass("disabled");
            } else {
              this.container.find(".right .calendar-time select").prop("disabled", false).removeClass("disabled");
            }
          }
          if (this.endDate)
            this.container.find(".drp-selected").html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
          this.updateMonthsInView();
          this.updateCalendars();
          this.updateFormInputs();
        },
        updateMonthsInView: function() {
          if (this.endDate) {
            if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month && (this.startDate.format("YYYY-MM") == this.leftCalendar.month.format("YYYY-MM") || this.startDate.format("YYYY-MM") == this.rightCalendar.month.format("YYYY-MM")) && (this.endDate.format("YYYY-MM") == this.leftCalendar.month.format("YYYY-MM") || this.endDate.format("YYYY-MM") == this.rightCalendar.month.format("YYYY-MM"))) {
              return;
            }
            this.leftCalendar.month = this.startDate.clone().date(2);
            if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {
              this.rightCalendar.month = this.endDate.clone().date(2);
            } else {
              this.rightCalendar.month = this.startDate.clone().date(2).add(1, "month");
            }
          } else {
            if (this.leftCalendar.month.format("YYYY-MM") != this.startDate.format("YYYY-MM") && this.rightCalendar.month.format("YYYY-MM") != this.startDate.format("YYYY-MM")) {
              this.leftCalendar.month = this.startDate.clone().date(2);
              this.rightCalendar.month = this.startDate.clone().date(2).add(1, "month");
            }
          }
          if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {
            this.rightCalendar.month = this.maxDate.clone().date(2);
            this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, "month");
          }
        },
        updateCalendars: function() {
          if (this.timePicker) {
            var hour, minute, second;
            if (this.endDate) {
              hour = parseInt(this.container.find(".left .hourselect").val(), 10);
              minute = parseInt(this.container.find(".left .minuteselect").val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find(".left .minuteselect option:last").val(), 10);
              }
              second = this.timePickerSeconds ? parseInt(this.container.find(".left .secondselect").val(), 10) : 0;
              if (!this.timePicker24Hour) {
                var ampm = this.container.find(".left .ampmselect").val();
                if (ampm === "PM" && hour < 12)
                  hour += 12;
                if (ampm === "AM" && hour === 12)
                  hour = 0;
              }
            } else {
              hour = parseInt(this.container.find(".right .hourselect").val(), 10);
              minute = parseInt(this.container.find(".right .minuteselect").val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find(".right .minuteselect option:last").val(), 10);
              }
              second = this.timePickerSeconds ? parseInt(this.container.find(".right .secondselect").val(), 10) : 0;
              if (!this.timePicker24Hour) {
                var ampm = this.container.find(".right .ampmselect").val();
                if (ampm === "PM" && hour < 12)
                  hour += 12;
                if (ampm === "AM" && hour === 12)
                  hour = 0;
              }
            }
            this.leftCalendar.month.hour(hour).minute(minute).second(second);
            this.rightCalendar.month.hour(hour).minute(minute).second(second);
          }
          this.renderCalendar("left");
          this.renderCalendar("right");
          this.container.find(".ranges li").removeClass("active");
          this.container.find(".ranges li").removeClass("bg-primary-500");
          if (this.endDate == null)
            return;
          this.calculateChosenLabel();
        },
        renderCalendar: function(side) {
          var calendar = side == "left" ? this.leftCalendar : this.rightCalendar;
          var month = calendar.month.month();
          var year = calendar.month.year();
          var hour = calendar.month.hour();
          var minute = calendar.month.minute();
          var second = calendar.month.second();
          var daysInMonth = moment2([year, month]).daysInMonth();
          var firstDay = moment2([year, month, 1]);
          var lastDay = moment2([year, month, daysInMonth]);
          var lastMonth = moment2(firstDay).subtract(1, "month").month();
          var lastYear = moment2(firstDay).subtract(1, "month").year();
          var daysInLastMonth = moment2([lastYear, lastMonth]).daysInMonth();
          var dayOfWeek = firstDay.day();
          var calendar = [];
          calendar.firstDay = firstDay;
          calendar.lastDay = lastDay;
          for (var i = 0; i < 6; i++) {
            calendar[i] = [];
          }
          var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
          if (startDay > daysInLastMonth)
            startDay -= 7;
          if (dayOfWeek == this.locale.firstDay)
            startDay = daysInLastMonth - 6;
          var curDate = moment2([lastYear, lastMonth, startDay, 12, minute, second]);
          var col, row;
          for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment2(curDate).add(24, "hour")) {
            if (i > 0 && col % 7 === 0) {
              col = 0;
              row++;
            }
            calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
            curDate.hour(12);
            if (this.minDate && calendar[row][col].format("YYYY-MM-DD") == this.minDate.format("YYYY-MM-DD") && calendar[row][col].isBefore(this.minDate) && side == "left") {
              calendar[row][col] = this.minDate.clone();
            }
            if (this.maxDate && calendar[row][col].format("YYYY-MM-DD") == this.maxDate.format("YYYY-MM-DD") && calendar[row][col].isAfter(this.maxDate) && side == "right") {
              calendar[row][col] = this.maxDate.clone();
            }
          }
          if (side == "left") {
            this.leftCalendar.calendar = calendar;
          } else {
            this.rightCalendar.calendar = calendar;
          }
          var minDate = side == "left" ? this.minDate : this.startDate;
          var maxDate = this.maxDate;
          var selected = side == "left" ? this.startDate : this.endDate;
          var arrow = this.locale.direction == "ltr" ? {left: "chevron-left", right: "chevron-right"} : {left: "chevron-right", right: "chevron-left"};
          var html = '<table class="table-condensed">';
          html += "<thead>";
          html += "<tr>";
          if (this.showWeekNumbers || this.showISOWeekNumbers)
            html += "<th></th>";
          if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == "left")) {
            html += '<th class="prev available"><span></span></th>';
          } else {
            html += "<th></th>";
          }
          var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(" YYYY");
          if (this.showDropdowns) {
            var currentMonth = calendar[1][1].month();
            var currentYear = calendar[1][1].year();
            var maxYear = maxDate && maxDate.year() || this.maxYear;
            var minYear = minDate && minDate.year() || this.minYear;
            var inMinYear = currentYear == minYear;
            var inMaxYear = currentYear == maxYear;
            var monthHtml = '<select class="monthselect">';
            for (var m = 0; m < 12; m++) {
              if ((!inMinYear || minDate && m >= minDate.month()) && (!inMaxYear || maxDate && m <= maxDate.month())) {
                monthHtml += "<option value='" + m + "'" + (m === currentMonth ? " selected='selected'" : "") + ">" + this.locale.monthNames[m] + "</option>";
              } else {
                monthHtml += "<option value='" + m + "'" + (m === currentMonth ? " selected='selected'" : "") + " disabled='disabled'>" + this.locale.monthNames[m] + "</option>";
              }
            }
            monthHtml += "</select>";
            var yearHtml = '<select class="yearselect">';
            for (var y = minYear; y <= maxYear; y++) {
              yearHtml += '<option value="' + y + '"' + (y === currentYear ? ' selected="selected"' : "") + ">" + y + "</option>";
            }
            yearHtml += "</select>";
            dateHtml = monthHtml + yearHtml;
          }
          html += '<th colspan="5" class="month">' + dateHtml + "</th>";
          if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == "right" || this.singleDatePicker)) {
            html += '<th class="next available"><span></span></th>';
          } else {
            html += "<th></th>";
          }
          html += "</tr>";
          html += "<tr>";
          if (this.showWeekNumbers || this.showISOWeekNumbers)
            html += '<th class="week">' + this.locale.weekLabel + "</th>";
          $3.each(this.locale.daysOfWeek, function(index, dayOfWeek2) {
            html += "<th>" + dayOfWeek2 + "</th>";
          });
          html += "</tr>";
          html += "</thead>";
          html += "<tbody>";
          if (this.endDate == null && this.maxSpan) {
            var maxLimit = this.startDate.clone().add(this.maxSpan).endOf("day");
            if (!maxDate || maxLimit.isBefore(maxDate)) {
              maxDate = maxLimit;
            }
          }
          for (var row = 0; row < 6; row++) {
            html += "<tr>";
            if (this.showWeekNumbers)
              html += '<td class="week">' + calendar[row][0].week() + "</td>";
            else if (this.showISOWeekNumbers)
              html += '<td class="week">' + calendar[row][0].isoWeek() + "</td>";
            for (var col = 0; col < 7; col++) {
              var classes = [];
              if (calendar[row][col].isSame(new Date(), "day"))
                classes.push("today");
              if (calendar[row][col].isoWeekday() > 5)
                classes.push("weekend");
              if (calendar[row][col].month() != calendar[1][1].month())
                classes.push("off", "ends");
              if (this.minDate && calendar[row][col].isBefore(this.minDate, "day"))
                classes.push("off", "disabled");
              if (maxDate && calendar[row][col].isAfter(maxDate, "day"))
                classes.push("off", "disabled");
              if (this.isInvalidDate(calendar[row][col]))
                classes.push("off", "disabled");
              if (calendar[row][col].format("YYYY-MM-DD") == this.startDate.format("YYYY-MM-DD"))
                classes.push("active", "start-date");
              if (this.endDate != null && calendar[row][col].format("YYYY-MM-DD") == this.endDate.format("YYYY-MM-DD"))
                classes.push("active", "end-date");
              if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate)
                classes.push("in-range");
              var isCustom = this.isCustomDate(calendar[row][col]);
              if (isCustom !== false) {
                if (typeof isCustom === "string")
                  classes.push(isCustom);
                else
                  Array.prototype.push.apply(classes, isCustom);
              }
              var cname = "", disabled = false;
              for (var i = 0; i < classes.length; i++) {
                cname += classes[i] + " ";
                if (classes[i] == "disabled")
                  disabled = true;
              }
              if (!disabled)
                cname += "available";
              html += '<td class="' + cname.replace(/^\s+|\s+$/g, "") + '" data-title="r' + row + "c" + col + '">' + calendar[row][col].date() + "</td>";
            }
            html += "</tr>";
          }
          html += "</tbody>";
          html += "</table>";
          this.container.find(".drp-calendar." + side + " .calendar-table").html(html);
        },
        renderTimePicker: function(side) {
          if (side == "right" && !this.endDate)
            return;
          var html, selected, minDate, maxDate = this.maxDate;
          if (this.maxSpan && (!this.maxDate || this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate)))
            maxDate = this.startDate.clone().add(this.maxSpan);
          if (side == "left") {
            selected = this.startDate.clone();
            minDate = this.minDate;
          } else if (side == "right") {
            selected = this.endDate.clone();
            minDate = this.startDate;
            var timeSelector = this.container.find(".drp-calendar.right .calendar-time");
            if (timeSelector.html() != "") {
              selected.hour(!isNaN(selected.hour()) ? selected.hour() : timeSelector.find(".hourselect option:selected").val());
              selected.minute(!isNaN(selected.minute()) ? selected.minute() : timeSelector.find(".minuteselect option:selected").val());
              selected.second(!isNaN(selected.second()) ? selected.second() : timeSelector.find(".secondselect option:selected").val());
              if (!this.timePicker24Hour) {
                var ampm = timeSelector.find(".ampmselect option:selected").val();
                if (ampm === "PM" && selected.hour() < 12)
                  selected.hour(selected.hour() + 12);
                if (ampm === "AM" && selected.hour() === 12)
                  selected.hour(0);
              }
            }
            if (selected.isBefore(this.startDate))
              selected = this.startDate.clone();
            if (maxDate && selected.isAfter(maxDate))
              selected = maxDate.clone();
          }
          html = '<select class="hourselect">';
          var start = this.timePicker24Hour ? 0 : 1;
          var end = this.timePicker24Hour ? 23 : 12;
          for (var i = start; i <= end; i++) {
            var i_in_24 = i;
            if (!this.timePicker24Hour)
              i_in_24 = selected.hour() >= 12 ? i == 12 ? 12 : i + 12 : i == 12 ? 0 : i;
            var time = selected.clone().hour(i_in_24);
            var disabled = false;
            if (minDate && time.minute(59).isBefore(minDate))
              disabled = true;
            if (maxDate && time.minute(0).isAfter(maxDate))
              disabled = true;
            if (i_in_24 == selected.hour() && !disabled) {
              html += '<option value="' + i + '" selected="selected">' + i + "</option>";
            } else if (disabled) {
              html += '<option value="' + i + '" disabled="disabled" class="disabled">' + i + "</option>";
            } else {
              html += '<option value="' + i + '">' + i + "</option>";
            }
          }
          html += "</select> ";
          html += ': <select class="minuteselect">';
          for (var i = 0; i < 60; i += this.timePickerIncrement) {
            var padded = i < 10 ? "0" + i : i;
            var time = selected.clone().minute(i);
            var disabled = false;
            if (minDate && time.second(59).isBefore(minDate))
              disabled = true;
            if (maxDate && time.second(0).isAfter(maxDate))
              disabled = true;
            if (selected.minute() == i && !disabled) {
              html += '<option value="' + i + '" selected="selected">' + padded + "</option>";
            } else if (disabled) {
              html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + "</option>";
            } else {
              html += '<option value="' + i + '">' + padded + "</option>";
            }
          }
          html += "</select> ";
          if (this.timePickerSeconds) {
            html += ': <select class="secondselect">';
            for (var i = 0; i < 60; i++) {
              var padded = i < 10 ? "0" + i : i;
              var time = selected.clone().second(i);
              var disabled = false;
              if (minDate && time.isBefore(minDate))
                disabled = true;
              if (maxDate && time.isAfter(maxDate))
                disabled = true;
              if (selected.second() == i && !disabled) {
                html += '<option value="' + i + '" selected="selected">' + padded + "</option>";
              } else if (disabled) {
                html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + "</option>";
              } else {
                html += '<option value="' + i + '">' + padded + "</option>";
              }
            }
            html += "</select> ";
          }
          if (!this.timePicker24Hour) {
            html += '<select class="ampmselect">';
            var am_html = "";
            var pm_html = "";
            if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate))
              am_html = ' disabled="disabled" class="disabled"';
            if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate))
              pm_html = ' disabled="disabled" class="disabled"';
            if (selected.hour() >= 12) {
              html += '<option value="AM"' + am_html + '>AM</option><option value="PM" selected="selected"' + pm_html + ">PM</option>";
            } else {
              html += '<option value="AM" selected="selected"' + am_html + '>AM</option><option value="PM"' + pm_html + ">PM</option>";
            }
            html += "</select>";
          }
          this.container.find(".drp-calendar." + side + " .calendar-time").html(html);
        },
        updateFormInputs: function() {
          if (this.singleDatePicker || this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate))) {
            this.container.find("button.applyBtn").prop("disabled", false);
          } else {
            this.container.find("button.applyBtn").prop("disabled", true);
          }
        },
        move: function() {
          var parentOffset = {top: 0, left: 0}, containerTop, drops = this.drops;
          var parentRightEdge = $3(window).width();
          if (!this.parentEl.is("body")) {
            parentOffset = {
              top: this.parentEl.offset().top - this.parentEl.scrollTop(),
              left: this.parentEl.offset().left - this.parentEl.scrollLeft()
            };
            parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
          }
          switch (drops) {
            case "auto":
              containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
              if (containerTop + this.container.outerHeight() >= this.parentEl[0].scrollHeight) {
                containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;
                drops = "up";
              }
              break;
            case "up":
              containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;
              break;
            default:
              containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
              break;
          }
          this.container.css({
            top: 0,
            left: 0,
            right: "auto"
          });
          var containerWidth = this.container.outerWidth();
          this.container.toggleClass("drop-up", drops == "up");
          if (this.opens == "left") {
            var containerRight = parentRightEdge - this.element.offset().left - this.element.outerWidth();
            if (containerWidth + containerRight > $3(window).width()) {
              this.container.css({
                top: containerTop,
                right: "auto",
                left: 9
              });
            } else {
              this.container.css({
                top: containerTop,
                right: containerRight,
                left: "auto"
              });
            }
          } else if (this.opens == "center") {
            var containerLeft = this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2 - containerWidth / 2;
            if (containerLeft < 0) {
              this.container.css({
                top: containerTop,
                right: "auto",
                left: 9
              });
            } else if (containerLeft + containerWidth > $3(window).width()) {
              this.container.css({
                top: containerTop,
                left: "auto",
                right: 0
              });
            } else {
              this.container.css({
                top: containerTop,
                left: containerLeft,
                right: "auto"
              });
            }
          } else {
            var containerLeft = this.element.offset().left - parentOffset.left;
            if (containerLeft + containerWidth > $3(window).width()) {
              this.container.css({
                top: containerTop,
                left: "auto",
                right: 0
              });
            } else {
              this.container.css({
                top: containerTop,
                left: containerLeft,
                right: "auto"
              });
            }
          }
        },
        show: function(e) {
          if (this.isShowing)
            return;
          this._outsideClickProxy = $3.proxy(function(e2) {
            this.outsideClick(e2);
          }, this);
          $3(document).on("mousedown.daterangepicker", this._outsideClickProxy).on("touchend.daterangepicker", this._outsideClickProxy).on("click.daterangepicker", "[data-toggle=dropdown]", this._outsideClickProxy).on("focusin.daterangepicker", this._outsideClickProxy);
          $3(window).on("resize.daterangepicker", $3.proxy(function(e2) {
            this.move(e2);
          }, this));
          this.oldStartDate = this.startDate.clone();
          this.oldEndDate = this.endDate.clone();
          this.previousRightTime = this.endDate.clone();
          this.updateView();
          this.container.show();
          this.move();
          this.element.trigger("show.daterangepicker", this);
          this.isShowing = true;
        },
        hide: function(e) {
          if (!this.isShowing)
            return;
          if (!this.endDate) {
            this.startDate = this.oldStartDate.clone();
            this.endDate = this.oldEndDate.clone();
          }
          if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
            this.callback(this.startDate.clone(), this.endDate.clone(), this.chosenLabel);
          this.updateElement();
          $3(document).off(".daterangepicker");
          $3(window).off(".daterangepicker");
          this.container.hide();
          this.element.trigger("hide.daterangepicker", this);
          this.isShowing = false;
        },
        toggle: function(e) {
          if (this.isShowing) {
            this.hide();
          } else {
            this.show();
          }
        },
        outsideClick: function(e) {
          var target = $3(e.target);
          if (e.type == "focusin" || target.closest(this.element).length || target.closest(this.container).length || target.closest(".calendar-table").length)
            return;
          this.hide();
          this.element.trigger("outsideClick.daterangepicker", this);
        },
        showCalendars: function() {
          this.container.addClass("show-calendar");
          this.move();
          this.element.trigger("showCalendar.daterangepicker", this);
        },
        hideCalendars: function() {
          this.container.removeClass("show-calendar");
          this.element.trigger("hideCalendar.daterangepicker", this);
        },
        clickRange: function(e) {
          var label = e.target.getAttribute("data-range-key");
          this.chosenLabel = label;
          if (label == this.locale.customRangeLabel) {
            this.showCalendars();
          } else {
            var dates = this.ranges[label];
            this.startDate = dates[0];
            this.endDate = dates[1];
            if (!this.timePicker) {
              this.startDate.startOf("day");
              this.endDate.endOf("day");
            }
            if (!this.alwaysShowCalendars)
              this.hideCalendars();
            this.clickApply();
          }
        },
        clickPrev: function(e) {
          var cal = $3(e.target).parents(".drp-calendar");
          if (cal.hasClass("left")) {
            this.leftCalendar.month.subtract(1, "month");
            if (this.linkedCalendars)
              this.rightCalendar.month.subtract(1, "month");
          } else {
            this.rightCalendar.month.subtract(1, "month");
          }
          this.updateCalendars();
        },
        clickNext: function(e) {
          var cal = $3(e.target).parents(".drp-calendar");
          if (cal.hasClass("left")) {
            this.leftCalendar.month.add(1, "month");
          } else {
            this.rightCalendar.month.add(1, "month");
            if (this.linkedCalendars)
              this.leftCalendar.month.add(1, "month");
          }
          this.updateCalendars();
        },
        hoverDate: function(e) {
          if (!$3(e.target).hasClass("available"))
            return;
          var title = $3(e.target).attr("data-title");
          var row = title.substr(1, 1);
          var col = title.substr(3, 1);
          var cal = $3(e.target).parents(".drp-calendar");
          var date = cal.hasClass("left") ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];
          var leftCalendar = this.leftCalendar;
          var rightCalendar = this.rightCalendar;
          var startDate = this.startDate;
          if (!this.endDate) {
            this.container.find(".drp-calendar tbody td").each(function(index, el) {
              if ($3(el).hasClass("week"))
                return;
              var title2 = $3(el).attr("data-title");
              var row2 = title2.substr(1, 1);
              var col2 = title2.substr(3, 1);
              var cal2 = $3(el).parents(".drp-calendar");
              var dt = cal2.hasClass("left") ? leftCalendar.calendar[row2][col2] : rightCalendar.calendar[row2][col2];
              if (dt.isAfter(startDate) && dt.isBefore(date) || dt.isSame(date, "day")) {
                $3(el).addClass("in-range");
              } else {
                $3(el).removeClass("in-range");
              }
            });
          }
        },
        clickDate: function(e) {
          if (!$3(e.target).hasClass("available"))
            return;
          var title = $3(e.target).attr("data-title");
          var row = title.substr(1, 1);
          var col = title.substr(3, 1);
          var cal = $3(e.target).parents(".drp-calendar");
          var date = cal.hasClass("left") ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];
          if (this.endDate || date.isBefore(this.startDate, "day")) {
            if (this.timePicker) {
              var hour = parseInt(this.container.find(".left .hourselect").val(), 10);
              if (!this.timePicker24Hour) {
                var ampm = this.container.find(".left .ampmselect").val();
                if (ampm === "PM" && hour < 12)
                  hour += 12;
                if (ampm === "AM" && hour === 12)
                  hour = 0;
              }
              var minute = parseInt(this.container.find(".left .minuteselect").val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find(".left .minuteselect option:last").val(), 10);
              }
              var second = this.timePickerSeconds ? parseInt(this.container.find(".left .secondselect").val(), 10) : 0;
              date = date.clone().hour(hour).minute(minute).second(second);
            }
            this.endDate = null;
            this.setStartDate(date.clone());
          } else if (!this.endDate && date.isBefore(this.startDate)) {
            this.setEndDate(this.startDate.clone());
          } else {
            if (this.timePicker) {
              var hour = parseInt(this.container.find(".right .hourselect").val(), 10);
              if (!this.timePicker24Hour) {
                var ampm = this.container.find(".right .ampmselect").val();
                if (ampm === "PM" && hour < 12)
                  hour += 12;
                if (ampm === "AM" && hour === 12)
                  hour = 0;
              }
              var minute = parseInt(this.container.find(".right .minuteselect").val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find(".right .minuteselect option:last").val(), 10);
              }
              var second = this.timePickerSeconds ? parseInt(this.container.find(".right .secondselect").val(), 10) : 0;
              date = date.clone().hour(hour).minute(minute).second(second);
            }
            this.setEndDate(date.clone());
            if (this.autoApply) {
              this.calculateChosenLabel();
              this.clickApply();
            }
          }
          if (this.singleDatePicker) {
            this.setEndDate(this.startDate);
            if (!this.timePicker && this.autoApply)
              this.clickApply();
          }
          this.updateView();
          e.stopPropagation();
        },
        calculateChosenLabel: function() {
          var customRange = true;
          var i = 0;
          for (var range in this.ranges) {
            if (this.timePicker) {
              var format = this.timePickerSeconds ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD HH:mm";
              if (this.startDate.format(format) == this.ranges[range][0].format(format) && this.endDate.format(format) == this.ranges[range][1].format(format)) {
                customRange = false;
                this.chosenLabel = this.container.find(".ranges li:eq(" + i + ")").addClass("active bg-primary-500").attr("data-range-key");
                break;
              }
            } else {
              if (this.startDate.format("YYYY-MM-DD") == this.ranges[range][0].format("YYYY-MM-DD") && this.endDate.format("YYYY-MM-DD") == this.ranges[range][1].format("YYYY-MM-DD")) {
                customRange = false;
                this.chosenLabel = this.container.find(".ranges li:eq(" + i + ")").addClass("active bg-primary-500").attr("data-range-key");
                break;
              }
            }
            i++;
          }
          if (customRange) {
            if (this.showCustomRangeLabel) {
              this.chosenLabel = this.container.find(".ranges li:last").addClass("active bg-primary-500").attr("data-range-key");
            } else {
              this.chosenLabel = null;
            }
            this.showCalendars();
          }
        },
        clickApply: function(e) {
          this.hide();
          this.element.trigger("apply.daterangepicker", this);
          this.handleApplyUsing(this.startDate.format(this.locale.format) + " - " + this.endDate.format(this.locale.format), this.name);
        },
        clickCancel: function(e) {
          this.startDate = this.oldStartDate;
          this.endDate = this.oldEndDate;
          this.hide();
          $3(this).val("");
          this.element.trigger("cancel.daterangepicker", this);
        },
        monthOrYearChanged: function(e) {
          var isLeft = $3(e.target).closest(".drp-calendar").hasClass("left"), leftOrRight = isLeft ? "left" : "right", cal = this.container.find(".drp-calendar." + leftOrRight);
          var month = parseInt(cal.find(".monthselect").val(), 10);
          var year = cal.find(".yearselect").val();
          if (!isLeft) {
            if (year < this.startDate.year() || year == this.startDate.year() && month < this.startDate.month()) {
              month = this.startDate.month();
              year = this.startDate.year();
            }
          }
          if (this.minDate) {
            if (year < this.minDate.year() || year == this.minDate.year() && month < this.minDate.month()) {
              month = this.minDate.month();
              year = this.minDate.year();
            }
          }
          if (this.maxDate) {
            if (year > this.maxDate.year() || year == this.maxDate.year() && month > this.maxDate.month()) {
              month = this.maxDate.month();
              year = this.maxDate.year();
            }
          }
          if (isLeft) {
            this.leftCalendar.month.month(month).year(year);
            if (this.linkedCalendars)
              this.rightCalendar.month = this.leftCalendar.month.clone().add(1, "month");
          } else {
            this.rightCalendar.month.month(month).year(year);
            if (this.linkedCalendars)
              this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, "month");
          }
          this.updateCalendars();
        },
        timeChanged: function(e) {
          var cal = $3(e.target).closest(".drp-calendar"), isLeft = cal.hasClass("left");
          var hour = parseInt(cal.find(".hourselect").val(), 10);
          var minute = parseInt(cal.find(".minuteselect").val(), 10);
          if (isNaN(minute)) {
            minute = parseInt(cal.find(".minuteselect option:last").val(), 10);
          }
          var second = this.timePickerSeconds ? parseInt(cal.find(".secondselect").val(), 10) : 0;
          if (!this.timePicker24Hour) {
            var ampm = cal.find(".ampmselect").val();
            if (ampm === "PM" && hour < 12)
              hour += 12;
            if (ampm === "AM" && hour === 12)
              hour = 0;
          }
          if (isLeft) {
            var start = this.startDate.clone();
            start.hour(hour);
            start.minute(minute);
            start.second(second);
            this.setStartDate(start);
            if (this.singleDatePicker) {
              this.endDate = this.startDate.clone();
            } else if (this.endDate && this.endDate.format("YYYY-MM-DD") == start.format("YYYY-MM-DD") && this.endDate.isBefore(start)) {
              this.setEndDate(start.clone());
            }
          } else if (this.endDate) {
            var end = this.endDate.clone();
            end.hour(hour);
            end.minute(minute);
            end.second(second);
            this.setEndDate(end);
          }
          this.updateCalendars();
          this.updateFormInputs();
          this.renderTimePicker("left");
          this.renderTimePicker("right");
        },
        elementChanged: function() {
          if (!this.element.is("input"))
            return;
          if (!this.element.val().length)
            return;
          var dateString = this.element.val().split(this.locale.separator), start = null, end = null;
          if (dateString.length === 2) {
            start = moment2(dateString[0], this.locale.format);
            end = moment2(dateString[1], this.locale.format);
          }
          if (this.singleDatePicker || start === null || end === null) {
            start = moment2(this.element.val(), this.locale.format);
            end = start;
          }
          if (!start.isValid() || !end.isValid())
            return;
          this.setStartDate(start);
          this.setEndDate(end);
          this.updateView();
        },
        keydown: function(e) {
          if (e.keyCode === 9 || e.keyCode === 13) {
            this.hide();
          }
          if (e.keyCode === 27) {
            e.preventDefault();
            e.stopPropagation();
            this.hide();
          }
        },
        updateElement: function() {
          if (this.element.is("input") && this.autoUpdateInput) {
            var newValue = this.startDate.format(this.locale.format);
            if (!this.singleDatePicker) {
              newValue += this.locale.separator + this.endDate.format(this.locale.format);
            }
            if (newValue !== this.element.val()) {
              this.element.val(newValue).trigger("change");
            }
          }
        },
        remove: function() {
          this.container.remove();
          this.element.off(".daterangepicker");
          this.element.removeData();
        }
      };
      $3.fn.daterangepicker = function(options, callback) {
        var implementOptions = $3.extend(true, {}, $3.fn.daterangepicker.defaultOptions, options);
        this.each(function() {
          var el = $3(this);
          if (el.data("daterangepicker"))
            el.data("daterangepicker").remove();
          el.data("daterangepicker", new DateRangePicker2(el, implementOptions, callback));
        });
        return this;
      };
      return DateRangePicker2;
    });
  });

  // resources/js/moment.min.js
  var require_moment_min = __commonJS((exports, module) => {
    //! moment.js
    //! version : 2.18.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    !function(a, b) {
      typeof exports == "object" && typeof module != "undefined" ? module.exports = b() : typeof define == "function" && define.amd ? define(b) : a.moment = b();
    }(exports, function() {
      "use strict";
      function a() {
        return sd.apply(null, arguments);
      }
      function b(a2) {
        sd = a2;
      }
      function c(a2) {
        return a2 instanceof Array || Object.prototype.toString.call(a2) === "[object Array]";
      }
      function d(a2) {
        return a2 != null && Object.prototype.toString.call(a2) === "[object Object]";
      }
      function e(a2) {
        var b2;
        for (b2 in a2)
          return false;
        return true;
      }
      function f(a2) {
        return a2 === void 0;
      }
      function g(a2) {
        return typeof a2 == "number" || Object.prototype.toString.call(a2) === "[object Number]";
      }
      function h(a2) {
        return a2 instanceof Date || Object.prototype.toString.call(a2) === "[object Date]";
      }
      function i(a2, b2) {
        var c2, d2 = [];
        for (c2 = 0; c2 < a2.length; ++c2)
          d2.push(b2(a2[c2], c2));
        return d2;
      }
      function j(a2, b2) {
        return Object.prototype.hasOwnProperty.call(a2, b2);
      }
      function k(a2, b2) {
        for (var c2 in b2)
          j(b2, c2) && (a2[c2] = b2[c2]);
        return j(b2, "toString") && (a2.toString = b2.toString), j(b2, "valueOf") && (a2.valueOf = b2.valueOf), a2;
      }
      function l(a2, b2, c2, d2) {
        return sb(a2, b2, c2, d2, true).utc();
      }
      function m() {
        return {empty: false, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: false, invalidMonth: null, invalidFormat: false, userInvalidated: false, iso: false, parsedDateParts: [], meridiem: null, rfc2822: false, weekdayMismatch: false};
      }
      function n(a2) {
        return a2._pf == null && (a2._pf = m()), a2._pf;
      }
      function o(a2) {
        if (a2._isValid == null) {
          var b2 = n(a2), c2 = ud.call(b2.parsedDateParts, function(a3) {
            return a3 != null;
          }), d2 = !isNaN(a2._d.getTime()) && b2.overflow < 0 && !b2.empty && !b2.invalidMonth && !b2.invalidWeekday && !b2.nullInput && !b2.invalidFormat && !b2.userInvalidated && (!b2.meridiem || b2.meridiem && c2);
          if (a2._strict && (d2 = d2 && b2.charsLeftOver === 0 && b2.unusedTokens.length === 0 && b2.bigHour === void 0), Object.isFrozen != null && Object.isFrozen(a2))
            return d2;
          a2._isValid = d2;
        }
        return a2._isValid;
      }
      function p(a2) {
        var b2 = l(NaN);
        return a2 != null ? k(n(b2), a2) : n(b2).userInvalidated = true, b2;
      }
      function q(a2, b2) {
        var c2, d2, e2;
        if (f(b2._isAMomentObject) || (a2._isAMomentObject = b2._isAMomentObject), f(b2._i) || (a2._i = b2._i), f(b2._f) || (a2._f = b2._f), f(b2._l) || (a2._l = b2._l), f(b2._strict) || (a2._strict = b2._strict), f(b2._tzm) || (a2._tzm = b2._tzm), f(b2._isUTC) || (a2._isUTC = b2._isUTC), f(b2._offset) || (a2._offset = b2._offset), f(b2._pf) || (a2._pf = n(b2)), f(b2._locale) || (a2._locale = b2._locale), vd.length > 0)
          for (c2 = 0; c2 < vd.length; c2++)
            d2 = vd[c2], e2 = b2[d2], f(e2) || (a2[d2] = e2);
        return a2;
      }
      function r(b2) {
        q(this, b2), this._d = new Date(b2._d != null ? b2._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), wd === false && (wd = true, a.updateOffset(this), wd = false);
      }
      function s(a2) {
        return a2 instanceof r || a2 != null && a2._isAMomentObject != null;
      }
      function t(a2) {
        return a2 < 0 ? Math.ceil(a2) || 0 : Math.floor(a2);
      }
      function u(a2) {
        var b2 = +a2, c2 = 0;
        return b2 !== 0 && isFinite(b2) && (c2 = t(b2)), c2;
      }
      function v(a2, b2, c2) {
        var d2, e2 = Math.min(a2.length, b2.length), f2 = Math.abs(a2.length - b2.length), g2 = 0;
        for (d2 = 0; d2 < e2; d2++)
          (c2 && a2[d2] !== b2[d2] || !c2 && u(a2[d2]) !== u(b2[d2])) && g2++;
        return g2 + f2;
      }
      function w(b2) {
        a.suppressDeprecationWarnings === false && typeof console != "undefined" && console.warn && console.warn("Deprecation warning: " + b2);
      }
      function x(b2, c2) {
        var d2 = true;
        return k(function() {
          if (a.deprecationHandler != null && a.deprecationHandler(null, b2), d2) {
            for (var e2, f2 = [], g2 = 0; g2 < arguments.length; g2++) {
              if (e2 = "", typeof arguments[g2] == "object") {
                e2 += "\n[" + g2 + "] ";
                for (var h2 in arguments[0])
                  e2 += h2 + ": " + arguments[0][h2] + ", ";
                e2 = e2.slice(0, -2);
              } else
                e2 = arguments[g2];
              f2.push(e2);
            }
            w(b2 + "\nArguments: " + Array.prototype.slice.call(f2).join("") + "\n" + new Error().stack), d2 = false;
          }
          return c2.apply(this, arguments);
        }, c2);
      }
      function y(b2, c2) {
        a.deprecationHandler != null && a.deprecationHandler(b2, c2), xd[b2] || (w(c2), xd[b2] = true);
      }
      function z(a2) {
        return a2 instanceof Function || Object.prototype.toString.call(a2) === "[object Function]";
      }
      function A(a2) {
        var b2, c2;
        for (c2 in a2)
          b2 = a2[c2], z(b2) ? this[c2] = b2 : this["_" + c2] = b2;
        this._config = a2, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }
      function B(a2, b2) {
        var c2, e2 = k({}, a2);
        for (c2 in b2)
          j(b2, c2) && (d(a2[c2]) && d(b2[c2]) ? (e2[c2] = {}, k(e2[c2], a2[c2]), k(e2[c2], b2[c2])) : b2[c2] != null ? e2[c2] = b2[c2] : delete e2[c2]);
        for (c2 in a2)
          j(a2, c2) && !j(b2, c2) && d(a2[c2]) && (e2[c2] = k({}, e2[c2]));
        return e2;
      }
      function C(a2) {
        a2 != null && this.set(a2);
      }
      function D(a2, b2, c2) {
        var d2 = this._calendar[a2] || this._calendar.sameElse;
        return z(d2) ? d2.call(b2, c2) : d2;
      }
      function E(a2) {
        var b2 = this._longDateFormat[a2], c2 = this._longDateFormat[a2.toUpperCase()];
        return b2 || !c2 ? b2 : (this._longDateFormat[a2] = c2.replace(/MMMM|MM|DD|dddd/g, function(a3) {
          return a3.slice(1);
        }), this._longDateFormat[a2]);
      }
      function F() {
        return this._invalidDate;
      }
      function G(a2) {
        return this._ordinal.replace("%d", a2);
      }
      function H(a2, b2, c2, d2) {
        var e2 = this._relativeTime[c2];
        return z(e2) ? e2(a2, b2, c2, d2) : e2.replace(/%d/i, a2);
      }
      function I(a2, b2) {
        var c2 = this._relativeTime[a2 > 0 ? "future" : "past"];
        return z(c2) ? c2(b2) : c2.replace(/%s/i, b2);
      }
      function J(a2, b2) {
        var c2 = a2.toLowerCase();
        Hd[c2] = Hd[c2 + "s"] = Hd[b2] = a2;
      }
      function K(a2) {
        return typeof a2 == "string" ? Hd[a2] || Hd[a2.toLowerCase()] : void 0;
      }
      function L(a2) {
        var b2, c2, d2 = {};
        for (c2 in a2)
          j(a2, c2) && (b2 = K(c2), b2 && (d2[b2] = a2[c2]));
        return d2;
      }
      function M(a2, b2) {
        Id[a2] = b2;
      }
      function N(a2) {
        var b2 = [];
        for (var c2 in a2)
          b2.push({unit: c2, priority: Id[c2]});
        return b2.sort(function(a3, b3) {
          return a3.priority - b3.priority;
        }), b2;
      }
      function O(b2, c2) {
        return function(d2) {
          return d2 != null ? (Q(this, b2, d2), a.updateOffset(this, c2), this) : P(this, b2);
        };
      }
      function P(a2, b2) {
        return a2.isValid() ? a2._d["get" + (a2._isUTC ? "UTC" : "") + b2]() : NaN;
      }
      function Q(a2, b2, c2) {
        a2.isValid() && a2._d["set" + (a2._isUTC ? "UTC" : "") + b2](c2);
      }
      function R(a2) {
        return a2 = K(a2), z(this[a2]) ? this[a2]() : this;
      }
      function S(a2, b2) {
        if (typeof a2 == "object") {
          a2 = L(a2);
          for (var c2 = N(a2), d2 = 0; d2 < c2.length; d2++)
            this[c2[d2].unit](a2[c2[d2].unit]);
        } else if (a2 = K(a2), z(this[a2]))
          return this[a2](b2);
        return this;
      }
      function T(a2, b2, c2) {
        var d2 = "" + Math.abs(a2), e2 = b2 - d2.length, f2 = a2 >= 0;
        return (f2 ? c2 ? "+" : "" : "-") + Math.pow(10, Math.max(0, e2)).toString().substr(1) + d2;
      }
      function U(a2, b2, c2, d2) {
        var e2 = d2;
        typeof d2 == "string" && (e2 = function() {
          return this[d2]();
        }), a2 && (Md[a2] = e2), b2 && (Md[b2[0]] = function() {
          return T(e2.apply(this, arguments), b2[1], b2[2]);
        }), c2 && (Md[c2] = function() {
          return this.localeData().ordinal(e2.apply(this, arguments), a2);
        });
      }
      function V(a2) {
        return a2.match(/\[[\s\S]/) ? a2.replace(/^\[|\]$/g, "") : a2.replace(/\\/g, "");
      }
      function W(a2) {
        var b2, c2, d2 = a2.match(Jd);
        for (b2 = 0, c2 = d2.length; b2 < c2; b2++)
          Md[d2[b2]] ? d2[b2] = Md[d2[b2]] : d2[b2] = V(d2[b2]);
        return function(b3) {
          var e2, f2 = "";
          for (e2 = 0; e2 < c2; e2++)
            f2 += z(d2[e2]) ? d2[e2].call(b3, a2) : d2[e2];
          return f2;
        };
      }
      function X(a2, b2) {
        return a2.isValid() ? (b2 = Y(b2, a2.localeData()), Ld[b2] = Ld[b2] || W(b2), Ld[b2](a2)) : a2.localeData().invalidDate();
      }
      function Y(a2, b2) {
        function c2(a3) {
          return b2.longDateFormat(a3) || a3;
        }
        var d2 = 5;
        for (Kd.lastIndex = 0; d2 >= 0 && Kd.test(a2); )
          a2 = a2.replace(Kd, c2), Kd.lastIndex = 0, d2 -= 1;
        return a2;
      }
      function Z(a2, b2, c2) {
        ce[a2] = z(b2) ? b2 : function(a3, d2) {
          return a3 && c2 ? c2 : b2;
        };
      }
      function $2(a2, b2) {
        return j(ce, a2) ? ce[a2](b2._strict, b2._locale) : new RegExp(_(a2));
      }
      function _(a2) {
        return aa(a2.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(a3, b2, c2, d2, e2) {
          return b2 || c2 || d2 || e2;
        }));
      }
      function aa(a2) {
        return a2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function ba(a2, b2) {
        var c2, d2 = b2;
        for (typeof a2 == "string" && (a2 = [a2]), g(b2) && (d2 = function(a3, c3) {
          c3[b2] = u(a3);
        }), c2 = 0; c2 < a2.length; c2++)
          de[a2[c2]] = d2;
      }
      function ca(a2, b2) {
        ba(a2, function(a3, c2, d2, e2) {
          d2._w = d2._w || {}, b2(a3, d2._w, d2, e2);
        });
      }
      function da(a2, b2, c2) {
        b2 != null && j(de, a2) && de[a2](b2, c2._a, c2, a2);
      }
      function ea(a2, b2) {
        return new Date(Date.UTC(a2, b2 + 1, 0)).getUTCDate();
      }
      function fa(a2, b2) {
        return a2 ? c(this._months) ? this._months[a2.month()] : this._months[(this._months.isFormat || oe).test(b2) ? "format" : "standalone"][a2.month()] : c(this._months) ? this._months : this._months.standalone;
      }
      function ga(a2, b2) {
        return a2 ? c(this._monthsShort) ? this._monthsShort[a2.month()] : this._monthsShort[oe.test(b2) ? "format" : "standalone"][a2.month()] : c(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
      }
      function ha(a2, b2, c2) {
        var d2, e2, f2, g2 = a2.toLocaleLowerCase();
        if (!this._monthsParse)
          for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], d2 = 0; d2 < 12; ++d2)
            f2 = l([2e3, d2]), this._shortMonthsParse[d2] = this.monthsShort(f2, "").toLocaleLowerCase(), this._longMonthsParse[d2] = this.months(f2, "").toLocaleLowerCase();
        return c2 ? b2 === "MMM" ? (e2 = ne.call(this._shortMonthsParse, g2), e2 !== -1 ? e2 : null) : (e2 = ne.call(this._longMonthsParse, g2), e2 !== -1 ? e2 : null) : b2 === "MMM" ? (e2 = ne.call(this._shortMonthsParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._longMonthsParse, g2), e2 !== -1 ? e2 : null)) : (e2 = ne.call(this._longMonthsParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._shortMonthsParse, g2), e2 !== -1 ? e2 : null));
      }
      function ia(a2, b2, c2) {
        var d2, e2, f2;
        if (this._monthsParseExact)
          return ha.call(this, a2, b2, c2);
        for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), d2 = 0; d2 < 12; d2++) {
          if (e2 = l([2e3, d2]), c2 && !this._longMonthsParse[d2] && (this._longMonthsParse[d2] = new RegExp("^" + this.months(e2, "").replace(".", "") + "$", "i"), this._shortMonthsParse[d2] = new RegExp("^" + this.monthsShort(e2, "").replace(".", "") + "$", "i")), c2 || this._monthsParse[d2] || (f2 = "^" + this.months(e2, "") + "|^" + this.monthsShort(e2, ""), this._monthsParse[d2] = new RegExp(f2.replace(".", ""), "i")), c2 && b2 === "MMMM" && this._longMonthsParse[d2].test(a2))
            return d2;
          if (c2 && b2 === "MMM" && this._shortMonthsParse[d2].test(a2))
            return d2;
          if (!c2 && this._monthsParse[d2].test(a2))
            return d2;
        }
      }
      function ja(a2, b2) {
        var c2;
        if (!a2.isValid())
          return a2;
        if (typeof b2 == "string") {
          if (/^\d+$/.test(b2))
            b2 = u(b2);
          else if (b2 = a2.localeData().monthsParse(b2), !g(b2))
            return a2;
        }
        return c2 = Math.min(a2.date(), ea(a2.year(), b2)), a2._d["set" + (a2._isUTC ? "UTC" : "") + "Month"](b2, c2), a2;
      }
      function ka(b2) {
        return b2 != null ? (ja(this, b2), a.updateOffset(this, true), this) : P(this, "Month");
      }
      function la() {
        return ea(this.year(), this.month());
      }
      function ma(a2) {
        return this._monthsParseExact ? (j(this, "_monthsRegex") || oa.call(this), a2 ? this._monthsShortStrictRegex : this._monthsShortRegex) : (j(this, "_monthsShortRegex") || (this._monthsShortRegex = re), this._monthsShortStrictRegex && a2 ? this._monthsShortStrictRegex : this._monthsShortRegex);
      }
      function na(a2) {
        return this._monthsParseExact ? (j(this, "_monthsRegex") || oa.call(this), a2 ? this._monthsStrictRegex : this._monthsRegex) : (j(this, "_monthsRegex") || (this._monthsRegex = se), this._monthsStrictRegex && a2 ? this._monthsStrictRegex : this._monthsRegex);
      }
      function oa() {
        function a2(a3, b3) {
          return b3.length - a3.length;
        }
        var b2, c2, d2 = [], e2 = [], f2 = [];
        for (b2 = 0; b2 < 12; b2++)
          c2 = l([2e3, b2]), d2.push(this.monthsShort(c2, "")), e2.push(this.months(c2, "")), f2.push(this.months(c2, "")), f2.push(this.monthsShort(c2, ""));
        for (d2.sort(a2), e2.sort(a2), f2.sort(a2), b2 = 0; b2 < 12; b2++)
          d2[b2] = aa(d2[b2]), e2[b2] = aa(e2[b2]);
        for (b2 = 0; b2 < 24; b2++)
          f2[b2] = aa(f2[b2]);
        this._monthsRegex = new RegExp("^(" + f2.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + e2.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + d2.join("|") + ")", "i");
      }
      function pa(a2) {
        return qa(a2) ? 366 : 365;
      }
      function qa(a2) {
        return a2 % 4 === 0 && a2 % 100 !== 0 || a2 % 400 === 0;
      }
      function ra() {
        return qa(this.year());
      }
      function sa(a2, b2, c2, d2, e2, f2, g2) {
        var h2 = new Date(a2, b2, c2, d2, e2, f2, g2);
        return a2 < 100 && a2 >= 0 && isFinite(h2.getFullYear()) && h2.setFullYear(a2), h2;
      }
      function ta(a2) {
        var b2 = new Date(Date.UTC.apply(null, arguments));
        return a2 < 100 && a2 >= 0 && isFinite(b2.getUTCFullYear()) && b2.setUTCFullYear(a2), b2;
      }
      function ua(a2, b2, c2) {
        var d2 = 7 + b2 - c2, e2 = (7 + ta(a2, 0, d2).getUTCDay() - b2) % 7;
        return -e2 + d2 - 1;
      }
      function va(a2, b2, c2, d2, e2) {
        var f2, g2, h2 = (7 + c2 - d2) % 7, i2 = ua(a2, d2, e2), j2 = 1 + 7 * (b2 - 1) + h2 + i2;
        return j2 <= 0 ? (f2 = a2 - 1, g2 = pa(f2) + j2) : j2 > pa(a2) ? (f2 = a2 + 1, g2 = j2 - pa(a2)) : (f2 = a2, g2 = j2), {year: f2, dayOfYear: g2};
      }
      function wa(a2, b2, c2) {
        var d2, e2, f2 = ua(a2.year(), b2, c2), g2 = Math.floor((a2.dayOfYear() - f2 - 1) / 7) + 1;
        return g2 < 1 ? (e2 = a2.year() - 1, d2 = g2 + xa(e2, b2, c2)) : g2 > xa(a2.year(), b2, c2) ? (d2 = g2 - xa(a2.year(), b2, c2), e2 = a2.year() + 1) : (e2 = a2.year(), d2 = g2), {week: d2, year: e2};
      }
      function xa(a2, b2, c2) {
        var d2 = ua(a2, b2, c2), e2 = ua(a2 + 1, b2, c2);
        return (pa(a2) - d2 + e2) / 7;
      }
      function ya(a2) {
        return wa(a2, this._week.dow, this._week.doy).week;
      }
      function za() {
        return this._week.dow;
      }
      function Aa() {
        return this._week.doy;
      }
      function Ba(a2) {
        var b2 = this.localeData().week(this);
        return a2 == null ? b2 : this.add(7 * (a2 - b2), "d");
      }
      function Ca(a2) {
        var b2 = wa(this, 1, 4).week;
        return a2 == null ? b2 : this.add(7 * (a2 - b2), "d");
      }
      function Da(a2, b2) {
        return typeof a2 != "string" ? a2 : isNaN(a2) ? (a2 = b2.weekdaysParse(a2), typeof a2 == "number" ? a2 : null) : parseInt(a2, 10);
      }
      function Ea(a2, b2) {
        return typeof a2 == "string" ? b2.weekdaysParse(a2) % 7 || 7 : isNaN(a2) ? null : a2;
      }
      function Fa(a2, b2) {
        return a2 ? c(this._weekdays) ? this._weekdays[a2.day()] : this._weekdays[this._weekdays.isFormat.test(b2) ? "format" : "standalone"][a2.day()] : c(this._weekdays) ? this._weekdays : this._weekdays.standalone;
      }
      function Ga(a2) {
        return a2 ? this._weekdaysShort[a2.day()] : this._weekdaysShort;
      }
      function Ha(a2) {
        return a2 ? this._weekdaysMin[a2.day()] : this._weekdaysMin;
      }
      function Ia(a2, b2, c2) {
        var d2, e2, f2, g2 = a2.toLocaleLowerCase();
        if (!this._weekdaysParse)
          for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], d2 = 0; d2 < 7; ++d2)
            f2 = l([2e3, 1]).day(d2), this._minWeekdaysParse[d2] = this.weekdaysMin(f2, "").toLocaleLowerCase(), this._shortWeekdaysParse[d2] = this.weekdaysShort(f2, "").toLocaleLowerCase(), this._weekdaysParse[d2] = this.weekdays(f2, "").toLocaleLowerCase();
        return c2 ? b2 === "dddd" ? (e2 = ne.call(this._weekdaysParse, g2), e2 !== -1 ? e2 : null) : b2 === "ddd" ? (e2 = ne.call(this._shortWeekdaysParse, g2), e2 !== -1 ? e2 : null) : (e2 = ne.call(this._minWeekdaysParse, g2), e2 !== -1 ? e2 : null) : b2 === "dddd" ? (e2 = ne.call(this._weekdaysParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._shortWeekdaysParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._minWeekdaysParse, g2), e2 !== -1 ? e2 : null))) : b2 === "ddd" ? (e2 = ne.call(this._shortWeekdaysParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._weekdaysParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._minWeekdaysParse, g2), e2 !== -1 ? e2 : null))) : (e2 = ne.call(this._minWeekdaysParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._weekdaysParse, g2), e2 !== -1 ? e2 : (e2 = ne.call(this._shortWeekdaysParse, g2), e2 !== -1 ? e2 : null)));
      }
      function Ja(a2, b2, c2) {
        var d2, e2, f2;
        if (this._weekdaysParseExact)
          return Ia.call(this, a2, b2, c2);
        for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), d2 = 0; d2 < 7; d2++) {
          if (e2 = l([2e3, 1]).day(d2), c2 && !this._fullWeekdaysParse[d2] && (this._fullWeekdaysParse[d2] = new RegExp("^" + this.weekdays(e2, "").replace(".", ".?") + "$", "i"), this._shortWeekdaysParse[d2] = new RegExp("^" + this.weekdaysShort(e2, "").replace(".", ".?") + "$", "i"), this._minWeekdaysParse[d2] = new RegExp("^" + this.weekdaysMin(e2, "").replace(".", ".?") + "$", "i")), this._weekdaysParse[d2] || (f2 = "^" + this.weekdays(e2, "") + "|^" + this.weekdaysShort(e2, "") + "|^" + this.weekdaysMin(e2, ""), this._weekdaysParse[d2] = new RegExp(f2.replace(".", ""), "i")), c2 && b2 === "dddd" && this._fullWeekdaysParse[d2].test(a2))
            return d2;
          if (c2 && b2 === "ddd" && this._shortWeekdaysParse[d2].test(a2))
            return d2;
          if (c2 && b2 === "dd" && this._minWeekdaysParse[d2].test(a2))
            return d2;
          if (!c2 && this._weekdaysParse[d2].test(a2))
            return d2;
        }
      }
      function Ka(a2) {
        if (!this.isValid())
          return a2 != null ? this : NaN;
        var b2 = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        return a2 != null ? (a2 = Da(a2, this.localeData()), this.add(a2 - b2, "d")) : b2;
      }
      function La(a2) {
        if (!this.isValid())
          return a2 != null ? this : NaN;
        var b2 = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return a2 == null ? b2 : this.add(a2 - b2, "d");
      }
      function Ma(a2) {
        if (!this.isValid())
          return a2 != null ? this : NaN;
        if (a2 != null) {
          var b2 = Ea(a2, this.localeData());
          return this.day(this.day() % 7 ? b2 : b2 - 7);
        }
        return this.day() || 7;
      }
      function Na(a2) {
        return this._weekdaysParseExact ? (j(this, "_weekdaysRegex") || Qa.call(this), a2 ? this._weekdaysStrictRegex : this._weekdaysRegex) : (j(this, "_weekdaysRegex") || (this._weekdaysRegex = ye), this._weekdaysStrictRegex && a2 ? this._weekdaysStrictRegex : this._weekdaysRegex);
      }
      function Oa(a2) {
        return this._weekdaysParseExact ? (j(this, "_weekdaysRegex") || Qa.call(this), a2 ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (j(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = ze), this._weekdaysShortStrictRegex && a2 ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
      }
      function Pa(a2) {
        return this._weekdaysParseExact ? (j(this, "_weekdaysRegex") || Qa.call(this), a2 ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (j(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Ae), this._weekdaysMinStrictRegex && a2 ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
      }
      function Qa() {
        function a2(a3, b3) {
          return b3.length - a3.length;
        }
        var b2, c2, d2, e2, f2, g2 = [], h2 = [], i2 = [], j2 = [];
        for (b2 = 0; b2 < 7; b2++)
          c2 = l([2e3, 1]).day(b2), d2 = this.weekdaysMin(c2, ""), e2 = this.weekdaysShort(c2, ""), f2 = this.weekdays(c2, ""), g2.push(d2), h2.push(e2), i2.push(f2), j2.push(d2), j2.push(e2), j2.push(f2);
        for (g2.sort(a2), h2.sort(a2), i2.sort(a2), j2.sort(a2), b2 = 0; b2 < 7; b2++)
          h2[b2] = aa(h2[b2]), i2[b2] = aa(i2[b2]), j2[b2] = aa(j2[b2]);
        this._weekdaysRegex = new RegExp("^(" + j2.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + i2.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + h2.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + g2.join("|") + ")", "i");
      }
      function Ra() {
        return this.hours() % 12 || 12;
      }
      function Sa() {
        return this.hours() || 24;
      }
      function Ta(a2, b2) {
        U(a2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), b2);
        });
      }
      function Ua(a2, b2) {
        return b2._meridiemParse;
      }
      function Va(a2) {
        return (a2 + "").toLowerCase().charAt(0) === "p";
      }
      function Wa(a2, b2, c2) {
        return a2 > 11 ? c2 ? "pm" : "PM" : c2 ? "am" : "AM";
      }
      function Xa(a2) {
        return a2 ? a2.toLowerCase().replace("_", "-") : a2;
      }
      function Ya(a2) {
        for (var b2, c2, d2, e2, f2 = 0; f2 < a2.length; ) {
          for (e2 = Xa(a2[f2]).split("-"), b2 = e2.length, c2 = Xa(a2[f2 + 1]), c2 = c2 ? c2.split("-") : null; b2 > 0; ) {
            if (d2 = Za(e2.slice(0, b2).join("-")))
              return d2;
            if (c2 && c2.length >= b2 && v(e2, c2, true) >= b2 - 1)
              break;
            b2--;
          }
          f2++;
        }
        return null;
      }
      function Za(a2) {
        var b2 = null;
        if (!Fe[a2] && typeof module != "undefined" && module && module.exports)
          try {
            b2 = Be._abbr, require("./locale/" + a2), $a(b2);
          } catch (a3) {
          }
        return Fe[a2];
      }
      function $a(a2, b2) {
        var c2;
        return a2 && (c2 = f(b2) ? bb(a2) : _a(a2, b2), c2 && (Be = c2)), Be._abbr;
      }
      function _a(a2, b2) {
        if (b2 !== null) {
          var c2 = Ee;
          if (b2.abbr = a2, Fe[a2] != null)
            y("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), c2 = Fe[a2]._config;
          else if (b2.parentLocale != null) {
            if (Fe[b2.parentLocale] == null)
              return Ge[b2.parentLocale] || (Ge[b2.parentLocale] = []), Ge[b2.parentLocale].push({name: a2, config: b2}), null;
            c2 = Fe[b2.parentLocale]._config;
          }
          return Fe[a2] = new C(B(c2, b2)), Ge[a2] && Ge[a2].forEach(function(a3) {
            _a(a3.name, a3.config);
          }), $a(a2), Fe[a2];
        }
        return delete Fe[a2], null;
      }
      function ab(a2, b2) {
        if (b2 != null) {
          var c2, d2 = Ee;
          Fe[a2] != null && (d2 = Fe[a2]._config), b2 = B(d2, b2), c2 = new C(b2), c2.parentLocale = Fe[a2], Fe[a2] = c2, $a(a2);
        } else
          Fe[a2] != null && (Fe[a2].parentLocale != null ? Fe[a2] = Fe[a2].parentLocale : Fe[a2] != null && delete Fe[a2]);
        return Fe[a2];
      }
      function bb(a2) {
        var b2;
        if (a2 && a2._locale && a2._locale._abbr && (a2 = a2._locale._abbr), !a2)
          return Be;
        if (!c(a2)) {
          if (b2 = Za(a2))
            return b2;
          a2 = [a2];
        }
        return Ya(a2);
      }
      function cb() {
        return Ad(Fe);
      }
      function db(a2) {
        var b2, c2 = a2._a;
        return c2 && n(a2).overflow === -2 && (b2 = c2[fe] < 0 || c2[fe] > 11 ? fe : c2[ge] < 1 || c2[ge] > ea(c2[ee], c2[fe]) ? ge : c2[he] < 0 || c2[he] > 24 || c2[he] === 24 && (c2[ie] !== 0 || c2[je] !== 0 || c2[ke] !== 0) ? he : c2[ie] < 0 || c2[ie] > 59 ? ie : c2[je] < 0 || c2[je] > 59 ? je : c2[ke] < 0 || c2[ke] > 999 ? ke : -1, n(a2)._overflowDayOfYear && (b2 < ee || b2 > ge) && (b2 = ge), n(a2)._overflowWeeks && b2 === -1 && (b2 = le), n(a2)._overflowWeekday && b2 === -1 && (b2 = me), n(a2).overflow = b2), a2;
      }
      function eb(a2) {
        var b2, c2, d2, e2, f2, g2, h2 = a2._i, i2 = He.exec(h2) || Ie.exec(h2);
        if (i2) {
          for (n(a2).iso = true, b2 = 0, c2 = Ke.length; b2 < c2; b2++)
            if (Ke[b2][1].exec(i2[1])) {
              e2 = Ke[b2][0], d2 = Ke[b2][2] !== false;
              break;
            }
          if (e2 == null)
            return void (a2._isValid = false);
          if (i2[3]) {
            for (b2 = 0, c2 = Le.length; b2 < c2; b2++)
              if (Le[b2][1].exec(i2[3])) {
                f2 = (i2[2] || " ") + Le[b2][0];
                break;
              }
            if (f2 == null)
              return void (a2._isValid = false);
          }
          if (!d2 && f2 != null)
            return void (a2._isValid = false);
          if (i2[4]) {
            if (!Je.exec(i2[4]))
              return void (a2._isValid = false);
            g2 = "Z";
          }
          a2._f = e2 + (f2 || "") + (g2 || ""), lb(a2);
        } else
          a2._isValid = false;
      }
      function fb(a2) {
        var b2, c2, d2, e2, f2, g2, h2, i2, j2 = {" GMT": " +0000", " EDT": " -0400", " EST": " -0500", " CDT": " -0500", " CST": " -0600", " MDT": " -0600", " MST": " -0700", " PDT": " -0700", " PST": " -0800"}, k2 = "YXWVUTSRQPONZABCDEFGHIKLM";
        if (b2 = a2._i.replace(/\([^\)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s|\s$/g, ""), c2 = Ne.exec(b2)) {
          if (d2 = c2[1] ? "ddd" + (c2[1].length === 5 ? ", " : " ") : "", e2 = "D MMM " + (c2[2].length > 10 ? "YYYY " : "YY "), f2 = "HH:mm" + (c2[4] ? ":ss" : ""), c2[1]) {
            var l2 = new Date(c2[2]), m2 = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][l2.getDay()];
            if (c2[1].substr(0, 3) !== m2)
              return n(a2).weekdayMismatch = true, void (a2._isValid = false);
          }
          switch (c2[5].length) {
            case 2:
              i2 === 0 ? h2 = " +0000" : (i2 = k2.indexOf(c2[5][1].toUpperCase()) - 12, h2 = (i2 < 0 ? " -" : " +") + ("" + i2).replace(/^-?/, "0").match(/..$/)[0] + "00");
              break;
            case 4:
              h2 = j2[c2[5]];
              break;
            default:
              h2 = j2[" GMT"];
          }
          c2[5] = h2, a2._i = c2.splice(1).join(""), g2 = " ZZ", a2._f = d2 + e2 + f2 + g2, lb(a2), n(a2).rfc2822 = true;
        } else
          a2._isValid = false;
      }
      function gb(b2) {
        var c2 = Me.exec(b2._i);
        return c2 !== null ? void (b2._d = new Date(+c2[1])) : (eb(b2), void (b2._isValid === false && (delete b2._isValid, fb(b2), b2._isValid === false && (delete b2._isValid, a.createFromInputFallback(b2)))));
      }
      function hb(a2, b2, c2) {
        return a2 != null ? a2 : b2 != null ? b2 : c2;
      }
      function ib(b2) {
        var c2 = new Date(a.now());
        return b2._useUTC ? [c2.getUTCFullYear(), c2.getUTCMonth(), c2.getUTCDate()] : [c2.getFullYear(), c2.getMonth(), c2.getDate()];
      }
      function jb(a2) {
        var b2, c2, d2, e2, f2 = [];
        if (!a2._d) {
          for (d2 = ib(a2), a2._w && a2._a[ge] == null && a2._a[fe] == null && kb(a2), a2._dayOfYear != null && (e2 = hb(a2._a[ee], d2[ee]), (a2._dayOfYear > pa(e2) || a2._dayOfYear === 0) && (n(a2)._overflowDayOfYear = true), c2 = ta(e2, 0, a2._dayOfYear), a2._a[fe] = c2.getUTCMonth(), a2._a[ge] = c2.getUTCDate()), b2 = 0; b2 < 3 && a2._a[b2] == null; ++b2)
            a2._a[b2] = f2[b2] = d2[b2];
          for (; b2 < 7; b2++)
            a2._a[b2] = f2[b2] = a2._a[b2] == null ? b2 === 2 ? 1 : 0 : a2._a[b2];
          a2._a[he] === 24 && a2._a[ie] === 0 && a2._a[je] === 0 && a2._a[ke] === 0 && (a2._nextDay = true, a2._a[he] = 0), a2._d = (a2._useUTC ? ta : sa).apply(null, f2), a2._tzm != null && a2._d.setUTCMinutes(a2._d.getUTCMinutes() - a2._tzm), a2._nextDay && (a2._a[he] = 24);
        }
      }
      function kb(a2) {
        var b2, c2, d2, e2, f2, g2, h2, i2;
        if (b2 = a2._w, b2.GG != null || b2.W != null || b2.E != null)
          f2 = 1, g2 = 4, c2 = hb(b2.GG, a2._a[ee], wa(tb(), 1, 4).year), d2 = hb(b2.W, 1), e2 = hb(b2.E, 1), (e2 < 1 || e2 > 7) && (i2 = true);
        else {
          f2 = a2._locale._week.dow, g2 = a2._locale._week.doy;
          var j2 = wa(tb(), f2, g2);
          c2 = hb(b2.gg, a2._a[ee], j2.year), d2 = hb(b2.w, j2.week), b2.d != null ? (e2 = b2.d, (e2 < 0 || e2 > 6) && (i2 = true)) : b2.e != null ? (e2 = b2.e + f2, (b2.e < 0 || b2.e > 6) && (i2 = true)) : e2 = f2;
        }
        d2 < 1 || d2 > xa(c2, f2, g2) ? n(a2)._overflowWeeks = true : i2 != null ? n(a2)._overflowWeekday = true : (h2 = va(c2, d2, e2, f2, g2), a2._a[ee] = h2.year, a2._dayOfYear = h2.dayOfYear);
      }
      function lb(b2) {
        if (b2._f === a.ISO_8601)
          return void eb(b2);
        if (b2._f === a.RFC_2822)
          return void fb(b2);
        b2._a = [], n(b2).empty = true;
        var c2, d2, e2, f2, g2, h2 = "" + b2._i, i2 = h2.length, j2 = 0;
        for (e2 = Y(b2._f, b2._locale).match(Jd) || [], c2 = 0; c2 < e2.length; c2++)
          f2 = e2[c2], d2 = (h2.match($2(f2, b2)) || [])[0], d2 && (g2 = h2.substr(0, h2.indexOf(d2)), g2.length > 0 && n(b2).unusedInput.push(g2), h2 = h2.slice(h2.indexOf(d2) + d2.length), j2 += d2.length), Md[f2] ? (d2 ? n(b2).empty = false : n(b2).unusedTokens.push(f2), da(f2, d2, b2)) : b2._strict && !d2 && n(b2).unusedTokens.push(f2);
        n(b2).charsLeftOver = i2 - j2, h2.length > 0 && n(b2).unusedInput.push(h2), b2._a[he] <= 12 && n(b2).bigHour === true && b2._a[he] > 0 && (n(b2).bigHour = void 0), n(b2).parsedDateParts = b2._a.slice(0), n(b2).meridiem = b2._meridiem, b2._a[he] = mb(b2._locale, b2._a[he], b2._meridiem), jb(b2), db(b2);
      }
      function mb(a2, b2, c2) {
        var d2;
        return c2 == null ? b2 : a2.meridiemHour != null ? a2.meridiemHour(b2, c2) : a2.isPM != null ? (d2 = a2.isPM(c2), d2 && b2 < 12 && (b2 += 12), d2 || b2 !== 12 || (b2 = 0), b2) : b2;
      }
      function nb(a2) {
        var b2, c2, d2, e2, f2;
        if (a2._f.length === 0)
          return n(a2).invalidFormat = true, void (a2._d = new Date(NaN));
        for (e2 = 0; e2 < a2._f.length; e2++)
          f2 = 0, b2 = q({}, a2), a2._useUTC != null && (b2._useUTC = a2._useUTC), b2._f = a2._f[e2], lb(b2), o(b2) && (f2 += n(b2).charsLeftOver, f2 += 10 * n(b2).unusedTokens.length, n(b2).score = f2, (d2 == null || f2 < d2) && (d2 = f2, c2 = b2));
        k(a2, c2 || b2);
      }
      function ob(a2) {
        if (!a2._d) {
          var b2 = L(a2._i);
          a2._a = i([b2.year, b2.month, b2.day || b2.date, b2.hour, b2.minute, b2.second, b2.millisecond], function(a3) {
            return a3 && parseInt(a3, 10);
          }), jb(a2);
        }
      }
      function pb(a2) {
        var b2 = new r(db(qb(a2)));
        return b2._nextDay && (b2.add(1, "d"), b2._nextDay = void 0), b2;
      }
      function qb(a2) {
        var b2 = a2._i, d2 = a2._f;
        return a2._locale = a2._locale || bb(a2._l), b2 === null || d2 === void 0 && b2 === "" ? p({nullInput: true}) : (typeof b2 == "string" && (a2._i = b2 = a2._locale.preparse(b2)), s(b2) ? new r(db(b2)) : (h(b2) ? a2._d = b2 : c(d2) ? nb(a2) : d2 ? lb(a2) : rb(a2), o(a2) || (a2._d = null), a2));
      }
      function rb(b2) {
        var e2 = b2._i;
        f(e2) ? b2._d = new Date(a.now()) : h(e2) ? b2._d = new Date(e2.valueOf()) : typeof e2 == "string" ? gb(b2) : c(e2) ? (b2._a = i(e2.slice(0), function(a2) {
          return parseInt(a2, 10);
        }), jb(b2)) : d(e2) ? ob(b2) : g(e2) ? b2._d = new Date(e2) : a.createFromInputFallback(b2);
      }
      function sb(a2, b2, f2, g2, h2) {
        var i2 = {};
        return f2 !== true && f2 !== false || (g2 = f2, f2 = void 0), (d(a2) && e(a2) || c(a2) && a2.length === 0) && (a2 = void 0), i2._isAMomentObject = true, i2._useUTC = i2._isUTC = h2, i2._l = f2, i2._i = a2, i2._f = b2, i2._strict = g2, pb(i2);
      }
      function tb(a2, b2, c2, d2) {
        return sb(a2, b2, c2, d2, false);
      }
      function ub(a2, b2) {
        var d2, e2;
        if (b2.length === 1 && c(b2[0]) && (b2 = b2[0]), !b2.length)
          return tb();
        for (d2 = b2[0], e2 = 1; e2 < b2.length; ++e2)
          b2[e2].isValid() && !b2[e2][a2](d2) || (d2 = b2[e2]);
        return d2;
      }
      function vb() {
        var a2 = [].slice.call(arguments, 0);
        return ub("isBefore", a2);
      }
      function wb() {
        var a2 = [].slice.call(arguments, 0);
        return ub("isAfter", a2);
      }
      function xb(a2) {
        for (var b2 in a2)
          if (Re.indexOf(b2) === -1 || a2[b2] != null && isNaN(a2[b2]))
            return false;
        for (var c2 = false, d2 = 0; d2 < Re.length; ++d2)
          if (a2[Re[d2]]) {
            if (c2)
              return false;
            parseFloat(a2[Re[d2]]) !== u(a2[Re[d2]]) && (c2 = true);
          }
        return true;
      }
      function yb() {
        return this._isValid;
      }
      function zb() {
        return Sb(NaN);
      }
      function Ab(a2) {
        var b2 = L(a2), c2 = b2.year || 0, d2 = b2.quarter || 0, e2 = b2.month || 0, f2 = b2.week || 0, g2 = b2.day || 0, h2 = b2.hour || 0, i2 = b2.minute || 0, j2 = b2.second || 0, k2 = b2.millisecond || 0;
        this._isValid = xb(b2), this._milliseconds = +k2 + 1e3 * j2 + 6e4 * i2 + 1e3 * h2 * 60 * 60, this._days = +g2 + 7 * f2, this._months = +e2 + 3 * d2 + 12 * c2, this._data = {}, this._locale = bb(), this._bubble();
      }
      function Bb(a2) {
        return a2 instanceof Ab;
      }
      function Cb(a2) {
        return a2 < 0 ? Math.round(-1 * a2) * -1 : Math.round(a2);
      }
      function Db(a2, b2) {
        U(a2, 0, 0, function() {
          var a3 = this.utcOffset(), c2 = "+";
          return a3 < 0 && (a3 = -a3, c2 = "-"), c2 + T(~~(a3 / 60), 2) + b2 + T(~~a3 % 60, 2);
        });
      }
      function Eb(a2, b2) {
        var c2 = (b2 || "").match(a2);
        if (c2 === null)
          return null;
        var d2 = c2[c2.length - 1] || [], e2 = (d2 + "").match(Se) || ["-", 0, 0], f2 = +(60 * e2[1]) + u(e2[2]);
        return f2 === 0 ? 0 : e2[0] === "+" ? f2 : -f2;
      }
      function Fb(b2, c2) {
        var d2, e2;
        return c2._isUTC ? (d2 = c2.clone(), e2 = (s(b2) || h(b2) ? b2.valueOf() : tb(b2).valueOf()) - d2.valueOf(), d2._d.setTime(d2._d.valueOf() + e2), a.updateOffset(d2, false), d2) : tb(b2).local();
      }
      function Gb(a2) {
        return 15 * -Math.round(a2._d.getTimezoneOffset() / 15);
      }
      function Hb(b2, c2, d2) {
        var e2, f2 = this._offset || 0;
        if (!this.isValid())
          return b2 != null ? this : NaN;
        if (b2 != null) {
          if (typeof b2 == "string") {
            if (b2 = Eb(_d, b2), b2 === null)
              return this;
          } else
            Math.abs(b2) < 16 && !d2 && (b2 = 60 * b2);
          return !this._isUTC && c2 && (e2 = Gb(this)), this._offset = b2, this._isUTC = true, e2 != null && this.add(e2, "m"), f2 !== b2 && (!c2 || this._changeInProgress ? Xb(this, Sb(b2 - f2, "m"), 1, false) : this._changeInProgress || (this._changeInProgress = true, a.updateOffset(this, true), this._changeInProgress = null)), this;
        }
        return this._isUTC ? f2 : Gb(this);
      }
      function Ib(a2, b2) {
        return a2 != null ? (typeof a2 != "string" && (a2 = -a2), this.utcOffset(a2, b2), this) : -this.utcOffset();
      }
      function Jb(a2) {
        return this.utcOffset(0, a2);
      }
      function Kb(a2) {
        return this._isUTC && (this.utcOffset(0, a2), this._isUTC = false, a2 && this.subtract(Gb(this), "m")), this;
      }
      function Lb() {
        if (this._tzm != null)
          this.utcOffset(this._tzm, false, true);
        else if (typeof this._i == "string") {
          var a2 = Eb($d, this._i);
          a2 != null ? this.utcOffset(a2) : this.utcOffset(0, true);
        }
        return this;
      }
      function Mb(a2) {
        return !!this.isValid() && (a2 = a2 ? tb(a2).utcOffset() : 0, (this.utcOffset() - a2) % 60 === 0);
      }
      function Nb() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function Ob() {
        if (!f(this._isDSTShifted))
          return this._isDSTShifted;
        var a2 = {};
        if (q(a2, this), a2 = qb(a2), a2._a) {
          var b2 = a2._isUTC ? l(a2._a) : tb(a2._a);
          this._isDSTShifted = this.isValid() && v(a2._a, b2.toArray()) > 0;
        } else
          this._isDSTShifted = false;
        return this._isDSTShifted;
      }
      function Pb() {
        return !!this.isValid() && !this._isUTC;
      }
      function Qb() {
        return !!this.isValid() && this._isUTC;
      }
      function Rb() {
        return !!this.isValid() && (this._isUTC && this._offset === 0);
      }
      function Sb(a2, b2) {
        var c2, d2, e2, f2 = a2, h2 = null;
        return Bb(a2) ? f2 = {ms: a2._milliseconds, d: a2._days, M: a2._months} : g(a2) ? (f2 = {}, b2 ? f2[b2] = a2 : f2.milliseconds = a2) : (h2 = Te.exec(a2)) ? (c2 = h2[1] === "-" ? -1 : 1, f2 = {y: 0, d: u(h2[ge]) * c2, h: u(h2[he]) * c2, m: u(h2[ie]) * c2, s: u(h2[je]) * c2, ms: u(Cb(1e3 * h2[ke])) * c2}) : (h2 = Ue.exec(a2)) ? (c2 = h2[1] === "-" ? -1 : 1, f2 = {y: Tb(h2[2], c2), M: Tb(h2[3], c2), w: Tb(h2[4], c2), d: Tb(h2[5], c2), h: Tb(h2[6], c2), m: Tb(h2[7], c2), s: Tb(h2[8], c2)}) : f2 == null ? f2 = {} : typeof f2 == "object" && ("from" in f2 || "to" in f2) && (e2 = Vb(tb(f2.from), tb(f2.to)), f2 = {}, f2.ms = e2.milliseconds, f2.M = e2.months), d2 = new Ab(f2), Bb(a2) && j(a2, "_locale") && (d2._locale = a2._locale), d2;
      }
      function Tb(a2, b2) {
        var c2 = a2 && parseFloat(a2.replace(",", "."));
        return (isNaN(c2) ? 0 : c2) * b2;
      }
      function Ub(a2, b2) {
        var c2 = {milliseconds: 0, months: 0};
        return c2.months = b2.month() - a2.month() + 12 * (b2.year() - a2.year()), a2.clone().add(c2.months, "M").isAfter(b2) && --c2.months, c2.milliseconds = +b2 - +a2.clone().add(c2.months, "M"), c2;
      }
      function Vb(a2, b2) {
        var c2;
        return a2.isValid() && b2.isValid() ? (b2 = Fb(b2, a2), a2.isBefore(b2) ? c2 = Ub(a2, b2) : (c2 = Ub(b2, a2), c2.milliseconds = -c2.milliseconds, c2.months = -c2.months), c2) : {milliseconds: 0, months: 0};
      }
      function Wb(a2, b2) {
        return function(c2, d2) {
          var e2, f2;
          return d2 === null || isNaN(+d2) || (y(b2, "moment()." + b2 + "(period, number) is deprecated. Please use moment()." + b2 + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), f2 = c2, c2 = d2, d2 = f2), c2 = typeof c2 == "string" ? +c2 : c2, e2 = Sb(c2, d2), Xb(this, e2, a2), this;
        };
      }
      function Xb(b2, c2, d2, e2) {
        var f2 = c2._milliseconds, g2 = Cb(c2._days), h2 = Cb(c2._months);
        b2.isValid() && (e2 = e2 == null || e2, f2 && b2._d.setTime(b2._d.valueOf() + f2 * d2), g2 && Q(b2, "Date", P(b2, "Date") + g2 * d2), h2 && ja(b2, P(b2, "Month") + h2 * d2), e2 && a.updateOffset(b2, g2 || h2));
      }
      function Yb(a2, b2) {
        var c2 = a2.diff(b2, "days", true);
        return c2 < -6 ? "sameElse" : c2 < -1 ? "lastWeek" : c2 < 0 ? "lastDay" : c2 < 1 ? "sameDay" : c2 < 2 ? "nextDay" : c2 < 7 ? "nextWeek" : "sameElse";
      }
      function Zb(b2, c2) {
        var d2 = b2 || tb(), e2 = Fb(d2, this).startOf("day"), f2 = a.calendarFormat(this, e2) || "sameElse", g2 = c2 && (z(c2[f2]) ? c2[f2].call(this, d2) : c2[f2]);
        return this.format(g2 || this.localeData().calendar(f2, this, tb(d2)));
      }
      function $b() {
        return new r(this);
      }
      function _b(a2, b2) {
        var c2 = s(a2) ? a2 : tb(a2);
        return !(!this.isValid() || !c2.isValid()) && (b2 = K(f(b2) ? "millisecond" : b2), b2 === "millisecond" ? this.valueOf() > c2.valueOf() : c2.valueOf() < this.clone().startOf(b2).valueOf());
      }
      function ac(a2, b2) {
        var c2 = s(a2) ? a2 : tb(a2);
        return !(!this.isValid() || !c2.isValid()) && (b2 = K(f(b2) ? "millisecond" : b2), b2 === "millisecond" ? this.valueOf() < c2.valueOf() : this.clone().endOf(b2).valueOf() < c2.valueOf());
      }
      function bc(a2, b2, c2, d2) {
        return d2 = d2 || "()", (d2[0] === "(" ? this.isAfter(a2, c2) : !this.isBefore(a2, c2)) && (d2[1] === ")" ? this.isBefore(b2, c2) : !this.isAfter(b2, c2));
      }
      function cc(a2, b2) {
        var c2, d2 = s(a2) ? a2 : tb(a2);
        return !(!this.isValid() || !d2.isValid()) && (b2 = K(b2 || "millisecond"), b2 === "millisecond" ? this.valueOf() === d2.valueOf() : (c2 = d2.valueOf(), this.clone().startOf(b2).valueOf() <= c2 && c2 <= this.clone().endOf(b2).valueOf()));
      }
      function dc(a2, b2) {
        return this.isSame(a2, b2) || this.isAfter(a2, b2);
      }
      function ec(a2, b2) {
        return this.isSame(a2, b2) || this.isBefore(a2, b2);
      }
      function fc(a2, b2, c2) {
        var d2, e2, f2, g2;
        return this.isValid() ? (d2 = Fb(a2, this), d2.isValid() ? (e2 = 6e4 * (d2.utcOffset() - this.utcOffset()), b2 = K(b2), b2 === "year" || b2 === "month" || b2 === "quarter" ? (g2 = gc(this, d2), b2 === "quarter" ? g2 /= 3 : b2 === "year" && (g2 /= 12)) : (f2 = this - d2, g2 = b2 === "second" ? f2 / 1e3 : b2 === "minute" ? f2 / 6e4 : b2 === "hour" ? f2 / 36e5 : b2 === "day" ? (f2 - e2) / 864e5 : b2 === "week" ? (f2 - e2) / 6048e5 : f2), c2 ? g2 : t(g2)) : NaN) : NaN;
      }
      function gc(a2, b2) {
        var c2, d2, e2 = 12 * (b2.year() - a2.year()) + (b2.month() - a2.month()), f2 = a2.clone().add(e2, "months");
        return b2 - f2 < 0 ? (c2 = a2.clone().add(e2 - 1, "months"), d2 = (b2 - f2) / (f2 - c2)) : (c2 = a2.clone().add(e2 + 1, "months"), d2 = (b2 - f2) / (c2 - f2)), -(e2 + d2) || 0;
      }
      function hc() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function ic() {
        if (!this.isValid())
          return null;
        var a2 = this.clone().utc();
        return a2.year() < 0 || a2.year() > 9999 ? X(a2, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : z(Date.prototype.toISOString) ? this.toDate().toISOString() : X(a2, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
      }
      function jc() {
        if (!this.isValid())
          return "moment.invalid(/* " + this._i + " */)";
        var a2 = "moment", b2 = "";
        this.isLocal() || (a2 = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone", b2 = "Z");
        var c2 = "[" + a2 + '("]', d2 = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", e2 = "-MM-DD[T]HH:mm:ss.SSS", f2 = b2 + '[")]';
        return this.format(c2 + d2 + e2 + f2);
      }
      function kc(b2) {
        b2 || (b2 = this.isUtc() ? a.defaultFormatUtc : a.defaultFormat);
        var c2 = X(this, b2);
        return this.localeData().postformat(c2);
      }
      function lc(a2, b2) {
        return this.isValid() && (s(a2) && a2.isValid() || tb(a2).isValid()) ? Sb({to: this, from: a2}).locale(this.locale()).humanize(!b2) : this.localeData().invalidDate();
      }
      function mc(a2) {
        return this.from(tb(), a2);
      }
      function nc(a2, b2) {
        return this.isValid() && (s(a2) && a2.isValid() || tb(a2).isValid()) ? Sb({from: this, to: a2}).locale(this.locale()).humanize(!b2) : this.localeData().invalidDate();
      }
      function oc(a2) {
        return this.to(tb(), a2);
      }
      function pc(a2) {
        var b2;
        return a2 === void 0 ? this._locale._abbr : (b2 = bb(a2), b2 != null && (this._locale = b2), this);
      }
      function qc() {
        return this._locale;
      }
      function rc(a2) {
        switch (a2 = K(a2)) {
          case "year":
            this.month(0);
          case "quarter":
          case "month":
            this.date(1);
          case "week":
          case "isoWeek":
          case "day":
          case "date":
            this.hours(0);
          case "hour":
            this.minutes(0);
          case "minute":
            this.seconds(0);
          case "second":
            this.milliseconds(0);
        }
        return a2 === "week" && this.weekday(0), a2 === "isoWeek" && this.isoWeekday(1), a2 === "quarter" && this.month(3 * Math.floor(this.month() / 3)), this;
      }
      function sc(a2) {
        return a2 = K(a2), a2 === void 0 || a2 === "millisecond" ? this : (a2 === "date" && (a2 = "day"), this.startOf(a2).add(1, a2 === "isoWeek" ? "week" : a2).subtract(1, "ms"));
      }
      function tc() {
        return this._d.valueOf() - 6e4 * (this._offset || 0);
      }
      function uc() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function vc() {
        return new Date(this.valueOf());
      }
      function wc() {
        var a2 = this;
        return [a2.year(), a2.month(), a2.date(), a2.hour(), a2.minute(), a2.second(), a2.millisecond()];
      }
      function xc() {
        var a2 = this;
        return {years: a2.year(), months: a2.month(), date: a2.date(), hours: a2.hours(), minutes: a2.minutes(), seconds: a2.seconds(), milliseconds: a2.milliseconds()};
      }
      function yc() {
        return this.isValid() ? this.toISOString() : null;
      }
      function zc() {
        return o(this);
      }
      function Ac() {
        return k({}, n(this));
      }
      function Bc() {
        return n(this).overflow;
      }
      function Cc() {
        return {input: this._i, format: this._f, locale: this._locale, isUTC: this._isUTC, strict: this._strict};
      }
      function Dc(a2, b2) {
        U(0, [a2, a2.length], 0, b2);
      }
      function Ec(a2) {
        return Ic.call(this, a2, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function Fc(a2) {
        return Ic.call(this, a2, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function Gc() {
        return xa(this.year(), 1, 4);
      }
      function Hc() {
        var a2 = this.localeData()._week;
        return xa(this.year(), a2.dow, a2.doy);
      }
      function Ic(a2, b2, c2, d2, e2) {
        var f2;
        return a2 == null ? wa(this, d2, e2).year : (f2 = xa(a2, d2, e2), b2 > f2 && (b2 = f2), Jc.call(this, a2, b2, c2, d2, e2));
      }
      function Jc(a2, b2, c2, d2, e2) {
        var f2 = va(a2, b2, c2, d2, e2), g2 = ta(f2.year, 0, f2.dayOfYear);
        return this.year(g2.getUTCFullYear()), this.month(g2.getUTCMonth()), this.date(g2.getUTCDate()), this;
      }
      function Kc(a2) {
        return a2 == null ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a2 - 1) + this.month() % 3);
      }
      function Lc(a2) {
        var b2 = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return a2 == null ? b2 : this.add(a2 - b2, "d");
      }
      function Mc(a2, b2) {
        b2[ke] = u(1e3 * ("0." + a2));
      }
      function Nc() {
        return this._isUTC ? "UTC" : "";
      }
      function Oc() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      function Pc(a2) {
        return tb(1e3 * a2);
      }
      function Qc() {
        return tb.apply(null, arguments).parseZone();
      }
      function Rc(a2) {
        return a2;
      }
      function Sc(a2, b2, c2, d2) {
        var e2 = bb(), f2 = l().set(d2, b2);
        return e2[c2](f2, a2);
      }
      function Tc(a2, b2, c2) {
        if (g(a2) && (b2 = a2, a2 = void 0), a2 = a2 || "", b2 != null)
          return Sc(a2, b2, c2, "month");
        var d2, e2 = [];
        for (d2 = 0; d2 < 12; d2++)
          e2[d2] = Sc(a2, d2, c2, "month");
        return e2;
      }
      function Uc(a2, b2, c2, d2) {
        typeof a2 == "boolean" ? (g(b2) && (c2 = b2, b2 = void 0), b2 = b2 || "") : (b2 = a2, c2 = b2, a2 = false, g(b2) && (c2 = b2, b2 = void 0), b2 = b2 || "");
        var e2 = bb(), f2 = a2 ? e2._week.dow : 0;
        if (c2 != null)
          return Sc(b2, (c2 + f2) % 7, d2, "day");
        var h2, i2 = [];
        for (h2 = 0; h2 < 7; h2++)
          i2[h2] = Sc(b2, (h2 + f2) % 7, d2, "day");
        return i2;
      }
      function Vc(a2, b2) {
        return Tc(a2, b2, "months");
      }
      function Wc(a2, b2) {
        return Tc(a2, b2, "monthsShort");
      }
      function Xc(a2, b2, c2) {
        return Uc(a2, b2, c2, "weekdays");
      }
      function Yc(a2, b2, c2) {
        return Uc(a2, b2, c2, "weekdaysShort");
      }
      function Zc(a2, b2, c2) {
        return Uc(a2, b2, c2, "weekdaysMin");
      }
      function $c() {
        var a2 = this._data;
        return this._milliseconds = df(this._milliseconds), this._days = df(this._days), this._months = df(this._months), a2.milliseconds = df(a2.milliseconds), a2.seconds = df(a2.seconds), a2.minutes = df(a2.minutes), a2.hours = df(a2.hours), a2.months = df(a2.months), a2.years = df(a2.years), this;
      }
      function _c(a2, b2, c2, d2) {
        var e2 = Sb(b2, c2);
        return a2._milliseconds += d2 * e2._milliseconds, a2._days += d2 * e2._days, a2._months += d2 * e2._months, a2._bubble();
      }
      function ad(a2, b2) {
        return _c(this, a2, b2, 1);
      }
      function bd(a2, b2) {
        return _c(this, a2, b2, -1);
      }
      function cd(a2) {
        return a2 < 0 ? Math.floor(a2) : Math.ceil(a2);
      }
      function dd() {
        var a2, b2, c2, d2, e2, f2 = this._milliseconds, g2 = this._days, h2 = this._months, i2 = this._data;
        return f2 >= 0 && g2 >= 0 && h2 >= 0 || f2 <= 0 && g2 <= 0 && h2 <= 0 || (f2 += 864e5 * cd(fd(h2) + g2), g2 = 0, h2 = 0), i2.milliseconds = f2 % 1e3, a2 = t(f2 / 1e3), i2.seconds = a2 % 60, b2 = t(a2 / 60), i2.minutes = b2 % 60, c2 = t(b2 / 60), i2.hours = c2 % 24, g2 += t(c2 / 24), e2 = t(ed(g2)), h2 += e2, g2 -= cd(fd(e2)), d2 = t(h2 / 12), h2 %= 12, i2.days = g2, i2.months = h2, i2.years = d2, this;
      }
      function ed(a2) {
        return 4800 * a2 / 146097;
      }
      function fd(a2) {
        return 146097 * a2 / 4800;
      }
      function gd(a2) {
        if (!this.isValid())
          return NaN;
        var b2, c2, d2 = this._milliseconds;
        if (a2 = K(a2), a2 === "month" || a2 === "year")
          return b2 = this._days + d2 / 864e5, c2 = this._months + ed(b2), a2 === "month" ? c2 : c2 / 12;
        switch (b2 = this._days + Math.round(fd(this._months)), a2) {
          case "week":
            return b2 / 7 + d2 / 6048e5;
          case "day":
            return b2 + d2 / 864e5;
          case "hour":
            return 24 * b2 + d2 / 36e5;
          case "minute":
            return 1440 * b2 + d2 / 6e4;
          case "second":
            return 86400 * b2 + d2 / 1e3;
          case "millisecond":
            return Math.floor(864e5 * b2) + d2;
          default:
            throw new Error("Unknown unit " + a2);
        }
      }
      function hd() {
        return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * u(this._months / 12) : NaN;
      }
      function id(a2) {
        return function() {
          return this.as(a2);
        };
      }
      function jd(a2) {
        return a2 = K(a2), this.isValid() ? this[a2 + "s"]() : NaN;
      }
      function kd(a2) {
        return function() {
          return this.isValid() ? this._data[a2] : NaN;
        };
      }
      function ld() {
        return t(this.days() / 7);
      }
      function md(a2, b2, c2, d2, e2) {
        return e2.relativeTime(b2 || 1, !!c2, a2, d2);
      }
      function nd(a2, b2, c2) {
        var d2 = Sb(a2).abs(), e2 = uf(d2.as("s")), f2 = uf(d2.as("m")), g2 = uf(d2.as("h")), h2 = uf(d2.as("d")), i2 = uf(d2.as("M")), j2 = uf(d2.as("y")), k2 = e2 <= vf.ss && ["s", e2] || e2 < vf.s && ["ss", e2] || f2 <= 1 && ["m"] || f2 < vf.m && ["mm", f2] || g2 <= 1 && ["h"] || g2 < vf.h && ["hh", g2] || h2 <= 1 && ["d"] || h2 < vf.d && ["dd", h2] || i2 <= 1 && ["M"] || i2 < vf.M && ["MM", i2] || j2 <= 1 && ["y"] || ["yy", j2];
        return k2[2] = b2, k2[3] = +a2 > 0, k2[4] = c2, md.apply(null, k2);
      }
      function od(a2) {
        return a2 === void 0 ? uf : typeof a2 == "function" && (uf = a2, true);
      }
      function pd(a2, b2) {
        return vf[a2] !== void 0 && (b2 === void 0 ? vf[a2] : (vf[a2] = b2, a2 === "s" && (vf.ss = b2 - 1), true));
      }
      function qd(a2) {
        if (!this.isValid())
          return this.localeData().invalidDate();
        var b2 = this.localeData(), c2 = nd(this, !a2, b2);
        return a2 && (c2 = b2.pastFuture(+this, c2)), b2.postformat(c2);
      }
      function rd() {
        if (!this.isValid())
          return this.localeData().invalidDate();
        var a2, b2, c2, d2 = wf(this._milliseconds) / 1e3, e2 = wf(this._days), f2 = wf(this._months);
        a2 = t(d2 / 60), b2 = t(a2 / 60), d2 %= 60, a2 %= 60, c2 = t(f2 / 12), f2 %= 12;
        var g2 = c2, h2 = f2, i2 = e2, j2 = b2, k2 = a2, l2 = d2, m2 = this.asSeconds();
        return m2 ? (m2 < 0 ? "-" : "") + "P" + (g2 ? g2 + "Y" : "") + (h2 ? h2 + "M" : "") + (i2 ? i2 + "D" : "") + (j2 || k2 || l2 ? "T" : "") + (j2 ? j2 + "H" : "") + (k2 ? k2 + "M" : "") + (l2 ? l2 + "S" : "") : "P0D";
      }
      var sd, td;
      td = Array.prototype.some ? Array.prototype.some : function(a2) {
        for (var b2 = Object(this), c2 = b2.length >>> 0, d2 = 0; d2 < c2; d2++)
          if (d2 in b2 && a2.call(this, b2[d2], d2, b2))
            return true;
        return false;
      };
      var ud = td, vd = a.momentProperties = [], wd = false, xd = {};
      a.suppressDeprecationWarnings = false, a.deprecationHandler = null;
      var yd;
      yd = Object.keys ? Object.keys : function(a2) {
        var b2, c2 = [];
        for (b2 in a2)
          j(a2, b2) && c2.push(b2);
        return c2;
      };
      var zd, Ad = yd, Bd = {sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L"}, Cd = {LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A"}, Dd = "Invalid date", Ed = "%d", Fd = /\d{1,2}/, Gd = {future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years"}, Hd = {}, Id = {}, Jd = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, Kd = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, Ld = {}, Md = {}, Nd = /\d/, Od = /\d\d/, Pd = /\d{3}/, Qd = /\d{4}/, Rd = /[+-]?\d{6}/, Sd = /\d\d?/, Td = /\d\d\d\d?/, Ud = /\d\d\d\d\d\d?/, Vd = /\d{1,3}/, Wd = /\d{1,4}/, Xd = /[+-]?\d{1,6}/, Yd = /\d+/, Zd = /[+-]?\d+/, $d = /Z|[+-]\d\d:?\d\d/gi, _d = /Z|[+-]\d\d(?::?\d\d)?/gi, ae = /[+-]?\d+(\.\d{1,3})?/, be = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, ce = {}, de = {}, ee = 0, fe = 1, ge = 2, he = 3, ie = 4, je = 5, ke = 6, le = 7, me = 8;
      zd = Array.prototype.indexOf ? Array.prototype.indexOf : function(a2) {
        var b2;
        for (b2 = 0; b2 < this.length; ++b2)
          if (this[b2] === a2)
            return b2;
        return -1;
      };
      var ne = zd;
      U("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      }), U("MMM", 0, 0, function(a2) {
        return this.localeData().monthsShort(this, a2);
      }), U("MMMM", 0, 0, function(a2) {
        return this.localeData().months(this, a2);
      }), J("month", "M"), M("month", 8), Z("M", Sd), Z("MM", Sd, Od), Z("MMM", function(a2, b2) {
        return b2.monthsShortRegex(a2);
      }), Z("MMMM", function(a2, b2) {
        return b2.monthsRegex(a2);
      }), ba(["M", "MM"], function(a2, b2) {
        b2[fe] = u(a2) - 1;
      }), ba(["MMM", "MMMM"], function(a2, b2, c2, d2) {
        var e2 = c2._locale.monthsParse(a2, d2, c2._strict);
        e2 != null ? b2[fe] = e2 : n(c2).invalidMonth = a2;
      });
      var oe = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, pe = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), qe = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), re = be, se = be;
      U("Y", 0, 0, function() {
        var a2 = this.year();
        return a2 <= 9999 ? "" + a2 : "+" + a2;
      }), U(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      }), U(0, ["YYYY", 4], 0, "year"), U(0, ["YYYYY", 5], 0, "year"), U(0, ["YYYYYY", 6, true], 0, "year"), J("year", "y"), M("year", 1), Z("Y", Zd), Z("YY", Sd, Od), Z("YYYY", Wd, Qd), Z("YYYYY", Xd, Rd), Z("YYYYYY", Xd, Rd), ba(["YYYYY", "YYYYYY"], ee), ba("YYYY", function(b2, c2) {
        c2[ee] = b2.length === 2 ? a.parseTwoDigitYear(b2) : u(b2);
      }), ba("YY", function(b2, c2) {
        c2[ee] = a.parseTwoDigitYear(b2);
      }), ba("Y", function(a2, b2) {
        b2[ee] = parseInt(a2, 10);
      }), a.parseTwoDigitYear = function(a2) {
        return u(a2) + (u(a2) > 68 ? 1900 : 2e3);
      };
      var te = O("FullYear", true);
      U("w", ["ww", 2], "wo", "week"), U("W", ["WW", 2], "Wo", "isoWeek"), J("week", "w"), J("isoWeek", "W"), M("week", 5), M("isoWeek", 5), Z("w", Sd), Z("ww", Sd, Od), Z("W", Sd), Z("WW", Sd, Od), ca(["w", "ww", "W", "WW"], function(a2, b2, c2, d2) {
        b2[d2.substr(0, 1)] = u(a2);
      });
      var ue = {dow: 0, doy: 6};
      U("d", 0, "do", "day"), U("dd", 0, 0, function(a2) {
        return this.localeData().weekdaysMin(this, a2);
      }), U("ddd", 0, 0, function(a2) {
        return this.localeData().weekdaysShort(this, a2);
      }), U("dddd", 0, 0, function(a2) {
        return this.localeData().weekdays(this, a2);
      }), U("e", 0, 0, "weekday"), U("E", 0, 0, "isoWeekday"), J("day", "d"), J("weekday", "e"), J("isoWeekday", "E"), M("day", 11), M("weekday", 11), M("isoWeekday", 11), Z("d", Sd), Z("e", Sd), Z("E", Sd), Z("dd", function(a2, b2) {
        return b2.weekdaysMinRegex(a2);
      }), Z("ddd", function(a2, b2) {
        return b2.weekdaysShortRegex(a2);
      }), Z("dddd", function(a2, b2) {
        return b2.weekdaysRegex(a2);
      }), ca(["dd", "ddd", "dddd"], function(a2, b2, c2, d2) {
        var e2 = c2._locale.weekdaysParse(a2, d2, c2._strict);
        e2 != null ? b2.d = e2 : n(c2).invalidWeekday = a2;
      }), ca(["d", "e", "E"], function(a2, b2, c2, d2) {
        b2[d2] = u(a2);
      });
      var ve = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), we = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), xe = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), ye = be, ze = be, Ae = be;
      U("H", ["HH", 2], 0, "hour"), U("h", ["hh", 2], 0, Ra), U("k", ["kk", 2], 0, Sa), U("hmm", 0, 0, function() {
        return "" + Ra.apply(this) + T(this.minutes(), 2);
      }), U("hmmss", 0, 0, function() {
        return "" + Ra.apply(this) + T(this.minutes(), 2) + T(this.seconds(), 2);
      }), U("Hmm", 0, 0, function() {
        return "" + this.hours() + T(this.minutes(), 2);
      }), U("Hmmss", 0, 0, function() {
        return "" + this.hours() + T(this.minutes(), 2) + T(this.seconds(), 2);
      }), Ta("a", true), Ta("A", false), J("hour", "h"), M("hour", 13), Z("a", Ua), Z("A", Ua), Z("H", Sd), Z("h", Sd), Z("k", Sd), Z("HH", Sd, Od), Z("hh", Sd, Od), Z("kk", Sd, Od), Z("hmm", Td), Z("hmmss", Ud), Z("Hmm", Td), Z("Hmmss", Ud), ba(["H", "HH"], he), ba(["k", "kk"], function(a2, b2, c2) {
        var d2 = u(a2);
        b2[he] = d2 === 24 ? 0 : d2;
      }), ba(["a", "A"], function(a2, b2, c2) {
        c2._isPm = c2._locale.isPM(a2), c2._meridiem = a2;
      }), ba(["h", "hh"], function(a2, b2, c2) {
        b2[he] = u(a2), n(c2).bigHour = true;
      }), ba("hmm", function(a2, b2, c2) {
        var d2 = a2.length - 2;
        b2[he] = u(a2.substr(0, d2)), b2[ie] = u(a2.substr(d2)), n(c2).bigHour = true;
      }), ba("hmmss", function(a2, b2, c2) {
        var d2 = a2.length - 4, e2 = a2.length - 2;
        b2[he] = u(a2.substr(0, d2)), b2[ie] = u(a2.substr(d2, 2)), b2[je] = u(a2.substr(e2)), n(c2).bigHour = true;
      }), ba("Hmm", function(a2, b2, c2) {
        var d2 = a2.length - 2;
        b2[he] = u(a2.substr(0, d2)), b2[ie] = u(a2.substr(d2));
      }), ba("Hmmss", function(a2, b2, c2) {
        var d2 = a2.length - 4, e2 = a2.length - 2;
        b2[he] = u(a2.substr(0, d2)), b2[ie] = u(a2.substr(d2, 2)), b2[je] = u(a2.substr(e2));
      });
      var Be, Ce = /[ap]\.?m?\.?/i, De = O("Hours", true), Ee = {calendar: Bd, longDateFormat: Cd, invalidDate: Dd, ordinal: Ed, dayOfMonthOrdinalParse: Fd, relativeTime: Gd, months: pe, monthsShort: qe, week: ue, weekdays: ve, weekdaysMin: xe, weekdaysShort: we, meridiemParse: Ce}, Fe = {}, Ge = {}, He = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Ie = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Je = /Z|[+-]\d\d(?::?\d\d)?/, Ke = [["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/], ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/], ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/], ["GGGG-[W]WW", /\d{4}-W\d\d/, false], ["YYYY-DDD", /\d{4}-\d{3}/], ["YYYY-MM", /\d{4}-\d\d/, false], ["YYYYYYMMDD", /[+-]\d{10}/], ["YYYYMMDD", /\d{8}/], ["GGGG[W]WWE", /\d{4}W\d{3}/], ["GGGG[W]WW", /\d{4}W\d{2}/, false], ["YYYYDDD", /\d{7}/]], Le = [["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/], ["HH:mm:ss", /\d\d:\d\d:\d\d/], ["HH:mm", /\d\d:\d\d/], ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/], ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/], ["HHmmss", /\d\d\d\d\d\d/], ["HHmm", /\d\d\d\d/], ["HH", /\d\d/]], Me = /^\/?Date\((\-?\d+)/i, Ne = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;
      a.createFromInputFallback = x("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(a2) {
        a2._d = new Date(a2._i + (a2._useUTC ? " UTC" : ""));
      }), a.ISO_8601 = function() {
      }, a.RFC_2822 = function() {
      };
      var Oe = x("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var a2 = tb.apply(null, arguments);
        return this.isValid() && a2.isValid() ? a2 < this ? this : a2 : p();
      }), Pe = x("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var a2 = tb.apply(null, arguments);
        return this.isValid() && a2.isValid() ? a2 > this ? this : a2 : p();
      }), Qe = function() {
        return Date.now ? Date.now() : +new Date();
      }, Re = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];
      Db("Z", ":"), Db("ZZ", ""), Z("Z", _d), Z("ZZ", _d), ba(["Z", "ZZ"], function(a2, b2, c2) {
        c2._useUTC = true, c2._tzm = Eb(_d, a2);
      });
      var Se = /([\+\-]|\d\d)/gi;
      a.updateOffset = function() {
      };
      var Te = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/, Ue = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
      Sb.fn = Ab.prototype, Sb.invalid = zb;
      var Ve = Wb(1, "add"), We = Wb(-1, "subtract");
      a.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", a.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      var Xe = x("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(a2) {
        return a2 === void 0 ? this.localeData() : this.locale(a2);
      });
      U(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      }), U(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      }), Dc("gggg", "weekYear"), Dc("ggggg", "weekYear"), Dc("GGGG", "isoWeekYear"), Dc("GGGGG", "isoWeekYear"), J("weekYear", "gg"), J("isoWeekYear", "GG"), M("weekYear", 1), M("isoWeekYear", 1), Z("G", Zd), Z("g", Zd), Z("GG", Sd, Od), Z("gg", Sd, Od), Z("GGGG", Wd, Qd), Z("gggg", Wd, Qd), Z("GGGGG", Xd, Rd), Z("ggggg", Xd, Rd), ca(["gggg", "ggggg", "GGGG", "GGGGG"], function(a2, b2, c2, d2) {
        b2[d2.substr(0, 2)] = u(a2);
      }), ca(["gg", "GG"], function(b2, c2, d2, e2) {
        c2[e2] = a.parseTwoDigitYear(b2);
      }), U("Q", 0, "Qo", "quarter"), J("quarter", "Q"), M("quarter", 7), Z("Q", Nd), ba("Q", function(a2, b2) {
        b2[fe] = 3 * (u(a2) - 1);
      }), U("D", ["DD", 2], "Do", "date"), J("date", "D"), M("date", 9), Z("D", Sd), Z("DD", Sd, Od), Z("Do", function(a2, b2) {
        return a2 ? b2._dayOfMonthOrdinalParse || b2._ordinalParse : b2._dayOfMonthOrdinalParseLenient;
      }), ba(["D", "DD"], ge), ba("Do", function(a2, b2) {
        b2[ge] = u(a2.match(Sd)[0], 10);
      });
      var Ye = O("Date", true);
      U("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), J("dayOfYear", "DDD"), M("dayOfYear", 4), Z("DDD", Vd), Z("DDDD", Pd), ba(["DDD", "DDDD"], function(a2, b2, c2) {
        c2._dayOfYear = u(a2);
      }), U("m", ["mm", 2], 0, "minute"), J("minute", "m"), M("minute", 14), Z("m", Sd), Z("mm", Sd, Od), ba(["m", "mm"], ie);
      var Ze = O("Minutes", false);
      U("s", ["ss", 2], 0, "second"), J("second", "s"), M("second", 15), Z("s", Sd), Z("ss", Sd, Od), ba(["s", "ss"], je);
      var $e = O("Seconds", false);
      U("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      }), U(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      }), U(0, ["SSS", 3], 0, "millisecond"), U(0, ["SSSS", 4], 0, function() {
        return 10 * this.millisecond();
      }), U(0, ["SSSSS", 5], 0, function() {
        return 100 * this.millisecond();
      }), U(0, ["SSSSSS", 6], 0, function() {
        return 1e3 * this.millisecond();
      }), U(0, ["SSSSSSS", 7], 0, function() {
        return 1e4 * this.millisecond();
      }), U(0, ["SSSSSSSS", 8], 0, function() {
        return 1e5 * this.millisecond();
      }), U(0, ["SSSSSSSSS", 9], 0, function() {
        return 1e6 * this.millisecond();
      }), J("millisecond", "ms"), M("millisecond", 16), Z("S", Vd, Nd), Z("SS", Vd, Od), Z("SSS", Vd, Pd);
      var _e;
      for (_e = "SSSS"; _e.length <= 9; _e += "S")
        Z(_e, Yd);
      for (_e = "S"; _e.length <= 9; _e += "S")
        ba(_e, Mc);
      var af = O("Milliseconds", false);
      U("z", 0, 0, "zoneAbbr"), U("zz", 0, 0, "zoneName");
      var bf = r.prototype;
      bf.add = Ve, bf.calendar = Zb, bf.clone = $b, bf.diff = fc, bf.endOf = sc, bf.format = kc, bf.from = lc, bf.fromNow = mc, bf.to = nc, bf.toNow = oc, bf.get = R, bf.invalidAt = Bc, bf.isAfter = _b, bf.isBefore = ac, bf.isBetween = bc, bf.isSame = cc, bf.isSameOrAfter = dc, bf.isSameOrBefore = ec, bf.isValid = zc, bf.lang = Xe, bf.locale = pc, bf.localeData = qc, bf.max = Pe, bf.min = Oe, bf.parsingFlags = Ac, bf.set = S, bf.startOf = rc, bf.subtract = We, bf.toArray = wc, bf.toObject = xc, bf.toDate = vc, bf.toISOString = ic, bf.inspect = jc, bf.toJSON = yc, bf.toString = hc, bf.unix = uc, bf.valueOf = tc, bf.creationData = Cc, bf.year = te, bf.isLeapYear = ra, bf.weekYear = Ec, bf.isoWeekYear = Fc, bf.quarter = bf.quarters = Kc, bf.month = ka, bf.daysInMonth = la, bf.week = bf.weeks = Ba, bf.isoWeek = bf.isoWeeks = Ca, bf.weeksInYear = Hc, bf.isoWeeksInYear = Gc, bf.date = Ye, bf.day = bf.days = Ka, bf.weekday = La, bf.isoWeekday = Ma, bf.dayOfYear = Lc, bf.hour = bf.hours = De, bf.minute = bf.minutes = Ze, bf.second = bf.seconds = $e, bf.millisecond = bf.milliseconds = af, bf.utcOffset = Hb, bf.utc = Jb, bf.local = Kb, bf.parseZone = Lb, bf.hasAlignedHourOffset = Mb, bf.isDST = Nb, bf.isLocal = Pb, bf.isUtcOffset = Qb, bf.isUtc = Rb, bf.isUTC = Rb, bf.zoneAbbr = Nc, bf.zoneName = Oc, bf.dates = x("dates accessor is deprecated. Use date instead.", Ye), bf.months = x("months accessor is deprecated. Use month instead", ka), bf.years = x("years accessor is deprecated. Use year instead", te), bf.zone = x("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", Ib), bf.isDSTShifted = x("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", Ob);
      var cf = C.prototype;
      cf.calendar = D, cf.longDateFormat = E, cf.invalidDate = F, cf.ordinal = G, cf.preparse = Rc, cf.postformat = Rc, cf.relativeTime = H, cf.pastFuture = I, cf.set = A, cf.months = fa, cf.monthsShort = ga, cf.monthsParse = ia, cf.monthsRegex = na, cf.monthsShortRegex = ma, cf.week = ya, cf.firstDayOfYear = Aa, cf.firstDayOfWeek = za, cf.weekdays = Fa, cf.weekdaysMin = Ha, cf.weekdaysShort = Ga, cf.weekdaysParse = Ja, cf.weekdaysRegex = Na, cf.weekdaysShortRegex = Oa, cf.weekdaysMinRegex = Pa, cf.isPM = Va, cf.meridiem = Wa, $a("en", {dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function(a2) {
        var b2 = a2 % 10, c2 = u(a2 % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
        return a2 + c2;
      }}), a.lang = x("moment.lang is deprecated. Use moment.locale instead.", $a), a.langData = x("moment.langData is deprecated. Use moment.localeData instead.", bb);
      var df = Math.abs, ef = id("ms"), ff = id("s"), gf = id("m"), hf = id("h"), jf = id("d"), kf = id("w"), lf = id("M"), mf = id("y"), nf = kd("milliseconds"), of = kd("seconds"), pf = kd("minutes"), qf = kd("hours"), rf = kd("days"), sf = kd("months"), tf = kd("years"), uf = Math.round, vf = {ss: 44, s: 45, m: 45, h: 22, d: 26, M: 11}, wf = Math.abs, xf = Ab.prototype;
      return xf.isValid = yb, xf.abs = $c, xf.add = ad, xf.subtract = bd, xf.as = gd, xf.asMilliseconds = ef, xf.asSeconds = ff, xf.asMinutes = gf, xf.asHours = hf, xf.asDays = jf, xf.asWeeks = kf, xf.asMonths = lf, xf.asYears = mf, xf.valueOf = hd, xf._bubble = dd, xf.get = jd, xf.milliseconds = nf, xf.seconds = of, xf.minutes = pf, xf.hours = qf, xf.days = rf, xf.weeks = ld, xf.months = sf, xf.years = tf, xf.humanize = qd, xf.toISOString = rd, xf.toString = rd, xf.toJSON = rd, xf.locale = pc, xf.localeData = qc, xf.toIsoString = x("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", rd), xf.lang = Xe, U("X", 0, 0, "unix"), U("x", 0, 0, "valueOf"), Z("x", Zd), Z("X", ae), ba("X", function(a2, b2, c2) {
        c2._d = new Date(1e3 * parseFloat(a2, 10));
      }), ba("x", function(a2, b2, c2) {
        c2._d = new Date(u(a2));
      }), a.version = "2.18.1", b(tb), a.fn = bf, a.min = vb, a.max = wb, a.now = Qe, a.utc = l, a.unix = Pc, a.months = Vc, a.isDate = h, a.locale = $a, a.invalid = p, a.duration = Sb, a.isMoment = s, a.weekdays = Xc, a.parseZone = Qc, a.localeData = bb, a.isDuration = Bb, a.monthsShort = Wc, a.weekdaysMin = Zc, a.defineLocale = _a, a.updateLocale = ab, a.locales = cb, a.weekdaysShort = Yc, a.normalizeUnits = K, a.relativeTimeRounding = od, a.relativeTimeThreshold = pd, a.calendarFormat = Yb, a.prototype = bf, a;
    });
  });

  // resources/js/daterangepicker.js
  var import_plugin = __toModule(require_plugin());
  var import_jquery = __toModule(require_jquery_min());
  var import_moment = __toModule(require_moment_min());
  var daterangepicker_default = (Alpine) => {
    Alpine.data("dateRangeComponent", ({
      name,
      state,
      alwaysShowCalendars,
      autoApply,
      linkedCalendars,
      startDate,
      endDate,
      maxDate,
      minDate,
      timePicker,
      timePickerIncrement,
      displayFormat,
      applyLabel,
      cancelLabel,
      fromLabel,
      toLabel,
      customRangeLabel,
      sunday,
      monday,
      tuesday,
      wednesday,
      thursday,
      friday,
      saturday,
      january,
      february,
      march,
      april,
      may,
      june,
      july,
      august,
      september,
      october,
      november,
      december,
      firstDay,
      today,
      yesterday,
      last_7_days,
      last_30_days,
      this_month,
      last_month,
      this_year,
      last_year,
      handleValueChangeUsing
    }) => {
      return {
        dateRangePicker: null,
        state,
        init: function() {
          this.dateRangePicker = new import_plugin.default(this.$refs.daterange, {
            name,
            alwaysShowCalendars,
            autoApply,
            linkedCalendars,
            autoUpdateInput: false,
            startDate: startDate != null ? (0, import_moment.default)(startDate) : (0, import_moment.default)(),
            endDate: endDate != null ? (0, import_moment.default)(endDate) : (0, import_moment.default)(),
            maxDate: maxDate != null ? (0, import_moment.default)(maxDate) : null,
            minDate: minDate != null ? (0, import_moment.default)(minDate) : null,
            timePicker,
            timePickerIncrement,
            handleApplyUsing: handleValueChangeUsing,
            locale: {
              format: displayFormat,
              separator: " - ",
              applyLabel,
              cancelLabel,
              fromLabel,
              toLabel,
              customRangeLabel,
              weekLabel: "W",
              daysOfWeek: [
                sunday,
                monday,
                tuesday,
                wednesday,
                thursday,
                friday,
                saturday
              ],
              monthNames: [
                january,
                february,
                march,
                april,
                may,
                june,
                july,
                august,
                september,
                october,
                november,
                december
              ],
              firstDay
            },
            ranges: {
              [last_7_days]: [(0, import_moment.default)().subtract(6, "days"), (0, import_moment.default)()],
              [last_30_days]: [(0, import_moment.default)().subtract(29, "days"), (0, import_moment.default)()],
              [this_month]: [(0, import_moment.default)().startOf("month"), (0, import_moment.default)().endOf("month")],
              [last_month]: [(0, import_moment.default)().subtract(1, "month").startOf("month"), (0, import_moment.default)().subtract(1, "month").endOf("month")],
              [this_year]: [(0, import_moment.default)().startOf("year"), (0, import_moment.default)().endOf("year")],
              [last_year]: [(0, import_moment.default)().subtract(1, "year").startOf("year"), (0, import_moment.default)().subtract(1, "year").endOf("year")]
            }
          }, function(start, end, label) {
            handleValueChangeUsing(start.format(displayFormat) + " - " + end.format(displayFormat), name);
          });
          (0, import_jquery.default)('input[name="' + name + '"]').val(this.state);
          this.$watch("state", function(value) {
            if (value == null) {
              value = "";
            }
            (0, import_jquery.default)('input[name="' + name + '"]').val(value);
          });
        }
      };
    });
  };

  // resources/js/filament-daterangepicker.js
  document.addEventListener("alpine:init", () => {
    window.Alpine.plugin(daterangepicker_default);
  });
})();
//# sourceMappingURL=data:application/json;base64,
